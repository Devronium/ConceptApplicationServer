#!/usr/local/bin/concept
import standard.lang.cli
include BinFile.con

class Main {
	Update(filename, id, field, val) {
		var bin = new BinFile(filename, "r+b");
		if (bin.Open()) {
			var o = bin.ById(value id);
			if (o) {
				echo "Setting $field to \"$val\" for id ${value id}.\n => Previous value was \"${o[field]}\"\n";
				o[field] = val;
				try {
					bin.Update(o, value id);
				} catch (var exc) {
					echo "Update error: $exc\n";
					bin.Close();
					return -6;
				}
				echo " => Succeeded\n";
			} else {
				echo "Invalid id: ${value id}\n";
				bin.Close();
				return -5;
			}
			bin.Close();
		}
		return 0;
	}

	Get(filename, id) {
		var bin = new BinFile(filename, "rb");
		if (bin.Open()) {
			var o = bin.ById(value id);
			if (o) {
				echo o;
			} else {
				echo "Invalid id: ${value id}\n";
				bin.Close();
				return -5;
			}
			bin.Close();
		}
		return 0;
	}

	Delete(filename, id) {
		var bin = new BinFile(filename, "r+b");
		if (bin.Open()) {
			bin.Delete(value id);
			bin.Close();
			echo "Deleted ${value id}\n";
		}
		return 0;
	}

	Block(filename, offset) {
		var bin = new BinFile(filename, "rb");
		if (bin.Open()) {
			if (bin.Seek(offset)) {
				if (bin.Read(var buf, DEFAULT_MODULO_SIZE + 8) == DEFAULT_MODULO_SIZE + 8) {
					echo unpack("u8s" + (DEFAULT_MODULO_SIZE - 1) + "u64", buf);
				} else
					echo "Cannot read enough bytes\n";
			} else {
				echo "Invalid offset $offset\n";
				bin.Close();
				return -6;
			}
			bin.Close();
		}
		return 0;
	}

	Garbage(filename) {
		var bin = new BinFile(filename, "rb");
		if (bin.Open()) {
			echo bin.GetGarbageBlocks();
			bin.Close();
		}
		return 0;
	}

	Write(tablename, o) {
		var bin = new BinFile(tablename, "r+b");
		if (bin.Open()) {
			bin.Store(o);
			bin.Close();
			return true;
		}
		return false;
	}

	Store(tablename, str) {
		var[] o;
		var arr = StrSplit(str, ",");
		for (var i = 0; i < length arr; i++) {
			var e = arr[i];
			if (e) {
				var arr2 = StrSplit(e, "=", true);
				if (length arr2 >= 2)
					o[trim(arr2[0])] = trim(arr2[1]);
			}
		}

		var bin = new BinFile(tablename, "r+b");
		if (bin.Open()) {
			bin.Store(o);
			bin.Close();
			echo "Stored:\n";
			echo o;
			echo "\n";
			return true;
		}
		return false;
	}

	Isolate(filename, id, tablename) {
		var bin = new BinFile(filename, "rb");
		if (bin.Open()) {
			var o = bin.ById(value id);
			if (o) {
				o['$'] = 0;
				if (!Write(tablename, o)) {
					echo "Error writing to $tablename\n";
				} else
					echo "Done\n";
			} else {
				echo "Invalid id: ${value id}\n";
				bin.Close();
				return -5;
			}
			bin.Close();
		}
		return 0;
	}

	KeyVal(arr) {
		var[] res;
		if (arr) {
			for (var i = 0; i < length arr; i++) {
				var k = arr[i];
				res["" + k] = k;
			}
		}
		return res;
	}

	Main() {
		var arg = CLArg()[0];
		if (!arg) {
			echo "Usage: BinCheck.con filename [show|set|get|isolate|garbage|rawblock|store|delete] [parameters]\n";	
			return -1;
		}
		var showdata = false;
		if (CLArg()[1]) {
			var command = ToLower("" + CLArg()[1]);
			switch (command) {
				case "show":
					showdata = true;
					break;
				case "set":
					var id = CLArg()[2];
					var field = CLArg()[3];
					if ((!id) || (!field)) {
						echo "Usage: BinCheck.con filename set id field value\n";
						return -3;
					}
_unlink("ringers");
_system("copy ringers_safe2 ringers");
					return Update(arg, id, field, CLArg()[4]);
					break;
				case "get":
					id = CLArg()[2];
					if (!id) {
						echo "Usage: BinCheck.con filename get id\n";
						return -3;
					}
					return Get(arg, id);
					break;
				case "delete":
					id = CLArg()[2];
					if (!id) {
						echo "Usage: BinCheck.con filename delete id\n";
						return -3;
					}
					return Delete(arg, id);
					break;
				case "isolate":
					id = CLArg()[2];
					var tablename = CLArg()[3];
					if ((!id) || (!tablename)) {
						echo "Usage: BinCheck.con filename isolate id new_tablename\n";
						return -3;
					}
					return Isolate(arg, id, tablename);
					break;
				case "garbage":
					return Garbage(arg);
					break;
				case "rawblock":
					var offset = value CLArg()[2];
					if (!offset) {
						echo "Usage: BinCheck.con filename rawblock offset\n";
						return -3;
					}
					return Block(arg, offset);
					break;
				case "store":
					var str = CLArg()[2];
					if (!str) {
						echo "Usage: BinCheck.con filename store str\n";
						return -3;
					}
					return Store(arg, str);
					break;
				default:
					echo "Unknown command $command\n";
					return -3;
			}
		}

		var bin = new BinFile(arg, "rb");
		bin.Debug = true;
		if (bin.Open()) {
			var userdata = [showdata];
			if (showdata)
				userdata[1] = new [];
			try {
				bin.Scan(function(o, id, userdata) {	
					userdata[2] = o;
					if (userdata[0])
						userdata[1][length userdata[1]] = o;
					else
						userdata[1]++;
				}, userdata);
			} catch (var exc) {
				if (userdata[2]) {
					echo "Object:\n";
					echo userdata[2];
				}
				echo "Broken file: $exc\n";
			}
			var garbage = KeyVal(bin.GetGarbageBlocks());
			bin.Close();
			if (showdata)
				echo "${length userdata[1]} record(s) retrieved\n";
			else
				echo "${userdata[1]} record(s) retrieved\n";
			if (showdata)
				echo userdata;
			echo "Checking integrity ...\n";
			var debug_data = bin.__debug_block_info;
			var keys = GetKeys(debug_data);
			for (var i = 0; i < length debug_data; i++) {
				var e = debug_data[i];
				var k = keys[i];
				if ((garbage[k]) && (typeof e != "array"))
					echo "Error: block ${k} deleted but referenced by $e";
				if (typeof e == "array") {
					if (garbage[k])
						echo "Error: DELETED block ${k} referenced by: ";
					else
						echo "Error: block ${k} referenced by: ";
					for (var j = 0; j < length e; j++) {
						if (j)
							echo ", ";
						echo e[j];
					}
					echo "\n";
				}
			}
			echo "done\n";
		} else {
			echo "Error opening file $arg\n";
			return -2;
		}
		return 0;
	}
}
