// the standard project forms definition. If no glade is used, comment the next line.
include project_forms.glade.con
include RMirrorContainer.con
include RLabel.con
include ServerFileChooser.con
include RPropertiesBox.con
import standard.lib.cripto


define SERVICE_APID		1
define APPLICATION_FORM_TYPE	MainForm


class ActiveServices extends Serializable {
	var[] Services;
	var[] Errors;
}

class MainForm extends window1 {
        var service_image;
        var error_image;
        var warning_image;
        var stop_image;
        var start_image;
        var stoped_image;
        var delete_image;
        var add_image;
        var server;
        var dummy_image;
        var certificate_path="";
        var pbox;
        var properties;
        var changed;

        public function LoadImage(stockid) {
            var image=new RImage(null);
            image.LoadResource(stockid, 1);
            return image;
        }
                
        public function MainForm(Owner, Lang S) {
            var ip=ToLower(_getenv('REMOTE_IP'));
            if ((ip!="127.0.0.1") && (ip!="::ffff:127.0.0.1")){
                CApplication.Message(S<<"<b>You are not allowed to access this application from host $ip</b>", S<<"Error", MESSAGE_ERROR);
                return -1;
            }
            super(Owner, S);
            
            CApplication::BeginNonCritical();
            var mirror=new RMirrorContainer(eventbox1);
            mirror.Show();
            var label=new RLabel(mirror);
            label.XAlign=0.5;
            label.YAlign=0.5;
            label.UseMarkup=true;
            label.Font.Name="Sans 16";
            label.Caption="<b>Concept BeeKeeper</b> - administration tool [$ip@${_getenv('CONCEPT_SERVERNAME')}]";
            label.Show();


            treeview1.Model=MODEL_LISTVIEW;
            treeview1.AddColumn(" ",IMAGE_COLUMN);
            treeview1.AddColumn("Service");
            treeview1.AddColumn("Status");
            treeview1.AddColumn(" ",IMAGE_COLUMN);
            treeview1.AddColumn(" ",IMAGE_COLUMN);
            treeview1.SearchColumn=1;
            treeview1.Columns[1].Resizable=true;
            treeview1.Columns[1].FontDescription="Bold";
            treeview1.Columns[2].FontDescription="Italic";
            
            service_image=LoadImage("gtk-about");
            start_image=LoadImage("gtk-media-play");
            stop_image=LoadImage("gtk-media-stop");
            delete_image=LoadImage("gtk-delete");
            add_image=LoadImage("gtk-add");
            error_image=LoadImage("gtk-dialog-error");
            stoped_image=LoadImage("gtk-stop");
            warning_image=LoadImage("gtk-dialog-warning");
            dummy_image=new RImage(null);
            
            var bkimage=new RImage(null);
            bkimage.Filename="res/background.jpg";
            this.BackgroundImage(bkimage);
            mirror.BackgroundImage(bkimage);

            label3.UseMarkup=true;
            certificate_path=_getenv("CONCEPT_CERTIFICATE");
            label3.Caption="Certificate root: <b>"+certificate_path+"</b>";
            server=new ServerFileChooser(this);
            server.FileTypes=["All Concept sources:con,csp","Concept application file:con","Concept server page:csp","All files:*"];
            server.Path="/";
            server.OnFileSelected=this.OnOpenDialogFileSelected;
            this.ResetList();
            
            pbox=new RPropertiesBox(scrolledwindow2);
            pbox.OnPropertyChanged=this.PropertyChanged;
            this.LoadProperties();
            pbox.Show();
            SendAPMessage(SERVICE_APID, 1003, "0");
            CApplication::EndNonCritical();
        }
        
        public function LoadProperties() {
            changed=new [];
            var paths=["+Paths", "Certificate", "ServerRoot", "LogFile"];
            var web=["+Web", "Timeout", "IdleTimeout", "@AllowDebug", "@AllowCASParent", "CGIProcessSessions"];
            var run=["+Run", "@AutoCompile"];
            var server=["+Server", "Port", "@IPv6", "User", "CGIPort", "@HandleCGIRequests", "APIDHost", "CGITrustedIP", "MaxConnections", "MaxInitialIDLE", "MaxInterAppMessageBuffer", "@UseSharedMemoryPool"];

            var all=paths+web+run+server;
            var len=length all;
            var props=new [];
            var ini_file=_getenv("CONCEPT_INIPATH");
            var target="";
            properties=new [];
            for (var i=0;i<len;i++) {
                var p=all[i];

                if (p) {
                    if (p[0]=="+")
                        target=++p;
                    else
                    if (p[0]=="@") {
                        p++;
                        properties[p]=[target, 1];
                        var val=value IniGet(ini_file, target, p);
                        if (val)
                            props[p]=[p, PROP_OPTION, "Yes", ["Yes", "No"]];
                        else
                            props[p]=[p, PROP_OPTION, "No", ["Yes", "No"]];
                    } else {
                        properties[p]=[target, 0];
                        props[length props]=[p, PROP_INSTANT, IniGet(ini_file, target, p)];
                    }
                }
            }

            pbox.Properties=props;
        }
        
        public function ResetList(as=null) {
            if (as)
                treeview1.Clear();
            treeview1.AddItem([add_image, "(Add service)", "",dummy_image,dummy_image]);
            if ((as) && (as.Services)) {
                as.Services=KeySorted(as.Services);
                var len=length as.Services;
                for (var i=0;i<len;i++) {
                    var s=as.Services[i];
                    if (s) {
                        var status=as.Errors[s];
                        var status_lo=ToLower(status);
                        if (status_lo=="stopped")
                            treeview1.AddItem([stoped_image, s, status, start_image, delete_image]);
                        else
                        if (Pos(status_lo, "ended")==1)
                            treeview1.AddItem([warning_image, s, status, stop_image, delete_image]);
                        else
                        if (Pos(status_lo, "failed")==1)
                            treeview1.AddItem([error_image, s, status, stop_image, delete_image]);
                        else
                            treeview1.AddItem([service_image, s, status, stop_image, delete_image]);
                    }
                }
            }
        }

        // Manually add your events here //
        public function OnAPMessage(Sender, Target, Value) {
            if (Sender==SERVICE_APID) {
                switch (Target) {
                    case 1000:
                        //treeview1.AddItem([service_image, Value, "Running (new service)", stop_image, delete_image]);
                        //break;
                    case 1001:
                    case 1002:
                        SendAPMessage(SERVICE_APID, 1003, "");
                        statusbar1.Caption="Done ...";
                        break;
                    case 1003:
                        if (Value) {
                            var data=ActiveServices::UnSerialize(Value, true);
                            if (data)
                                ResetList(data);
                        }
                        break;
                }
            }
        }

        public function OnOpenDialogFileSelected(Sender, EventData) {
            var path=Sender.Path+Sender.Filename;
            //register service;
            SendAPMessage(SERVICE_APID, 1000, path);
        }
        
        public function on_button1_clicked(Sender, EventData) {
            SendAPMessage(SERVICE_APID, 1003, "0");
        }

        public function on_treeview1_row_activated(Sender, EventData) {
            if (EventData<0)
                return 0;
            if (EventData==0) {
                server.Show();
                server.ListDirectory();
            } else {
                var item=treeview1.Items[EventData];
                if (item) {
                    var cindex=treeview1.ColumnIndex;
                    if (cindex==4) {
                        if (CApplication.Message(S<<"<b>Are you sure you want to remove this service ?</b>", S<<"Question", MESSAGE_QUESTION, BUTTONS_YES_NO)==RESPONSE_YES) {
                            statusbar1.Caption="Deleting service ...";
                            SendAPMessage(SERVICE_APID, 1002, item[1]);
                        }
                    } else {
                    //if (cindex==3) {
                        if (ToLower(item[2])=="stopped") {
                            statusbar1.Caption="Starting service ...";
                            SendAPMessage(SERVICE_APID, 1000, item[1]);
                        } else {
                            statusbar1.Caption="Stopping service ...";
                            SendAPMessage(SERVICE_APID, 1001, item[1]);
                        }
                    }
                }
            }
        }
        
        public function on_button2_clicked(Sender, EventData) {
            var index=combobox1.RowIndex;
            var private_key, public_key;
            switch (index) {
                case 0:
                    var bits=256;
                    break;
                case 1:
                    bits=512;
                    break;
                case 2:
                    bits=1024;
                    break;
                case 3:
                    bits=2048;
                    break;
                case 4:
                    bits=4096;
                    break;
                case 5:
                    bits=8192;
                    break;
            }
            if (!bits)
                bits=256;

            CheckPoint(0);
            this.Enabled=false;
            this.statusbar1.Caption="Please wait while generating random RSA ${bits}bit key pair ...";
            rsa_generate_keys(bits,private_key,public_key);
            this.statusbar1.Caption="Key pair generated";
            WriteFile(private_key, certificate_path+"server.key");
            WriteFile(public_key, certificate_path+"server.certificate");
            this.Enabled=true;
        }
        
        public function on_button3_clicked(Sender, EventData) {
            if (!changed) {
                    CApplication.Message(S<<"<b>No modified settings to write</b>", S<<"Information");
                    return 0;
            }
            var ini_file=_getenv("CONCEPT_INIPATH");
            if (ini_file) {
                var len=length changed;
                for (var i=0;i<len;i++) {
                    var ch=changed[i];
                    if (ch ) {
                        if (IniSet(ini_file, ch[0], ch[1], ch[2])) {
                            changed[i]=null;
                            this.statusbar1.Caption="Settings written";
                        } else
                            CApplication.Message(S<<"<b>Error writting settings(check your user rights)</b>", S<<"Error", MESSAGE_ERROR);
                            return 0;
                    }
                }
                changed=new [];
            }
        }
        
        public function PropertyChanged(Sender, EventData) {
            var pos=Pos(EventData, "=");
            var key=SubStr(EventData, 0, pos-1);
            var val=SubStr(EventData, pos, (length EventData)-pos);
            if (properties[key]) {
                if (properties[key][1]) {
                    if (val=="Yes")
                        val="1";
                    else
                        val="0";
                    changed[key]=[properties[key][0], key, val];
                } else
                    changed[key]=[properties[key][0], key, val];
            }
        }
        
        public function on_toolbutton1_clicked(Sender, EventData) {
            var log=_getenv("CONCEPT_LOGFILE");
            if (log) {
                if (CApplication.Message(S<<"<b>Are you sure you want to clear the log file ?</b>", S<<"Question", MESSAGE_QUESTION, BUTTONS_YES_NO)==RESPONSE_YES) {
                    if (WriteFile("",log)) {
                        CApplication.Message(S<<"<b>Log file successfully cleared</b>", S<<"Information");
                    } else {
                        CApplication.Message(S<<"<b>Log file cannot be cleared</b>", S<<"Warning", MESSAGE_WARNING);
                    }                    
                }
            } else
                CApplication.Message(S<<"<b>Log file is not set</b>", S<<"Error", MESSAGE_ERROR);
        }
        
        public function on_toolbutton2_clicked(Sender, EventData) {
            var log=_getenv("CONCEPT_LOGFILE");
            if (log) {
                if (CApplication.Message(S<<"<b>Are you sure you want to load the log file ?</b>\n\nThis operation can last up to a few minutes if the log file is big.", S<<"Question", MESSAGE_QUESTION, BUTTONS_YES_NO)==RESPONSE_YES) {
                    this.textview1.Text=ReadFile(log);
                }
            } else
                CApplication.Message(S<<"<b>Log file is not set</b>", S<<"Error", MESSAGE_ERROR);
        }

        public function on_toolbutton3_clicked(Sender, EventData) {
            var log=_getenv("CONCEPT_LOGFILE");
            if (log) {
                CApplication.SendFile("server.log", ReadFile(log), "", "Log files|*.log;All files|*.*");
            } else
                CApplication.Message(S<<"<b>Log file is not set</b>", S<<"Error", MESSAGE_ERROR);
        }
}
