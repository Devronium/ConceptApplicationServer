include Application.con
include RWebRTCConference.con
import standard.lib.json

class RTCData {
	var[] sdp;
	var[] ice;
	var apid;

	RTCData() {
		apid = GetAPID();
	}
}

class MainForm extends RForm {
	var rtc;
	var peer;
	var peername;
	var remoteAPID;
	var is_host;
	var[] all_apids;
	var video;
	var channel_name = "";
	var answered;

	OnError(Sender, EventData) {
		echo "ERROR: $EventData\n";
	}

	StatusChanged(Sender, EventData) {
		echo "STATUS: $EventData\n";
	}

	OnEndCall(Sender = null, EventData = "") {
		rtc.Hangup();
		if (all_apids) {
			for (var i = 0; i < length all_apids; i++) {
				var apid = all_apids[i];
				if (apid)
					SendAPMessage(apid, 3, "Bye");
			}
		}
		CApplication::Done();
		if (is_host)
			_unlink("$peername.peer");
	}

	OnICEReceived(ice) {
		rtc.ICE(ice);
	}

	OnSDPReceived(sdp) {
		rtc.SDP(sdp);
	}

	SendInvite(sdp) {
		if (is_host) {
			var json = JSONDeserialize(sdp);
			if ((json) && (json["channelName"]))
				SendAPMessage(value json["channelName"], 1, sdp);
		} else
		if (remoteAPID > 0) {
			SendAPMessage(remoteAPID, 1, sdp);
		} else {
			peer.sdp[length peer.sdp] = sdp;
			WriteFile(BinarizeObject(peer), "${peername}.peer");
		}
	}

	SendICE(ice) {
		if (is_host) {
			peer.ice[length peer.ice] = ice;
			var json = JSONDeserialize(ice);
			if ((json) && (json["channelName"]))
				SendAPMessage(value json["channelName"], 2, ice);
		} else
		if (remoteAPID > 0) {
			SendAPMessage(remoteAPID, 2, ice);
		} else {
			WriteFile(BinarizeObject(peer), "${peername}.peer");
		}
	}

	Channel(jdata) {
		if (is_host) {
			var json = JSONDeserialize(jdata);
			var channel = json["channelName"];
			if (!channel)
				channel = "";
		} else
			channel = "" + GetAPID();
		return channel;
	}

	APMessage(SenderAPID, MSGID, szData) {
		remoteAPID = SenderAPID;
		all_apids["" + SenderAPID] = SenderAPID;
		switch (MSGID) {
			case 1:
				OnSDPReceived(szData);
				if ((!is_host) && (!answered)) {
					//answered = true;
					rtc.Answer(Channel(szData));
				}
				break;
			case 2:
				OnICEReceived(szData);
				break;
			case 3:
				if ((!is_host) || (length all_apids <= 1)) {
					rtc.Hangup();
					CApplication::Done();
				}
				break;
			case 4:
				rtc.Start(video, true, false, 1920, 1080, szData);
				rtc.Offer(szData);
				break;
		}
	}

	LoadPeer() {
		if (peer) {
			for (var i = 0; i < length peer.sdp; i++)
				rtc.SDP(peer.sdp[i]);
			for (i = 0; i < length peer.ice; i++)
				rtc.ICE(peer.ice[i]);
		}
	}

	OnStart(Sender, EventData) {
		if (!is_host)
			LoadPeer();
	}

	MainForm(owner) {
		super(owner);
		var model = ToLower(CApplication.Query("Model", false, ""));
		var supported = false;
		video = true;
		echo "Browser: $model\n";
		if (Pos(model, " edge/") > 0) {
			supported = true;
			video = false;
		} else
		if (Pos(model, " chrome/") > 0)
			supported = true;
		else
		if (Pos(model, " firefox/") > 0)
			supported = true;

		peer = new RTCData();
		var host = CLArg()[0];

		rtc = new RWebRTCConference(this);
		rtc.Show();
		rtc.OnLocal = OnStart;
		if (!host)
			host = "test";
		if (!FileExists("$host.peer")) {
			WriteFile(BinarizeObject(peer), "$host.peer");
			is_host = true;
		} else {
			channel_name = "" + GetAPID();
			rtc.Start(video, true, false, 1920, 1080, channel_name);
			peer = UnBinarizeObject(ReadFile("$host.peer"));
			if (peer)
				remoteAPID = peer.apid;
			SendAPMessage(remoteAPID, 4, channel_name);
		}

		peername = host;

		rtc.OnClicked = OnEndCall;

		rtc.OnError = OnError;
		rtc.OnSDP = function(Sender, EventData) {
			SendInvite(EventData);
		};

		rtc.OnICE = function(Sender, EventData) {
			SendICE(EventData);
		};

		this.KeepAliveTimer();
	}

	KeepAliveTimer(Sender = null, EventData = "") {
		echo "Ping!\n";
		AddTimer(KeepAliveTimer, 5000);
	}
}

class Main {
	function Main() {
			try {
				var Application=new CApplication(new MainForm(null));

				Application.ShellDebug = Application.ApplicationForm.APMessage;
				Application.Init();
				Application.Run();
				Application.Done();
				Application.ApplicationForm.OnEndCall();
			} catch (var Exception) {
				echo Exception;
			}
	}
}
