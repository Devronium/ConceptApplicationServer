import standard.lib.str
import standard.net.curl
import standard.lang.serialize
import standard.arch.zip
import standard.C.io
import standard.lib.preg

define CURL_ROBOTID		"Concept Updater" 
define VALIDATION_SERVER	"venus.radgs.com/validation"
define VALIDATION_FILE		"/valid.servers"
define APP_LIST			"/app.list"

define SQL_FILE_LIST		"cudw.autosql.lst"
define CONSOLE_RUN		"cudw.console.autorun.con"
define CLIENT_RUN		"cudw.gui.autorun.con"
define URL_RUN			"cudw.autourl.url"
define INFO_RUN			"cudw.autoinfo.txt"


class URL {
	private var data="";
	private var header="";
	private var header_arr;

	private var _content_type="";
	private var _content_length=0;
	private var _location="";
	private var _response=0;
	private var _version="";

	private var _host="";
	private var rtl;

	public property Data { get data }
	public property Headers { get header_arr }

	public property Response { get _response }
	public property Location { get _location }
	public property ContentType { get _content_type }
	public property ContentLength { get _content_length }
	public property HTTPVersion { get _version }

	public property Host { get _host }

	public var my_delegate;

	private var prec_stream;

	private function write_data(ptr, size, nmemb, stream) {
		if (stream==1001) 
			header+=ptr;
		else {
			if (prec_stream==1001) {
				this.DoHeader();
			}

			data+=ptr;

			if (my_delegate)
				my_delegate(this, size*nmemb);
		}

		prec_stream=stream;
		return size*nmemb;
	}


	private function go_fetch(url, path) {
		var curl=curl_easy_init();
		data="";
		header="";

		if (curl) {
			curl_easy_setopt(curl, CURLOPT_URL, url+path);
			curl_easy_setopt(curl, CURLOPT_USERAGENT, CURL_ROBOTID);

			curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data);
			curl_easy_setopt(curl, CURLOPT_WRITEDATA, 1002);
			curl_easy_setopt(curl, CURLOPT_WRITEHEADER , 1001);

			curl_easy_perform(curl);

			curl_easy_cleanup(curl);
		}
	}

	function IsSuccessful() {
		return ((_response>=200) && (_response<300));
	}

	function IsRedirect() {
		return ((_response>=300) && (_response<400));
	}

	private function DoHeader() {
		header_arr=StrSplit(header,"\r\n");

		_response=0;
		_content_type="";
		_location="";

		var len=length header_arr;
		if (len) {
			var tmp=trim(header_arr[0]);
			var arr=StrSplit(tmp," ");

			_version=arr[0];
			_response=value (""+arr[1]);

			for (var i=1;i<len;i++) {
				tmp=header_arr[i];
				arr=StrSplit(tmp,":");

				var len2=length arr;
				if ((arr) && (len2)) {
					var header_var=ToLower(arr[0]);
					var remaining="";
					for (var j=1;j<len2;j++) {
						if (j!=1)
							remaining+=":"+arr[j];
						else
							remaining+=arr[j];
					}
					remaining=trim(remaining);
					switch (header_var) {
						case "location":
							_location=remaining;
							break;
						case "content-type":
							_content_type=remaining;
							break;
						case "content-length":
							_content_length=value ""+remaining;
							break;
					}
				}
			}
		}
	}

	public function Get(url, path="/") {
		data="";


		_content_length=0;
		go_fetch(url, path);
		DoHeader();

		//return data;
	}


	public function ValidateServer(string server_name) {
		Get(VALIDATION_SERVER,VALIDATION_FILE);
		if (!IsSuccessful())
			return false;

		data=StrReplace(data,"\r","");

		var arr=StrSplit(data,"\n");

		var len=length arr;

		server_name=ToUpper(trim(server_name));
		for (var i=0;i<len;i++) {
			if (ToUpper(trim(""+arr[i]))==server_name)
				return true;
		}
		return false;
	}

	public function GetAppList(server, username="") {
		var[] result;
		if (username)
			username="/"+username;

		Get(server+username,APP_LIST);

		if (!IsSuccessful())
			return result;

		data=StrReplace(data,"\r","");

		var arr=StrSplit(data,"\n");

		var len=length arr;

		for (var i=0;i<len;i++) {
			var elem=StrSplit(arr[i],":");

			var elem2=new [];
			elem2["name"]=elem[0];
			elem2["path"]=elem[1];
			elem2["desc"]=elem[2];
			elem2["host"]=server+username;
			result[elem2["name"]]=elem2;
		}
		return KeySorted(result);
		
	}
}


class Arc {
	static function DoDirectory(path) {
		var len=length path;
		if (len<2)
			return 0;
		len--;
		var base="";
		for (var i=0;i<len;i++) {
			base+=path[i]+"/";
			_mkdir(base);
		}
		return true;
	}

	static function GetFilenameFromFullPath(path) {
		var len=length path;
		var result="";
		for (var i=len-1;i>=0;i--) {
			if ((path[i]=='\\') || (path[i]=='/'))
				return result;
			result=path[i]+result;
		}
		return result;
	}

	static function UnZip(filename, var callback=null) {
		var zip=zip_open(filename,ZIP_CHECKCONS, var err);
		if (!zip)
			throw "Unzip failed with error code $err";

		var num_files=zip_get_num_files(zip);
		for (var i=0;i<num_files;i++) {
			var name=zip_get_name(zip, i, 0);
			var arr=StrSplit(name, "/");

			if (length arr>1) {
				Arc::DoDirectory(arr);
			} else {
				arr=StrSplit(name, "\\");
				if (length arr>1)
					Arc::DoDirectory(arr);
			}


			Arc::DoDirectory(arr);
			if (name) {
				var zf=zip_fopen_index(zip, i, 0);
				if (zf) {
					var data2="";
					var amount=zip_fread(zf, var buf, 8192*1024*2);
					if (amount>0)
						data2=buf;

					WriteFile(data2,name);
					zip_fclose(zf);

					var namel=ToLower(name);
					switch (namel) {
						case SQL_FILE_LIST:
						case CONSOLE_RUN:
						case CLIENT_RUN:
						case INFO_RUN:
						case URL_RUN:
								if (callback)
									callback(name, buf);
								break;
						default:
							if ((callback) && (preg(namel, "[A-Za-z0-9_\\.\\-\\ ]+\\.ss\$")))
								callback(Arc::GetFilenameFromFullPath(name), buf);
					}
				}

			}
		}

		zip_close(zip);
		return true;
	}
}
