import standard.lib.regex
import standard.lib.xslt2

include WebDocument.con
include Serializable.con

class HTMLContainer {
	public var LoggedIn=false;
	public var UID=-1;
	public var ScriptID="";
	public var Username="";
	public var PrevLink="";
	public var NextLink="";
	public var PageLink="";
	public var Page=0;
	public var TotalPages=0;
	public var PageSize=0;
	public var Criteria="";
	public var Sort="";
	public var Desc=false;
	public var Count=0;
	public var Format="";
	public var RelatedLevel=0;
	public var RelatedPage=0;
	public var RelatedPageSize=0;
	public var Response="";
	public var Redirect="";
	public var Template="";
	public var Caller="";
	public var IsChildOf="";
	public var NoHeader=0;
	public var Parent;
	public var Message="";
	public var Op="";
	public var LinkHint="";
	public var Key="";
	public var Title="";
	public var Settings="";

	public var CanAdd=0;
	public var CanModify=0;
	public var CanDelete=0;
	public var CanArchive=0;

	public var Data=null;
	public var SecondaryData="";

	public var QueryParameters="";

	public function HTMLContainer(template_name, parameters="") {
		this.Template=template_name;
		this.QueryParameters=parameters;
	}
}

class WebUtils {
	private var LoggedUser;
	private var Level;
	
	static function CheckMail(string mail) {
		var exp="^([A-Za-z0-9_.]+)@(.+)\\.(\\a+)\$";

		var arr=regex_match(mail,exp);
		return arr;
	}
	
	static function IsLoggedIn(var UID=null, var username=null, var full_name="", var level=0) {
		var lin=ToLower(SessionVar("logged_in"));
		UID=-1;
		username="";
		full_name="";
		level=0;
		if (lin=="true") {
			var sUID=SessionVar("UID");
			if (!sUID)
				return false;

			UID=value (""+sUID);
			// check if string UID
			if (sUID!=""+UID)
				UID=sUID;
			username=SessionVar("username");
			full_name=SessionVar("fullname");
			level=value (""+SessionVar("level"));
			return true;
		}
		return false;
	}

	static function NotifyLogin(var UID, string username, number remember_me=false, string full_name="", number level=0) {
		SetSessionVar("UID", ""+UID);
		SetSessionVar("username", username);
		SetSessionVar("logged_in", "true");
		SetSessionVar("fullname", full_name);
		SetSessionVar("level", ""+level);
		if (remember_me)
			SessionTimeout(0xFFFFFF);
		return true;
	}

	static function LogOut() {
		SetSessionVar("UID", "-1");
		SetSessionVar("username", "");
		SetSessionVar("logged_in", "false");
		SetSessionVar("level", "0");
		SetSessionVar("fullname", "");
		return true;
	}

	static function WebSafe(variable) {
		switch (typeof variable) {
			case "string":
				return variable;
			case "numeric":
				return ""+variable;
			case "array":
				return ""+variable[0];
		}
		return "";
	}

	static function AdjustArray(array arr) {
		var[] result;
		var len=length arr;
		// array must be of strings
		for (var i=0;i<len;i++) {
			var item=trim(""+arr[i]);
			if (item)
				result[item]=item;
		}
		return result;
	}

	static function GetFilters(number count, string filter_prefix="filter", string op_prefix="op", string val_prefix="val") {
		var index=1;
		var res=new [];
		for (var i=0;i<count;i++) {
			var filter=WebUtils::WebSafe(WebVar("$filter_prefix$index"));
			var op=WebUtils::WebSafe(WebVar("$op_prefix$index"));
			if (op) {
				op=ToLower(op);
				if (	(op!="=") && (op!="<>") && 
					(op!=">") && (op!=">=") && 
					(op!="<") && (op!="<=") && 
					(op!="like") && (op!="ilike")) {
					op="";
				}
			}
			//var val=WebUtils::WebSafe(WebVar("$val_prefix$index"));
			var val=WebVar("$val_prefix$index");
			if ((filter) && (op)) {
				res[length res]=[ToLower(filter), op, val];
			}
			index++;
		}
		return res;
	}

	static function XSLTProcess(var xmlStream, var xslStream, var parameters=null) {
		/*var argums = [
				"/_stylesheet", xslStream,
				"/_xmlinput", xmlStream,
				"/_output", null,
				null
		];
		var params;
		if (parameters)
			params=parameters;
		else
			params=new [];
			


		var returncode = SablotProcess("arg:/_stylesheet","arg:/_xmlinput","arg:/_output", params, argums, var resultStr);
		if (returncode != 0)
			throw SablotGetMsgText(returncode);
		*/

		if (parameters)
			var resultStr=XSLTProcess(xmlStream, xslStream, parameters);
		else
			resultStr=XSLTProcess(xmlStream, xslStream);

		var err=XSLTError();
		if (err)
			throw err;
		return resultStr;
	}
}