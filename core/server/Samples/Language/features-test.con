// Simple Dynamic List

class ConceptException {
	public var _NUMBER_DATA;
	public var _STRING_DATA;

	public function ConceptException(NUMBER_DATA,STRING_DATA) {
		this->_NUMBER_DATA=NUMBER_DATA;
		this->_STRING_DATA=STRING_DATA;
	}
}

class CListNode {
	public var _DATA;
	public var _NEXT_NODE;
}


class ArrayList {
	private var FIRST_NODE;
	private var LAST_NODE;
	private var COUNT;

	property Count { get FCount }

	public function ArrayList() {
		this->FIRST_NODE=0;
		this->COUNT=0;
	}

	public function Add(DATA) {
		var newNODE=new CListNode();

		newNODE->_DATA=DATA;
		newNODE->_NEXT_NODE=0;

		if (!this->COUNT)
			this->FIRST_NODE=newNODE;
		else
			this->LAST_NODE->_NEXT_NODE=newNODE;
		this->LAST_NODE=newNODE;
		this->COUNT++;
	}

	private function FCount() {
		return this->COUNT;
	}

	public function DeleteElementByIndex(INDEX) {
		if ((INDEX>=this->COUNT) || (INDEX<0))
			throw new ConceptException(1,"Invalid index.");

		var DATA;

		if (!INDEX) {
			DATA=this->FIRST_NODE->_DATA;
			var NODE=this->FIRST_NODE->_NEXT_NODE;
			delete this->FIRST_NODE;
			this->FIRST_NODE=NODE;
			return DATA;
		}

		var currentNODE=this->FIRST_NODE;
		var precNODE;
		for (var i=0;i<INDEX;i++) {
			precNODE=currentNODE;
			currentNODE=currentNODE->_NEXT_NODE;
		}
		precNODE->_NEXT_NODE=currentNODE->_NEXT_NODE;

		if (INDEX==this->COUNT)
			this->LAST_NODE=precNODE;

		DATA=currentNODE->_DATA;
		delete currentNODE;
		this->COUNT--;

		return DATA;
	}

	public function GetElementByIndex(INDEX) {
		if ((INDEX>=this->COUNT) || (INDEX<0))
			throw new ConceptException(1,"Invalid index.");

		var currentNODE=this->FIRST_NODE;
		for (var i=0;i<INDEX;i++) 
			currentNODE=currentNODE->_NEXT_NODE;
		return currentNODE->_DATA;
	}

	operator [](INDEX) {
		return this->GetElementByIndex(INDEX);
	}
}

class Integer {
	var VALUE;

	property PropertyTest { set SetValue, get GetValue }

	event OnClick trigers FOnClick;
	event OnDbClick trigers FOnDbClick;

	function FOnClick() {
		echo "Just click it !";
	}

	function Integer() {
		this->VALUE=0;
	}

	function GetValue() {
		return this->VALUE;
	}

	function SetValue(VALUE) {
		this->VALUE=VALUE;
	}

	operator + (VALUE) {
		return this->VALUE+VALUE;
	}

	operator += (VALUE) {
		return this->VALUE+=VALUE;
	}

	operator < (value) {
		return this->VALUE < value;
	}

	operator ! () {
		return !this->VALUE;
	}

	operator ++ () {
		return this->VALUE++;
	}
	
	function none() {
		//return 1;
	}

}

class Main {
	function Main() {
		var int;
		int=new Integer();
		var int2=int;
		int2->OnClick();
		int2->OnDbClick();

		int2->PropertyTest=10;
		int2->PropertyTest+=10;
		echo int2->PropertyTest;

		/*while (int<1175000) {
			int+=1;
		}*/

		/*while (var a<1000000) {
			int->none();
			a++;
		}*/

		
		//while (var a++<11750000);

		/*echo int2->GetValue();

		var array=new ArrayList();

		if (typeof array=="class")
			echo "\narray's class : " + classof array + "\n";

		try {
			for (var j=0;j<1000;j++) 
				array->Add(j);

			j=0;
			while (++j<array->Count) {
				if (j%2)
					array->DeleteElementByIndex(j);
			}

			for (var i=0;i<array->Count;i++)
				echo "Element " + i + " " + array[i] +"\n";

		} catch (var Exception) {
			echo Exception->_STRING_DATA;	
		}
		delete array;*/
	}
}