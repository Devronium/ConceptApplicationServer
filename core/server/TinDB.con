#!/usr/local/bin/concept
include Worker.con
include TinBase.con
include TCPSocket.con
include UNIXSocket.con
import standard.lib.cripto
import standard.math.rand
import standard.lang.cli
import standard.C.time

define READ_BUFFER	0xFFFF

// 256M packet
define MAX_OP_SIZE	0xFFFFFFF

define ERR_DB		-1
define ERR_DB_S		"Invalid db"
define ERR_COLLECTION	-2
define ERR_COLLECTION_S	"Invalid collection"
define ERR_INTERNAL	-3
define ERR_IO		-4
define ERR_IO_S		"Server I/O error"
define ERR_LOGIN	-5
define ERR_LOGIN_S	"Login required"
define ERR_USER_PASS	-6
define ERR_USER_PASS_S	"Invalid username or password"
define ERR_IN_CODE	-7
define ERR_NO_MEMBER_S	"No such function"
define ERR_CODE_RIGHTS	-8
define ERR_CODE_RIGHTS_S"Server code is disabled for this user"
define ERR_NOT_UNIQUE	-9
define ERR_NOT_UNIQUE_S	"Not unique"
define ERR_AGGREGATION	-10
define ERR_AGGREGATION_S"Invalid aggregation"


define BUSY_FSYNC_LIMIT	 10000

class Triggers {
	var OnDelete;
	var OnInsert;
	var OnUpdate;
}

class SocketIOBase {
	Send(socket) {
		var to_send = BinarizeObject(this);
		to_send = ToSize(length to_send) + to_send;
		var offset = 0;
		do {
			var res = SocketWrite(socket, to_send, false, "", 0, false, offset);
			if (res <= 0)
				return res;
			offset += res;
		} while (offset < length to_send);
		return offset;
	}
}

class Q {
pragma used
	var q = "";
	var o = "Q";
	var d = "";
	var c = "";
	var f = null;

	var[] p;
	var[] x;

	var r;
	var worker;
	var socket;
	var ctx_key;
	var aindex;
	var origp;
	var data;
	var child;
	var child_data;
}


class R extends SocketIOBase {
pragma used
	var id = -1;
	var q = "";
	var e = false;
	var et = "";
	var[] p;
}

class ConnectionContext {
	var buffer = "";
	var challenge = "";
	var auth = false;
	var code = true;
	var key;

	ConnectionContext() {
		key = RandomInteger(1, 0xFFFFFFF);
	}
}

class QueryWorker {
pragma used
	var[] sockets;
	var[] buffers;
	var WorkerID;

	RemoveSocket(sock) {
		var res = new [];
		var buffers = this.buffers;
		var buf = new [];
		var sockets = this.sockets;
		var keys = GetKeys(buffers);
		var sock_key = "" + sock;
		for (var i = 0; i < length sockets; i++) {
			var s = sockets[i];
			if ((s) && (s != sock))
				res[length res] = s;
			var k = keys[i];
			if ((k) && (k != sock_key))
				buf[k] = buffers[k];
		}
		SocketClose(sock);
		this.sockets = res;
		this.buffers = buf;
	}

	RandomString(len) {
		var res="";
		while (length res<len) {
			var c = RandomInteger(33, 126);
			if ((c != '\r') && (c != '\n') && (c != ';'))
				res += chr(c);
		}
		return res;
	}

	Dispatch(ctx, sock, t, var next_worker, var next_a_worker, var next_idle_worker, storage_dbs, storage_workers, aggregation_workers, idle_workers, obj, current_worker, var buf) {
		var priority = 0;
		if (obj.x)
			priority = obj.x["priority"];

		switch (obj.o) {
			case "H":
				if (!ctx.code) {
					var r = new R();
					r.q = obj.q;
					r.e = ERR_CODE_RIGHTS;
					r.et = ERR_CODE_RIGHTS_S;
					r.Send(sock);
					break;
				}
			case "A":
			case "Q":
			case "S":
			case "I":
			case "D":
			case "X":
			case "Y":
			case ".":
			case "*":
			case "R":
			case "L":
			case "W":
				if ((!ctx) || (ctx.auth)) {
					if (typeof obj.c != "string")
						obj.c = "";
					if ((!obj.d) || (typeof obj.d != "string") || (Pos(obj.d, "/") > 0) || (Pos(obj.d, "\\") > 0)) {
						r = new R();
						r.e = ERR_DB;
						r.et = ERR_DB_S;
						r.Send(sock);
					} else
					if ((obj.c) && ((Pos(obj.c, "/") > 0) || (Pos(obj.c, "\\") > 0))) {
						r = new R();
						r.e = ERR_DB;
						r.et = ERR_DB_S;
						r.Send(sock);
					} else {
						var storage;
						var ctx_key = obj.ctx_key;
						if (!ctx_key) {
							ctx_key = ctx.key;
							obj.ctx_key = ctx.key;
						}
						if (obj.o == "W") {
							storage = obj.worker;
							if (!storage) {
								storage = aggregation_workers[next_a_worker++];
								if (next_a_worker >= length aggregation_workers)
									next_a_worker = 0;
							}
							if (obj.socket <= 0)
								obj.socket = sock;
							if (!obj.r)
								obj.r = new R();
						} else
						if (priority < 0) {
							// idle priority
							storage = idle_workers[next_idle_worker++];
							if (next_idle_worker >= length idle_workers)
								next_idle_worker = 0;
						} else {
							var storage_key = "" + obj.d + "/" + obj.c;
							storage = storage_dbs[storage_key];
							if (!storage) {
								storage = storage_workers[next_worker++];
								if (next_worker >= length storage_workers)
									next_worker = 0;
								storage_dbs[storage_key] = storage;
							}
						}
						AddWorkerData(storage, BinarizeObject([sock, obj, current_worker, ctx_key]), priority);
					}
				} else {
					r = new R();
					r.q = obj.q;
					if (ctx.challenge) {
						if (obj.o == "A") {
							var username = obj.p["u"];
							var digest = obj.p["d"];
							var db = obj.p["db"];
							try {
								t.Lock();
								var user = t.Query(["username" => username])[0];
								t.Unlock();
								if (user) {
									var d2 = sha256(username + ":" + ctx.challenge + ":" + user["password"]);
									var user_db = user["db"];
									var db_valid = false;
									if (user_db) {
										if (typeof user_db == "array") {
											for (var db_i = 0; db_i < length user_db; db_i++) {
												var u_db = user_db[db_i];
												if ((u_db) && (typeof u_db == "string") && (u_db == user_db)) {
													db_valid = true;
													break;
												}
											}
										} else
										if (user_db == db)
											db_valid = true;
									} else
										db_valid = true;
									if ((user) && (d2 == digest) && (db_valid)) {
										ctx.auth = true;
										if (IsSet(user, "code"))
											ctx.code = (user["code"] == 1);
										r.id = 0;
										r.p["ok"] = true;
										r.Send(sock);
									}
								}
							} catch (var exc) {
								echo "Exception: $exc\n";
							}
						}
						if (!ctx.auth) {
							r.e = ERR_USER_PASS;
							r.et = ERR_USER_PASS_S;
							r.Send(sock);
							RemoveSocket(sock);
							buf = "";
						}
					} else {
						ctx.challenge = RandomString(48);
						r.e = ERR_LOGIN;
						r.et = ERR_LOGIN_S;
						r.p["c"] = ctx.challenge;
						r.p["m"] = "sha256";
						r.Send(sock);
					}
				}
				break;
		}
	}

	QueryWorker(n) {
		n = UnBinarizeObject(n);
		WorkerID = n[0];
		var storage_workers = n[1];
		var idle_workers =  n[2];
		var[] storage_dbs;
		var next_worker = 0;
		var next_a_worker = 0;
		var next_idle_worker = 0;

		var AccessDB = new TinBase("sys");
		AccessDB.Mode = "rb";
		var t = AccessDB["users"];
		t.Open();
		var current_worker = CurrentWorker();

		while (!Worker::Pending(var aggregation_data))
			Sleep(5);

		var aggregation_workers = UnBinarizeObject(aggregation_data);
		while (true) {
			var data = "";
			if (Worker::Pending(data)) {
				var job = UnBinarizeObject(data);
				var socket = job[0];
				var remote_obj = job[1];
				if (socket > 0) {
					var post_key = job[1];
					if (post_key) {
						var sock_key = "" + socket;
						if (IsSet(buffers, sock_key)) {
							var post_back_ctx = buffers[sock_key];
							if ((post_back_ctx) && (post_back_ctx.key == post_key)) {
								var post_back_r = job[2];
								post_back_r.Send(socket);
								delete post_back_r;
								delete job;
							}
						}
					} else {
						sockets[length sockets] = socket;
						buffers["" + socket] = new ConnectionContext();
					}
				} else
				if (remote_obj) {
					if ((remote_obj) && (classof remote_obj == "Q") && (remote_obj.o) && ((remote_obj.o == "W") || (remote_obj.o == "Q")))
						Dispatch(null, -1, null, next_worker, next_a_worker, next_idle_worker, storage_dbs, storage_workers, aggregation_workers, idle_workers, remote_obj, current_worker, "");
				}
			}
			if ((SocketPoll(sockets, var outsockets, 0)) && (outsockets)) {
				for (var i = 0; i < length outsockets; i++) {
					var sock = outsockets[i];
					var buffer = "";
					var buf2 = "";
					var obj = null;
					var res = SocketRead(sock, buffer, READ_BUFFER);
					if (res > 0) {
						var ctx = buffers["" + sock];
						var buf = ctx.buffer + buffer;
						// deserialize
						while (buf) {
							var to_read = FromSize(buf, var bytes);
							if (to_read <= MAX_OP_SIZE) {
								if ((to_read > 0) && (to_read <= length buf - bytes)) {
									buf2 = SubStr(buf, bytes, to_read);
									buf = SubStr(buf, to_read + bytes);
									obj = UnBinarizeObject(buf2);
 									if ((obj) && (classof obj == "Q") && (obj.o))
										Dispatch(ctx, sock, t, next_worker, next_a_worker, next_idle_worker, storage_dbs, storage_workers, aggregation_workers, idle_workers, obj, current_worker, buf);
								} else {
									ctx.buffer = buf;
									break;
								}
								ctx.buffer = buf;
							} else {
								// drop socket ... packet to large
								RemoveSocket(sock);
								break;
							}
						}
					} else
						RemoveSocket(sock);
				}
				continue;
			}
			if (sockets) {
				Sleep(2);
			} else
				Sleep(5);
		}
	}
}

class StorageWorker {
pragma used
	var[] managed_dbs;
	var[] objects;
	var[] members;
	var[] _triggers;
	var non_flushed_writes = 0;

	GetDelegate(dbobject, db, name, var objects, var members, r = null) {
		var arr = StrSplit(name, ".");
		var member;
		if (length arr == 2) {
			var classname = arr[0];
			var mname = arr[1];
			var key = "$db.$classname";		
			var key_mname = "$key.$mname";
			member = members[key_mname];
			if (!member) {
				var handler = objects[key];
				if (!handler) {
					handler = CreateObject2(classname, dbobject);
					if (handler)
						objects[key] = handler;
				}
				if (handler) {
					if (!GetMember(handler, mname, member, true))
						member = null;
				}
			}

			if ((r) && (!member)) {
				r.e = ERR_IN_CODE;
				r.et = ERR_NO_MEMBER_S;
			}
		}
		return member;
	}

	Flush(flush_index = true) {
		non_flushed_writes = 0;
		for (var i = 0; i < length managed_dbs; i++) {
			var db = managed_dbs[i];
			if (db) {
				try {
					db.Flush(flush_index);
				} catch (var exc) {
					echo "Flush error: $exc\n";
				}
			}
		}
	}

	Execute(var data) {
		var key;
		var trigger;

		data = UnBinarizeObject(data);
		var socket = data[0];
		var obj = data[1];
		var target_worker = data[2];
		var target_key = data[3];
		var r = new R();
		if (obj)
			r.q = obj.q;

		if ((obj) && (obj.d)) {
			try {
				var db = managed_dbs[obj.d];
				if (!db) {
					if ((Pos(obj.d, "/") > 0) || (Pos(obj.d, "\\") > 0))
						throw "DB name error";
					db = new TinBase(obj.d);
					managed_dbs[obj.d] = db;
					var code = db.ReadHandler();
					if (code) {
						var load_err = IncludeCode(code);
						if (load_err) {
							echo "Stored handler loading error:\n$load_err\n";
							load_err = "";
						}
						code = "";
						var t2 = db.ReadTriggers();
						if (typeof t2 == "array")
							_triggers = t2;
					}
				}
				if ((obj.c) && ((Pos(obj.c, "/") > 0) || (Pos(obj.c, "\\") > 0)))
					throw "Collection name error";

				var multi_insert = false;
				switch (obj.o) {
					case "Q":
						var t = db[obj.c];
						if (t) {
							if ((obj.f) && (typeof obj.f != "array"))
								obj.f = null;
							if (typeof obj.p != "array")
								obj.p = [ ];
							t.Lock();
							r.p = t.Query(obj.p, obj.f, obj.x["descending"], obj.x["start"], obj.x["len"]);
							t.Unlock();
							r.id = 0;
						}
						break;
					case "D":
						t = db[obj.c];
						if (t) {
							if ((obj.f) && (typeof obj.f != "array"))
								obj.f = null;
							if (typeof obj.p != "array")
								obj.p = [ ];
							t.Lock();
							var items = t.Query(obj.p, obj.f, obj.x["descending"], obj.x["start"], obj.x["len"]);
							t.Unlock();
							if (items) {
								t.Delete(items);
								non_flushed_writes += length items;
								obj.p = items;
								trigger = _triggers["${obj.d}.${obj.c}"];
								if ((trigger) && (trigger.OnDelete)) {
									var deleg = this.GetDelegate(db, obj.d, trigger.OnDelete, objects, members);
									if (deleg) {
										try {
											r.p['$trigger'] = deleg(t, items);
										} catch (var deleg_exception) {
											echo "Uncaught delegate exception: $deleg_exception\n";
										}
									}
								}
							}
							r.p['$count'] = length items;
							t.Flush();
						}
						break;
					case "I":
						if ((obj.c) && (typeof obj.p == "array")) {
							t = db[obj.c];
							if (obj.x["multi"])
								multi_insert = true;
							var id = -1;
							if (t) {
								var unique_fields = obj.x["unique"];
								trigger = _triggers["${obj.d}.${obj.c}"];
								t.Lock(true);
								if (multi_insert) {
									id = new [];
									for (var i = 0; i < length obj.p; i++) {
										var o = obj.p[i];
										if (typeof o == "array") {
											if ((unique_fields) && (!t.IsUnique(o, unique_fields))) {
												r.e = ERR_NOT_UNIQUE;
												r.et = ERR_NOT_UNIQUE_S;
												break;
											}
											try {
												var id2 = t.Store(obj.p[i]);
											} catch (var store_exc) {
												echo "Store error: $store_exc\n";
											}
											non_flushed_writes++;
											id[length id] = id2;
											o['$'] = id2;
											if ((trigger) && (trigger.OnInsert)) {
												deleg = this.GetDelegate(db, obj.d, trigger.OnInsert, objects, members);
												if (deleg) {
													try {
														deleg(t, o);
													} catch (deleg_exception) {
														echo "Uncaught delegate exception: $deleg_exception\n";
													}
												}
											}
										}
									}
									r.id = id;
								} else {
									if ((unique_fields) && (!t.IsUnique(obj.p, unique_fields))) {
										r.e = ERR_NOT_UNIQUE;
										r.et = ERR_NOT_UNIQUE_S;
									} else
									if ((IsSet(obj.p, '$')) && (obj.p['$'] > 0)) {
										id = value obj.p['$'];
										if (!t.Update(obj.p, id, true, var old_bin, var new_bin))
											id = -1;
										else
										if (old_bin) {
											old_bin['$'] = id;
											obj.p = [old_bin, new_bin, obj.p];
											obj.o = "U";
											//obj.o = "I";
											//obj.p = new_bin;
											//do_index = true;
										}
										non_flushed_writes++;
										if ((trigger) && (trigger.OnUpdate)) {
											deleg = this.GetDelegate(db, obj.d, trigger.OnUpdate, objects, members);
											if (deleg) {
												try {
													r.p['$trigger'] = deleg(t, obj.p);
												} catch (deleg_exception) {
													echo "Uncaught delegate exception: $deleg_exception\n";
												}
											}
										}
									} else {
										id = t.Store(obj.p);
										non_flushed_writes++;
										if ((trigger) && (trigger.OnInsert)) {
											deleg = this.GetDelegate(db, obj.d, trigger.OnInsert, objects, members);
											if (deleg) {
												try {
													r.p['$trigger'] = deleg(t, obj.p);
												} catch (deleg_exception) {
													echo "Uncaught delegate exception: $deleg_exception\n";
												}
											}
										}
									}
									r.id = id;
									if (id > 0)
										obj.p['$'] = id;
								}
								t.Unlock();
								// t.Flush();
							} else {
								r.e = ERR_IO;
								r.et = ERR_IO_S;
							}
						} else {
							r.e = ERR_COLLECTION;
							r.et = ERR_COLLECTION_S;
						}
						break;
					case "X":
						r.id = 0;
						t = db[obj.c];
						if ((obj.p) && (typeof obj.p == "array")) {
							t.Lock();
							t.EnsureIndexes(obj.p);
							t.Unlock();
							non_flushed_writes++;
						}
						break;
					case "Y":
						r.id = 0;
						t = db[obj.c];
						if (typeof obj.p == "array") {
							var lang = "en";
							if ((obj.x) && (obj.x["lang"]))
								lang = obj.x["lang"];
							echo "Full text index requested (building index) ...\n";
							var start_time = microseconds();
							t.Lock();
							t.EnsureFullTextIndex(obj.p, lang);
							t.Unlock();
							var end_time = microseconds() - start_time;
							echo "Full text index created in ${end_time/1000}ms\n";
							non_flushed_writes++;
						}
						break;
					case "S":
						t = db[obj.c];
						if (t) {
							if ((obj.f) && (typeof obj.f != "array"))
								obj.f = null;
							var searchstring = "";
							if (typeof obj.p == "array")
								searchstring = obj.p[0];
							r.p = t.Search(searchstring, obj.f, obj.x["start"], obj.x["len"]);
							r.id = 0;
						}
						break;
					case "H":
						var remove = obj.p["remove"];
						code = obj.p["code"];
						if (remove) {
							if (typeof remove != "array") {
								RemoveClass(remove);
							} else {
								for (i = 0; i < length remove; i++)
									RemoveClass(remove[i]);
							}
							objects = new [];
							members = new [];
						}
						if (code) {
							var err = IncludeCode(code);
							if (err) {
								r.e = ERR_IN_CODE;
								r.et = err;
							} else {
								db.StoreHandler(code);
							}
						}
						break;
					case ".":
						code = obj.p["code"];
						var member = null;
						if (code) {
							var arr = StrSplit(code, ".");
							if (length arr == 2) {
								var classname = arr[0];
								var mname = arr[1];
								key = "${obj.d}.$classname";
								var key_mname = "$key.$mname";
								member = members[key_mname];
								if (!member) {
									var handler = objects[key];
									if (!handler) {
										handler = CreateObject2(classname, db);
										if (handler)
											objects[key] = handler;
									}
									if (handler) {
										if (!GetMember(handler, mname, member, true))
											member = null;
									}
								}
								if (member) {
									var parameters = obj.p["params"];
									try {
										if (parameters)
											r.p = member(parameters);
										else
											r.p = member();
									} catch (deleg_exception) {
										echo "Uncaught delegate exception: $deleg_exception\n";
									}
								} else {
									r.e = ERR_IN_CODE;
									r.et = ERR_NO_MEMBER_S;
								}
							}
						}
						break;
					case "*":
						if ((obj.c) && (typeof obj.p == "array")) {
							key = "${obj.d}.${obj.c}";
							trigger = _triggers[key];
							if (!trigger) {
								trigger = new Triggers();
								_triggers[key] = trigger;
							}
							// insert
							// update
							// delete
							if (IsSet(obj.p, "insert")) {
								trigger.OnInsert = obj.p["insert"];
								if (!this.GetDelegate(db, obj.d, trigger.OnInsert, objects, members, r)) {
									trigger.OnInsert = null;
									break;
								}
							}
							if (IsSet(obj.p, "update")) {
								trigger.OnUpdate = obj.p["update"];
								if (!this.GetDelegate(db, obj.d, trigger.OnUpdate, objects, members, r)) {
									trigger.OnUpdate = null;
									break;
								}
							}
							if (IsSet(obj.p, "delete")) {
								trigger.OnDelete = obj.p["delete"];
								if (!this.GetDelegate(db, obj.d, trigger.OnDelete, objects, members, r)) {
									trigger.OnDelete = null;
									break;
								}
							}
							db.StoreTriggers(_triggers);
						} else {
							r.e = ERR_COLLECTION;
							r.et = ERR_COLLECTION_S;
						}
						break;
					case "R":
						if (obj.c) {
							t = db[obj.c];
							if (t) {
								try {
									t.Drop();
									db.Reset();
								} catch (var exc_drop) {
									echo "Remove error: $exc_drop\n";
									r.e = ERR_COLLECTION;
									r.et = ERR_COLLECTION_S;
								}
							}
						} else {
							r.e = ERR_COLLECTION;
							r.et = ERR_COLLECTION_S;
						}
						break;
					case "L":
						if ((obj.c) && (typeof obj.p == "array")) {
							t = db[obj.c];
							var hash = "sha256";
							var username = "username";
							var field = "password";
							var challenge = "";
							var sum = "";
							if (obj.x["f"])
								hash = ToLower("" + obj.x["f"]);

							if (obj.x["pass_field"])
								field = obj.x["pass_field"];

							if (obj.x["user_field"])
								username = obj.x["user_field"];

							if (obj.x["challenge"])
								challenge = obj.x["challenge"];

							if (obj.x["hash"])
								sum = obj.x["hash"];

							if ((t) && (field) && (username)) {
								if (obj.f) {
									obj.f[username] = username;
									obj.f[field] = field;
								}
								t.Lock();
								var user_arr = t.Query(obj.p, obj.f, false, 0, 1);
								t.Unlock();
								var user = null;
								if (user_arr)
									user = user_arr[0];
								if (user) {
									var d2 = "";
									switch (hash) {
										case "sha256":
											d2 = sha256(user[username] + ":" + challenge + ":" + user[field]);
											break;
										case "sha1":
											d2 = sha1(user[username] + ":" + challenge + ":" + user[field]);
											break;
										case "":
											d2 = user[field];
											break;
									}
									if (d2 == sum) {
										user[field] = "";
										r.p = user;
									} else {
										r.e = ERR_USER_PASS;
										r.et = ERR_USER_PASS_S;
									}
								} else {
									r.e = ERR_USER_PASS;
									r.et = ERR_USER_PASS_S;
								}
							} else {
								r.e = ERR_IO;
								r.et = ERR_IO_S;
							}
						} else {
							r.e = ERR_COLLECTION;
							r.et = ERR_COLLECTION_S;
						}
						break;
				}
			} catch (var exc) {
				r.e = ERR_COLLECTION;
				r.et = exc;
			}
		} else {
			r.e = ERR_DB;
			r.et = ERR_DB_S;
		}
		var priority = 0;
		if ((obj) && (obj.x))
			priority = obj.x["priority"];

		if ((!obj) || (!obj.x) || (!IsSet(obj.x, 'silent')) || (!obj.x['silent'])) {
			if (obj.worker) {
				obj.r = r;
				AddWorkerData(obj.worker, BinarizeObject([socket, obj, 0, target_key]), priority);
			} else
			if ((target_worker) && (target_key))
				AddWorkerData(target_worker, BinarizeObject([socket, target_key, r]), priority);
			else
				r.Send(socket);
		}
	}

	StorageWorker(n) {
		while (true) {
			var data = "";
			while (Worker::Pending(data)) {
				try {
					Execute(data);
				} catch (var exc) {
					echo "Storage worker exception: $exc\n";
				}
				data = "";
				if (non_flushed_writes > BUSY_FSYNC_LIMIT)
					this.Flush();
			}
			if (non_flushed_writes)
				this.Flush();
			Sleep(5);
		}
	}
}

class QueryAggregator {
	var QueryWorkers;
	var QueryWorkerIndex = 0;

	PopulateValues(arr, key) {
		var[] values;
		if ((arr) && (key)) {
			var[] keys;
			for (var i = 0; i < length arr; i++) {
				var e = arr[i];
				if ((e) && (IsSet(e, key))) {
					var v = e[key];
					if (typeof v == "string")
						keys[v] = v;
					else
					if (typeof v == "numeric") {
						v = "" + v;
						keys[v] = v;
					}
				}
			}
			for (i = 0; i < length keys; i++)
				values[i] = keys[i];
		}	
		return values;
	}

	Pairs(elements, pairs) {
		var[] pairs_tree;
		var keys = GetKeys(pairs);
		var[] tree_counts;
		for (var i = 0; i < length elements; i++) {
			var e = elements[i];
			if (e) {
				for (var j = 0; j < length keys; j++) {
					var k = keys[j];
					if (k) {
						var sorted_pairs = pairs_tree[k];
						var counts;
						if (sorted_pairs) {
							counts = tree_counts[k];
						} else {
							sorted_pairs = new [];
							pairs_tree[k] = sorted_pairs;
							counts = new [];
							tree_counts[k] = counts;
						}
						var equiv = pairs[k];
						if ((equiv) && (IsSet(e, equiv))) {
							var v = e[equiv];
							if ((typeof v == "string") || (typeof v == "numeric")) {
								v = "" + v;
								var count = counts[v];
								if (!count) {
									sorted_pairs[v] = e;
								} else
								if (count == 1) {
									sorted_pairs[v] = [sorted_pairs[v], e];
								} else {
									var arr = sorted_pairs[v];
									var key = e['$'];
									if (key)
										arr[key] = e;
									else
										arr[length arr] = e;
								}
								count++;
								counts[v] = count;
							}
						}
					}
				}
			}
		}
		return pairs_tree;
	}

	Filter(e, pairs, keys) {
		for (var i = 0; i < length keys; i++) {
			var k = keys[i];
			if ((k) && (IsSet(e, k))) {
				var v = e[k];	
				if ((typeof v == "string") || (typeof v == "numeric")) {
					v = "" + v;
					var arr = pairs[k];
					if (IsSet(arr, v)) {
						var tmp_key = '$' + k;
						while (e[tmp_key])
							tmp_key = '$' + tmp_key;
						e[tmp_key] = arr[v];
					}
				}
			}
		}
	}

	Execute(var data, recursive_count = 0) {
		var q = UnBinarizeObject(data);
		var obj;
		if (q)
			obj = q[1];
		var priority = 0;
		if (obj) {
			if (obj.x)
				priority = obj.x["priority"];

			var worker = QueryWorkers[QueryWorkerIndex++];
			if (QueryWorkerIndex >= length QueryWorkers)
				QueryWorkerIndex = 0;
			var data_ready = false;
			if (typeof obj.p == "array") {
				var new_obj = new Q;
				new_obj.o = "Q";
				new_obj.q = obj.q;
				new_obj.d = obj.d;
				new_obj.c = obj.c;

				new_obj.socket = obj.socket;
				new_obj.worker = CurrentWorker();
				new_obj.ctx_key = obj.ctx_key;
				if (obj.o == "W") {
					new_obj.origp = obj.p;
					new_obj.aindex = 0;
					new_obj.p = obj.p[0];
					new_obj.x = obj.x;
				} else
				if ((obj.r) && (obj.origp)) {
					var p;
					if (obj.child) {
						p = obj.child;
						new_obj.aindex = obj.aindex;
					} else {
						new_obj.aindex = obj.aindex + 1;
						p = obj.origp[new_obj.aindex];
					}

					var qdata;
					var ref_data;
					if (!obj.aindex)
						qdata = obj.r.p;
					else
					if ((obj.data) || (obj.child_data)) {
						qdata = obj.data[0];

						if (obj.child_data) {
							ref_data = obj.child_data[0];
							var pairs = Pairs(obj.r.p, obj.child_data[1]);
 						} else {
							ref_data = qdata;
							pairs = Pairs(obj.r.p, obj.data[1]);
						}

						if ((ref_data) && (pairs)) {

							var pair_keys = GetKeys(pairs);
							for (var i = 0; i < length ref_data; i++) {
								var e = ref_data[i];
								if (e)
									Filter(e, pairs, pair_keys);
							}
						}
					} else
						qdata = new [];

					if (p) {
						var keys = GetKeys(p);
						var k1 = keys[0];
						var k2 = keys[1];
						var has_query = true;
						var translate;
						var child_query = null;
						if ((length p == 3) && (typeof p[2] == "array"))
							child_query = p[2];
						if ((child_query) && (obj.r.p))
							new_obj.child = child_query;

						if ((!k1) && (!k2) && (length p >= 2) && (p[0]) && (typeof p[0] == "string")) {
							k1 = p[0];
							translate = p[1];
							has_query = false;
						}

						if (((length p != 2) && (length p != 3)) || ((!k1) && (!k2)) || ((k1 != '$') && (k2 != '$'))) {
							obj.r = new R();
							obj.r.e = ERR_AGGREGATION;
							obj.r.et = ERR_AGGREGATION_S;
							data_ready = true;
						} else {
							if (k1 == '$') {
								new_obj.c = k2;
								if (has_query) {
									new_obj.p = p[1];
									translate = p[0];
								}
							} else {
								new_obj.c = k1;
								if (has_query) {
									new_obj.p = p[0];
									translate = p[1];
								}
							}
							if (!new_obj.p)
								new_obj.p = new [];
							var translate_clean = new [];
							if (obj.child)
								ref_data = obj.r.p;
							else
								ref_data = qdata;
							if (translate) {
								keys = GetKeys(translate);
								for (i = 0; i < length keys; i++) {
									var k = keys[i];
									if (k) {
										var equivalent_k = translate[equivalent_k];
										if (equivalent_k) {
											var v = PopulateValues(ref_data, k);
											if (v) {
												new_obj.p[equivalent_k] = v;
												translate_clean[k] = equivalent_k;
											}
										}
									}
								}
							}
							if (qdata) {
								new_obj.origp = obj.origp;
								new_obj.data = [qdata, translate_clean];
								if (obj.child)
									new_obj.child_data = [obj.r.p, translate_clean];
							} else
								data_ready = true;
						}
					} else
						data_ready = true;
				} else
					data_ready = true;

				if (!data_ready)
					AddWorkerData(worker, BinarizeObject([-1, new_obj]), priority);
			} else
				data_ready = true;

			if (data_ready) {
				if (!obj.r) {
					obj.r = new R();
					obj.q = obj.q;
				}
				if (obj.data)
					obj.r.p = obj.data[0];
				obj.r.Send(obj.socket);
			}
		}
	}

	QueryAggregator(n) {
		n = UnBinarizeObject(n);
		QueryWorkers = n[1];
		var data = "";
		while (true) {
			while (Worker::Pending(data)) {
				try {
					Execute(data);
				} catch (var exc) {
					echo "Storage worker exception: $exc\n";
				}
				data = "";
			}
			Sleep(5);
		}
	}
}


class TinDB {
	protected var[] QueryWorkers;
	protected var WorkerIndex = 0;
	protected var Socket;
	protected var[] StorageWorkers;
	protected var[] IDLEWorkers;
	protected var[] AggregatorWorkers;

	Rotate(array, right) {
		if ((right <= 0) || (!array) || (length array == 1))
			return array;

		right = length array % right;
		if (!right)
			return array;

		var[] new_arr;
		for (var i = right; i < length array; i++)
			new_arr[length new_arr] = array[i];
		for (i = 0; i < right; i++)
			new_arr[length new_arr] = array[i];
		return new_arr;
	}

	TinDB(workers = 4, storage_workers = 4, idle_workers = 1, aggregator_workers = 2) {
		RandomSeed(unpack("u32", CryptoRandom(4))[0]);
		var[] sworkers;
		var[] qworkers;
		var[] aworkers;
		var[] idleworkers;
		for (var i = 0; i < storage_workers; i++) {
			StorageWorkers[i] = new Worker("StorageWorker", "");
			var w_obj = StorageWorkers[i]._workerobj;
			sworkers[length sworkers] = w_obj;
			Sleep(100);
		}
		for (i = 0; i < idle_workers; i++) {
			IDLEWorkers[i] = new Worker("StorageWorker", "");
			var idle_obj = IDLEWorkers[i]._workerobj;
			idleworkers[length idleworkers] = idle_obj;
			Sleep(100);
		}
		for (i = 0; i < workers; i++) {
			QueryWorkers[i] = new Worker("QueryWorker", BinarizeObject(["QW${i+1}", Rotate(sworkers, i), Rotate(idleworkers, i)]));
			var q_obj = QueryWorkers[i]._workerobj;
			qworkers[length qworkers] = q_obj;
			Sleep(100);
		}
		for (i = 0; i < aggregator_workers; i++) {
			AggregatorWorkers[i] = new Worker("QueryAggregator", BinarizeObject(["QAW${i+1}", Rotate(qworkers, i)]));
			var a_obj = AggregatorWorkers[i]._workerobj;
			aworkers[length aworkers] = a_obj;
			Sleep(100);
		}

		for (i = 0; i < length QueryWorkers; i++)
			AddWorkerData(QueryWorkers[i]._workerobj, BinarizeObject(Rotate(aworkers, i)));
	}

	InitializeDatabases() {
		var AccessDB = new TinBase("sys");
		var t = AccessDB["users"];
		t.Lock(true);
		if (!t.EnsureIndex("username"))
			t.Store(["username" => "sysdbadministrator", "password" => sha256("sysdbadministrator"), "db" => ""]);
		t.Unlock(true);
	}

	Start(port = 2668, max_connections = 1024, working_directory = "", interface = "") {
		if (working_directory)
			_chdir(working_directory);
		Socket = new TCPSocket();
		if (Socket.Listen(port, max_connections, interface))
			throw "Error initializing TinDB server (port ${port} already in use)";
		this.InitializeDatabases();
		while (true) {
			var sock = Socket.Accept(true);
			if (sock > 0) {
				var info = SocketInfo(sock);
				var addr = info["address"];
				if ((addr) && ((addr == "127.0.0.1") || (addr == "::1"))) {
					QueryWorkers[WorkerIndex++].AddData(BinarizeObject([sock]));
					if (WorkerIndex >= length QueryWorkers)
						WorkerIndex = 0;
				} else {
					SocketClose(sock);
				}
			}
		}
	}
}

class Main {
	RealPath(path) {
		var res = "";
		path = StrReplace(path, "\\", "/");
		var arr = StrSplit(path, "/");
		for (var i = length arr - 1; i >= 0; i--) {
			var e = arr[i];
			if (e == "..") {
				i--;
			} else {
				if (res)
					res = arr[i] + "/" + res;
				else
					res = arr[i];
			}
		}
		if (path[0] == "/")
			res = "/" + res;
		return res;
	}

	IniGetPath(ini_file, category, key, default_value = "") {
		var res = trim(IniGet(ini_file, category, key, default_value));
		if (res[0] == ".")
			return getcwd() + "/" + res;
		return res;
	}

	Main() {
		echo "Initializing Tinbase...\n";
		var ini_file = "/usr/local/etc/concept.ini";
		if (!FileExists(ini_file))
			ini_file="/usr/etc/concept.ini";
		if (!FileExists(ini_file))
			ini_file="/etc/concept.ini";
		if (!FileExists(ini_file))
			ini_file=getcwd()+"/concept.ini";

		var user = IniGet(ini_file, "TinDB", "User", "");
		var password = "";
		if (user) {
			password = IniGet(ini_file, "TinDB", "UserPassword", "");
		} else {
			user = IniGet(ini_file, "Server", "User", "");
			password = IniGet(ini_file, "Server", "UserPassword", "");
		}
		if (user) {
			if (!SetCurrentUser(user, password))
				echo "TinDB WARNING: cannot change user to $user\n";
		}
		var root = RealPath(IniGetPath(ini_file, "Paths", "DB", "../db"));
		_mkdir(root);
		if ((!root) || (_chdir(root))) {
			echo "Error initializing DB engine\nCannot chdir to '$root'\n";
			return -1;
		}
		var db = new TinDB();
		echo "Listening\n";
		db.Start();
	}
}
