include RemoteContainer.con
include ClassID.con

define EXPAND	1
define SHRINK	2
define FILL	4

define FILL_EXPAND	5

class RTable extends RemoteContainer {
	DEFINE_FIXED_CONTROL

	protected var ROWSPACING;
	protected var COLSPACING;
	protected var HOMOGENEOUS;
	protected var ROWS=1;
	protected var COLS=1;

	public property RowSpacing { get ROWSPACING, set SetRowSpacing }
	public property ColSpacing { get COLSPACING, set SetColSpacing }
	public property Rows { get ROWS, set SetRows }
	public property Columns { get COLS, set SetColumns }
	public property Homogeneous { get HOMOGENEOUS, set SetHomogeneous }
	
	protected var[] prec_attach;

	public function RTable(OWNER) {
		super(OWNER, CLASS_TABLE);
	}


	public function AttachOptions(number left, number right, number top, number bottom, number hopt=FILL_EXPAND, number vopt=FILL_EXPAND, number hspacing=0, number vspacing=0) {
		//BeginUpdateSession();
		if ((!prec_attach) || (left!=prec_attach[0]))
			SetProperty(P_ATTLEFT, left);

		if ((!prec_attach) || (right!=prec_attach[1]))
			SetProperty(P_ATTRIGHT, right);

		if ((!prec_attach) || (top!=prec_attach[2]))
			SetProperty(P_ATTTOP, top);

		if ((!prec_attach) || (bottom!=prec_attach[3]))
			SetProperty(P_ATTBOTTOM, bottom);

		if ((!prec_attach) || (hopt!=prec_attach[4]))
			SetProperty(P_ATTHOPT, hopt);

		if ((!prec_attach) || (vopt!=prec_attach[5]))
			SetProperty(P_ATTVOPT, vopt);

		if ((!prec_attach) || (hspacing!=prec_attach[6]))
			SetProperty(P_ATTHSPACING, hspacing);

		if ((!prec_attach) || (vspacing!=prec_attach[7]))
			SetProperty(P_ATTVSPACING, vspacing);

		//EndUpdateSession();

		prec_attach=[left, right, top, bottom, hopt, vopt, hspacing, vspacing];
	}

	public function SetRows(number argument) {
		SendMessage(REMOTE_ID_STR,MSG_SET_PROPERTY,P_ROWS,argument);
		ROWS=argument;
		return argument;
	}

	public function SetColumns(number argument) {
		SendMessage(REMOTE_ID_STR,MSG_SET_PROPERTY,P_COLUMNS,argument);
		COLS=argument;
		return argument;
	}


	public function SetRowSpacing(number argument) {
		SendMessage(REMOTE_ID_STR,MSG_SET_PROPERTY,P_ROWSPACING,argument);
		ROWSPACING=argument;
		return argument;
	}

	public function SetColSpacing(number argument) {
		SendMessage(REMOTE_ID_STR,MSG_SET_PROPERTY,P_COLUMNSPACING,argument);
		COLSPACING=argument;
		return argument;
	}

	public function SetHomogeneous(argument) {
		SendMessage(REMOTE_ID_STR,MSG_SET_PROPERTY,P_HOMOGENEOUS,argument);
		HOMOGENEOUS=argument;
		return argument;
	}

	public function ReorderChild(Child, position) {
		if (typeof Child!="class")
			throw "Child should be an instance of a class !";
		var ch_ptr=this.CHILDS;
		var ch_rid=Child.RID;
		if (ch_ptr) {
			if ((position >= 0) || (position < length ch_ptr)) {
				var len=length ch_ptr;
				for (var i=position+1;i<len;i++) {
					var obj=&ch_ptr[i];
					if (obj.RID!=ch_rid) {
						ch_ptr[i]=&ch_ptr[i-1];
					}
				}
				ch_ptr[position]=&Child;
				return Send(MSG_REORDER_CHILD,""+ch_rid,position);
			} else
				throw "Invalid position in reorder child";
		} else
			throw "Object has not children";
	}
}
