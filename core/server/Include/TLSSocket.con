import standard.net.tls
include TCPSocket.con

class TLSSocket extends TCPSocket {
	protected var tls;
	private var parent_tls;
	private var trustfile="";
	private var trustpath="";

	public property TLS { get tls }
	public property CertificateInfo { get GetCertificateInfo }
	public property TLSError { get GetTLSError }
	public property TLSErrorString { get GetTLSErrorString }
	public property TrustFile { get trustfile, set SetTrustFile }
	public property TrustPath { get trustpath, set SetTrustPath }
	public property TLSPending { get GetTLSPending }
	public var Timeout = -1;
	public var OnAfterAccept;

	public TLSSocket(number sock=-1, ref_tls=null, ipv6=false) {
		super(sock, ipv6);
		this.tls = ref_tls;
	}

	override Listen;
	public function Listen(port, max_connections=0x100, interface="") {
		var res=TCPSocket::Listen(port, max_connections, interface);
		if (!res) {
			tls=TLSServerContext();
			if (!tls) {
				this.Close();
				return -1;
			}
			TLSSet(tls, SSL_OP_SINGLE_DH_USE);
			if (trustfile)
				TLSTrust(tls, trustfile);
			if (trustpath)
				TLSTrustLocation(tls, trustpath);
		}
		return res;
	}

	public TLSOP(op) {
		return TLSSet(tls, op);
	}

	public function LoadKeys(string cert_filename, string key_filename, passphrase="") {
		if (passphrase)
			TLSPassphrase(tls, passphrase);
		if (!TLSCertificateFile(tls, cert_filename))
			return -1;
		if (!TLSPrivateKeyFile(tls, key_filename))
			return -2;
		if (!TLSCheck(tls))
			return -3;
		return 0;
	}

	public function LoadChain(string cert_filename, passphrase="") {
		if (passphrase)
			TLSPassphrase(tls, passphrase);
		if (!TLSChainFile(tls, cert_filename))
			return -2;
		if (!TLSPrivateKeyFile(tls, cert_filename))
			return -2;
		if (!TLSCheck(tls))
			return -3;
		return 0;
	}

	public function LoadKeysBuffer(string cert, string key) {
		if (!TLSCertificate(tls, cert))
			return -1;
		if (!TLSPrivateKey(tls, key))
			return -2;
		if (!TLSCheck(tls))
			return -3;
		return 0;
	}

	override Connect;
	public Connect(host, port) {
		var res=TCPSocket::Connect(host, port);
		if (res) {
			tls=TLSClientContext(this.Socket);
			if (!tls) {
				this.Close();
				throw "Error creating TLS/SSL context";
			}
			if (trustfile)
				TLSTrust(tls, trustfile);
			if (trustpath)
				TLSTrustLocation(tls, trustpath);
			if (!TLSConnect(tls)) {
				this.Close();
				return -1;
			}
		}
		return res;
	}

	public ConnectKey(host, port, string cert_filename, string key_filename, passphrase="") {
		var res=TCPSocket::Connect(host, port);
		if (res) {
			tls=TLSClientContext(this.Socket);
			if (!tls) {
				this.Close();
				throw "Error creating TLS/SSL context";
			}
			if (trustfile)
				TLSTrust(tls, trustfile);
			if (trustpath)
				TLSTrustLocation(tls, trustpath);
			if (this.LoadKeys(cert_filename, key_filename, passphrase)) {
				this.Close();
				return -2;
			}

			if (!TLSConnect(tls)) {
				this.Close();
				return -1;
			}
		}
		return res;
	}

	public ConnectChain(host, port, string cert_filename, passphrase="") {
		var res=TCPSocket::Connect(host, port);
		if (res) {
			tls=TLSClientContext(this.Socket);
			if (!tls) {
				this.Close();
				throw "Error creating TLS/SSL context";
			}
			if (trustfile)
				TLSTrust(tls, trustfile);
			if (trustpath)
				TLSTrustLocation(tls, trustpath);

			if (this.LoadChain(cert_filename, passphrase)) {
				this.Close();
				return -2;
			}

			if (!TLSConnect(tls)) {
				this.Close();
				return -1;
			}
		}
		return res;
	}
	override Accept;
	public Accept(return_tls_socket=false) {
		if (!tls)
			throw "Invalid TLS context (Accept)";

		var socket = TCPSocket::Accept(true);
		if (socket < 0)
			throw "Broken socket (Accept)";

		if (TLSAccept(tls, socket, var child_tls)<0) {
			SocketClose(socket);
			return null;
		}
		if (return_tls_socket)
			return child_tls;
		return new TLSSocket(socket, child_tls, _ipv6);
	}

	public AcceptTCP() {
		if (!tls)
			throw "Invalid TLS context (Accept)";

		var socket = TCPSocket::Accept(true);
		if (socket < 0)
			throw "Broken socket (Accept)";

		var tls_sock = new TLSSocket(socket, null, _ipv6);
		tls_sock.parent_tls = tls;
		return tls_sock;
	}

	public AcceptTLS() {
		if (tls)
			throw "AcceptTLS: TLS context already set";
		if (!parent_tls)
			throw "AcceptTLS: Invalid TLS socket";

		var res = TLSAccept(parent_tls, Socket, var child_tls);
		if (child_tls) {
			this.tls = child_tls;
			return true;
		}
		if (res < 0)
			return -1;
		return false;
	}

	public AcceptLoop() {
		var timeout = this.Timeout;
		this.GetOption(SOL_SOCKET, SO_RCVTIMEO, var ref_time);
		if (ref_time <= 0)
			ref_time = 10;
		do {
			if (this.GetHasData(1)) {
				if (this.AcceptTLS() < 0)
					break;
				if (this.tls) {
					if (OnAfterAccept)
						OnAfterAccept(this);
					return;
				}
				timeout -= ref_time;
			} else
				timeout--;
		} while (timeout > 0);
	}

	override Read;
	public Read(number max_size=0xFFFF) {
		if (Socket<=0)
			throw "Invalid TLS socket (Read)";
		if (_islisten)
			throw "Invalid TLS socket type (Read)";
		if (!tls)
			throw "Invalid TLS context (Read)";

		var res=TLSRead(tls, var buffer = "", max_size);
		if (res>0)
			return buffer;
		else
		if (res==0)
			return "";
		var err = TLSGetError(tls, res);
		if ((err = SSL_ERROR_WANT_READ) || (err = SSL_ERROR_WANT_WRITE))
			return "";
		throw "Broken TLS socket (Read)";
	}
	
	override Write;
	public Write(var string buffer) {
		if (Socket<=0)
			throw "Invalid TLS socket (Write)";
		if (_islisten)
			throw "Invalid TLS socket type (Write)";
		if (!tls)
			throw "Invalid TLS context (Write)";

		if (length buffer) {
			var res=TLSWrite(tls, buffer);
			if (res<0)
				throw "Broken TLS socket (Write)";
			return res;
		}
		return 0;
	}

	public function GetTLSPending() {
		if (Socket<=0)
			throw "Invalid TLS socket (GetTLSPending)";
		if (!tls)
			throw "Invalid TLS context (GetTLSPending)";
		if (_islisten)
			throw "Invalid TLS socket type (GetTLSPending)";
		var res=TLSPending(tls);
		if (res<0)
			throw "Broken TLS socket (GetTLSPending)";
		return res;
	}
	
	public SetTrustFile(string filename) {
		this.trustfile = filename;
		if (tls)
			TLSTrust(tls, filename);
		return filename;
	}

	public SetTrustPath(string path) {
		this.trustpath = path;
		if (tls)
			TLSTrustLocation(tls, path);
		return path;
	}

	public Verify() {
		if (!tls)
			return -1;

		return TLSVerify(tls);
	}

	public GetCertificateInfo() {
		if (!tls)
			return new [];

		return TLSCertificateInfo(tls);
	}

	public AddCA(string certdata) {
		if (!tls)
			throw "Invalid TLS context (AddCA)";
		return TLSAddCA(tls, certdata);
	}

	public GetTLSErrorString() {
		TLSError(var buf);
		return buf;
	}

	public GetTLSError() {
		return TLSError();
	}

	override Close;
	public Close(force = false) {
		if (tls) {
			TLSDone(tls);
			tls=null;
		}
		TCPSocket::Close(force);
	}

	public Shutdown() {
		if (tls) {
			TLSDone(tls);
			tls=null;
		}
	}

	public Save() {
		if (!tls)
			return "TLS not initialized";
		return TLSSave(tls);
	}

	public Restore(buf) {
		if (!tls)
			return "TLS not initialized";
		return TLSRestore(tls, buf);
	}

	public finalize() {
		this.Close();
	}
}
