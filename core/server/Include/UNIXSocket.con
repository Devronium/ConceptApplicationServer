import standard.net.socket

class UNIXSocket {
	public var Socket=-1;
	protected var _islisten=false;
	public property HasData { get GetHasData }
	public property Error { get GetError }
	public property Info { get GetInfo }

	public function UNIXSocket(sock=-1) {
		if (sock==-1)
			Socket=SocketCreate(PROTOCOL_UNIX);
		else
			Socket=sock;
	}

	public function Connect(host, dummyport=-1) {
		if (Socket<=0)
			throw "Invalid socket (connect operation)";
		return !SocketConnect(Socket, host, -1);
	}
	
	public function Listen(string socketname, max_connections=0x100) {
		if (Socket<=0)
			throw "Invalid socket (listen operation)";
		_islisten=true;
		return SocketListen(Socket, -1, max_connections, socketname);
	}

	public function Accept(return_static_socket=false) {		
		if (Socket<=0)
			throw "Invalid socket (Accept)";
		if (!_islisten)
			throw "Invalid socket type (Accept)";

		if (return_static_socket)
			return SocketAccept(Socket);
		var sock = SocketAccept(Socket);
		if (sock >= 0)
			return new UNIXSocket(sock);

		return null;
	}

	public function Close(force = false) {
		if (Socket>0) {
			if (force)
				var res=SocketClose(Socket, true);
			else
				res=SocketClose(Socket);
			Socket=-1;
			_islisten=false;
			return res;
		}
		return 0;
	}

	public function Read(number max_size=0xFFFF) {
		if (Socket<=0)
			throw "Invalid socket (Read)";
		if (_islisten)
			throw "Invalid socket type (Read)";
		var res=SocketRead(Socket, var buffer, max_size);
		if (res>0)
			return buffer;
		else
		if (res==0)
			return "";
		throw "Broken socket (Read)";
	}

	public function Write(var string buffer) {
		if (Socket<=0)
			throw "Invalid socket (Write)";
		if (_islisten)
			throw "Invalid socket type (Write)";
		if (length buffer) {
			var res=SocketWrite(Socket, buffer);
			if (res<0)
				throw "Broken socket (Write)";
			return res;
		}
		return 0;
	}

	public function GetHasData(timeout=0) {
		if (Socket<=0)
			throw "Invalid socket (GetHasData)";
		//if (_islisten)
		//	throw "Invalid socket type (GetHasData)";
		if (timeout<=0)
			var res=SocketHasData(Socket);
		else
			res=SocketHasData(Socket, timeout);
		if (res<0)
			throw "Broken socket (GetHasData)";
		return res;
	}

	public function GetError() {
		if (Socket<=0)
			throw "Invalid socket (GetError)";
		return SocketError(Socket);
	}

	public function SetOption(level, opt, val) {
		if (Socket<=0)
			throw "Invalid socket (SetOption)";
		return SocketSetOption(Socket, level, opt, val);
	}

	public function GetOption(level, opt, var val) {
		if (Socket<=0)
			throw "Invalid socket (SetOption)";
		return SocketGetOption(Socket, level, opt, val);
	}

	public function GetInfo() {
		if (Socket<=0)
			throw "Invalid socket (GetInfo)";
		return ["ip" => "UNIX socket", "port": 0];
	}

	public function finalize() {
		this.Close();
	}
}
