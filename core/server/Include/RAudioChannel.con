include OCV/RAudioStream.con

class RAudioChannel {
	public var audio_in;
	public var audio_out;
	protected var Running = false;
	public var OnStart;
	public var OnStop;
	public var OnBuffer;

	public property IsRunning { get Running }

	RAudioChannel(owner, sample_rate = 16000, bitrate = 20000, frame_size = 40, max_buffers = 10, bandwidth = BANDWIDTH_MEDIUMBAND) {
		audio_in = new RAudioStreamer(owner);
		audio_in.SampleRate = sample_rate;
		audio_in.Channels = 1;
		audio_in.Quality = 8;
		audio_in.Bitrate = bitrate;
		audio_in.FrameSize = frame_size;
		audio_in.Compression = USE_OPUS;
		audio_in.BandWidth = bandwidth;
		audio_in.OnBuffer = this.OnBufferReceived;

		audio_out = new RAudioStreamer(owner);
		audio_out.SampleRate = sample_rate;
		audio_out.Channels = 1;
		audio_out.Quality = audio_in.Quality;
		audio_out.Compression = USE_OPUS;
		audio_out.MaxBuffers = max_buffers;
	}

	OnBufferReceived(Sender, var EventData) {
		try {
			this.OnBuffer(EventData);
		} catch (var exc) {
			this.Stop();
		}
	}

	UpdateParams(bitrate, framesize, max_buffers) {
		if (audio_in.Bitrate != bitrate)
			audio_in.Bitrate = bitrate;
		if (audio_in.FrameSize != framesize)
			audio_in.FrameSize = framesize;
		if (audio_in.MaxBuffers != max_buffers) {
			audio_in.MaxBuffers = max_buffers;
			audio_out.MaxBuffers = max_buffers;
		}
	}

	UpdateBuffers(max_buffers) {
		if (audio_in.MaxBuffers != max_buffers) {
			audio_in.MaxBuffers = max_buffers;
			audio_out.MaxBuffers = max_buffers;
		}
	}

	Write(var buf) {
		if (Running)
			audio_out.AddSmallBuffer(buf);
	}

	Start() {
		if (!Running) {
			try {
				audio_in.Record();
			} catch (var exc) {
			}
			try {
				audio_out.Play();
			} catch (exc) {
			}
			Running = true;
			if (OnStart)
				this.OnStart();
		}
	}

	Stop() {
		if (Running) {
			try {
				audio_in.Stop();
			} catch (var exc) {
			}
			try {
				audio_out.Stop();
			} catch (exc) {
			}
			Running = false;
			if (OnStop)
				this.OnStop();
		}
	}
}
