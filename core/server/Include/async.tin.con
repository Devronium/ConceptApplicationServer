include TinDataBases.con
import win32.base.messages
import standard.lang.cli

class tinasync extends TinConnection {
	var[] subjects;
	protected var _connected;
	public property connected { get _connected };

	tinasync(string db = "appdb", string host = "localhost", number port = 2668) {
		if (this.DriverOpen(db, host, port)) {
			_connected = true;
			RegisterLooper(this.Iterate);
			this._cli_mode = GLOBALS()["context.async"];
		}
	}

	protected PromiseHandler(data, id, err, p) {
		if (err)
			return p.reject(err);
		if (!data)
			data = id;
		if ((typeof data == "numeric") && (data == -1))
			data = [ ];
		return p.resolve(data);	
	}

	auth(string username = "sysdbadministrator", string password = "sysdbadministrator") {
		var dataset = new TinDataSet(this, "sys");
		var p = new Promise();
		dataset.UserData = p;
		dataset.Auth(username, password, this.Database ?? "sys", function(data, id, err, p) {
			if (err)
				return p.reject(err);
			return p.resolveNoParams();	
		});
		return p;
	}

	override sql;
	sql(string, parameters = null) {	
		var p = new Promise();
		TinConnection::sql(string, parameters, this.PromiseHandler, p);
		return p;
	}

	ifauth(timeout = 5) {
		if (this.isauth)
			return this;
		timeout += time();
		do {
			this.Iterate();
		} while ((!this.isauth) && (time() <= timeout));
		if (this.isauth)
			return this;
		return null;
	}

	keepopen(open = true) {
		this._keep_open = open;
	}

	addsubject(string subject = "") {
		if (!this.subjects[subject]) {
			this.subjects[subject] = true;
			this.AddSubject(subject);
			// keep connection open forever
			this._keep_open = true;
			return true;
		}
		return false;
	}

	removesubject(string subject = "") {
		if (this.subjects[subject]) {
			this.subjects[subject] = false;
			var new_subjects = new [];
			var keys = GetKeys(this.subjects);
			for (var i = 0; i < length keys; i++) {
				var k = keys[i];
				if (this.subjects[k])
					new_subjects[k] = true;
			}
			this.subjects = new_subjects;
			if (!this.subjects)
				this._keep_open = false;
			this.RemoveSubject(subject);
			return true;
		}
		return false;
	}

	operator << (string) {
		this.addsubject(string);
		return this;
	}

	operator >> (string) {
		this.removesubject(string);
		return this;
	}
}
