import standard.lib.str
import standard.lang.serialize
import standard.C.math

include PDFFontMetric.con
include PDFFontEncoding.con
include PDFFontMetricEncoding.con

define PDF_A4_W			595
define PDF_A4_H			842
define PDF_A4			595, 842
define PDF_STANDARD_FONTS	["Times-Roman", "Times-Italic", "Times-Bold", "Times-BoldItalic", "Helvetica", "Helvetica-Oblique", "Helvetica-Bold", "Helvetica-BoldOblique", "Courier", "Courier-Oblique", "Courier-Bold", "Courier-BoldOblique", "Symbol", "ZapfDingbats"]
define PDF_STANDARD_ENCODINGS	["cp1251", "iso-8859-4", "cp1255", "iso-8859-11", "cp1257", "cp1258", "cp1253", "cp874", "iso-8859-2", "cp1250", "iso-8859-7", "iso-8859-9", "cp1252", "cp1254", "iso-8859-1", "iso-8859-15", "iso-8859-5", "koi8-r", "iso-8859-16", "koi8-u", "symbol"]
define PDF_DEFAULT_FONT		"helvetica"

class PDFText {
	var font;
	var x;
	var y;
	var text;
	var size;

	PDFText(x, y, text, fontsize, fontname, escape) {
		this.x = x;
		this.y = y;
		this.size =fontsize;
		this.font = fontname;
		if (escape)
			this.text = StrReplace(StrReplace(StrReplace(text, "\\", "\\\\"), ")", "\\)"), "(", "\\(");
		else
			this.text = text;
	}
}

class PDFPath {
	var path;

	PDFPath(path) {
		this.path = path;
	}
}

class PDFColumn {
	var caption;
	var width;
	var align;
	var computed_width;

	var background;
	var color;
	var bordercolor;
	var textcolor;

	PDFColumn(caption, width, align, style) {
		this.caption = caption;
		this.width = width;
		this.align = align;
		if ((style) && (typeof style == "array")) {
			if (IsSet(style, "background"))
				this.background = style["background"];
			if (IsSet(style, "color"))
				this.color = style["color"];
			if (IsSet(style, "border-color"))
				this.bordercolor = style["border-color"];
			if (IsSet(style, "text-color"))
				this.textcolor = style["text-color"];
		}
	}
}

class PDFCell {
	var text;
	var span = 1;
	var style;
	
	PDFCell(text) {
		this.text = text;
	}

	static put(text, span, style = null) {
		var cell = new PDFCell(text);
		cell.span = span;
		cell.style = style;
		return cell;
	}
}

class PDFTable {
	var columns;
	var data;
	var x;
	var y;
	var width;
	var logical_width;

	PDFTable(columns, data, x, y, width, logical_width) {
		this.columns = columns;
		this.data = data;
		this.x = x;
		this.y = y;
		this.width = width;
		this.logical_width = logical_width;
	}

}

class PDFPage {
	var Width;
	var Height;
	var Owner;

	var[] Elements;
	var[] Fonts;
	var[] UsedImages;
	var[] ImageIndex;

	var Color = "0 0 0";
	var FillColor = "0 0 0";
	var LineWidth = 1;

	protected var[] Stack;

	protected var CurrentFillColor = "";
	protected var CurrentColor = "";
	protected var CurrentLineWidth = -1;

	public var Font = "Helvetica";
	public var FontSize = 12;

	public var MarginTop = 20;
	public var MarginBottom = 20;
	public var MarginLeft = 20;
	public var MarginRight = 20;

	var TextX;
	var TextY;
	protected var __lastwidth;
	protected var __textinitialized;

	PDFPage(Owner, Width, Height, MarginTop, MarginBottom, MarginLeft, MarginRight, inherit_header_footer = true) {
		this.Width = Width;
		this.Height = Height;
		this.Owner = Owner;
		this.MarginTop = MarginTop;
		this.MarginBottom = MarginBottom;
		this.MarginLeft = MarginLeft;
		this.MarginRight = MarginRight;

		this.TextX = MarginLeft;
		this.TextY = Height - MarginTop - MarginBottom;

		if (Owner.Template)
			this.__CloneElements(Owner.Template);

		if (inherit_header_footer) {
			var header = Owner.Header;
			if (header) {
				this.__CloneElements(header.Elements);
				this.__Clone(header.UsedImages, this.UsedImages);
				this.__Clone(header.Fonts, this.Fonts);

				if (this.TextY > header.TextY)
					this.TextY = header.TextY - header.FontSize;
			}
			var footer = Owner.Footer;
			if (footer) {
				this.__CloneElements(footer.Elements);
				this.__Clone(footer.UsedImages, this.UsedImages);
				this.__Clone(footer.Fonts, this.Fonts);
			}
		}
	}

	protected __CloneElements(elements) {
		for (var i = 0; i < length elements; i++) {
			var e = elements[i];
			if (classof e == "PDFText") {
				var text = StrReplace(e.text, "[#]", "" + (length Owner.Pages + 1));
				e = new PDFText(e.x, e.y, text, e.size, e.font, false);
			}
			Elements[length Elements] = e;
		}
	}

	protected __Clone(arr, clone) {
		var keys = GetKeys(arr);
		for (var i = 0; i < length keys; i++) {
			var k = keys[i];
			clone[k] = arr[k];
		}
	}

	protected __NewPage() {
		var page = this.Owner.NewPage(Width, Height);
		page.Font = Font;
		page.FontSize = FontSize;
		page.MarginTop = MarginTop;
		page.MarginBottom = MarginBottom;
		page.MarginLeft = MarginLeft;
		page.MarginBottom = MarginBottom;
		page.Color = Color;
		page.FillColor = FillColor;
		page.LineWidth = LineWidth;
		return page;
	}

	protected __AppendLines(lines, align = 0) {
		var last_line = length lines - 1;
		var last_delta = 0;
		for (var i = 0; i < length lines; i++) {
			var line = lines[i];
			if (align) {
				var width = this.Owner.Measure(line, Font, FontSize);
				var remaining_width = Width - TextX - MarginRight;
				var delta = remaining_width - width;
				last_delta = align * delta;
				this.Print(TextX + last_delta, TextY, line, FontSize, Font);
			} else
				this.Print(TextX, TextY, line, FontSize, Font);
			TextX = MarginLeft;
			if (i < last_line) {
				TextY -= FontSize;
				if (TextY < MarginBottom) {
					var lines2 = new [];
					for (var j = i + 1; j < length lines; j++)
						lines2[length lines2] = lines[j];
					if (lines2) {
						var page = this.__NewPage();
						return page.__AppendLines(lines2, align);
					}
				}
			}
			
		}
		if (lines) {
			if ((align) && (__lastwidth)) {
				__lastwidth = 0;
				TextX = MarginLeft;
				TextY -= FontSize;
			} else
				TextX = MarginLeft + __lastwidth;
		}
		return this;
	}

	Append(text, align = 0) {
		if (!text)
			return this;
		if (align < 0)
			align = 0;
		if (align > 1)
			align = 1;
		return __AppendLines(this.Owner.Wrap(text, Font, FontSize, Width - MarginLeft - MarginRight, __lastwidth), align);
	}

	Rule(dashed_param = "") {
		this.EnsureInitialized();
		TextY -= floor(FontSize/2);
		this.Line(MarginLeft, TextY, Width - MarginRight, TextY, dashed_param);
		TextY -= FontSize;
		TextX = MarginLeft;
		return this;
	}

	operator << (text) {
		return this.Append(text);
	}

	protected  __ComputeRowHeight(row, table, var wrapped_rows, padding, var spans = null, var styles = null) {
		var columns = table.columns;
		wrapped_rows = new [];
		spans = new [];
		styles = new [];
		var max = 0;
		padding *= 2;
		var len = length row;
		if (len > length columns)
			len = length columns;
		var rowindex = 0;
		for (var i = 0; i < len; i++) {
			var column = columns[i];
			if (column) { 
				var txt = row[rowindex];
				var span = 1;
				var caption = "";
				switch (typeof txt) {
					case "class":
						// to do
						span = txt.span;
						caption = "" + txt.text;
						if (txt.style)
							styles[rowindex] = txt.style;
						break;
					case "numeric":
					case "string":
						caption += txt;
						break;
					default:
						caption = "";
				}
				spans[rowindex] = span;
				if (caption) {
					var column_size = column.computed_width - padding;
					if (span >= 2) {
						for (var j = 1; j < span; j++) {
							if (j >= len)
								break;
							var span_column = columns[i + j];
							if (span_column)
								column_size += span_column.computed_width;
						}
					}
					var lines = this.Owner.Wrap(caption, Font, FontSize, column_size);
					if (lines) {
						wrapped_rows[i] = lines;
						if (length lines > max)
							max = length lines;
					}
				} else
					wrapped_rows[i] = "";

				if (span >= 2)
					i += span - 1;
				rowindex++;
			}
		}
		if (length wrapped_rows == 0)
			wrapped_rows[0] = " ";
		return max;
	}

	protected __style(style, key, default_value) {
		if ((style) && (IsSet(style, key)))
			return style[key];
		return default_value;
	}

	Push() {
		Stack[length Stack] = [Color, FillColor, LineWidth];
	}

	Pop() {
		if (Stack) {
			var len = length Stack - 1;
			var last = Stack[len];
			var r_stack = new [];
			for (var i = 0; i < len; i++)
				r_stack[i] = Stack[i];
			Stack = r_stack;
			if (last) {
				Color = last[0];
				FillColor = last[1];
				LineWidth = last[2];
			}
		}
	}

	EnsureInitialized() {
		if (!__textinitialized) {
			// tables don't show on pages that contain no text
			this.Print(0, 0, " ", 1, "Helvetica");
			__textinitialized = true;
		}
	}

	Table(array header, array data, style = null, data_offset = 0, table_width = -1, table_x = -1, table_y = -1, return_offset = false) {
		this.EnsureInitialized();
		var total_width = 0;
		var padding = this.__style(style, "padding", 2);
		if (padding < 0)
			padding = 0;
		var border = this.__style(style, "border", 1);
		if (border < 0)
			border = 0;
		var auto_pos = false;
		var header_style = this.__style(style, "header", null);
		var header_color = "";
		var header_background = "";
		var header_border_color = "";
		var header_text_color = "";
		var header_visible = true;
		if ((header_style) && (typeof header_style == "array")) {
			header_color = this.__style(header_style, "color", "");
			header_background = this.__style(header_style, "background", "");
			header_border_color = this.__style(header_style, "border-color", "");
			header_text_color = this.__style(header_style, "text-color", "");
			header_visible = this.__style(header_style, "visible", true);
		}
		var row_style = this.__style(style, "rowstyleindex", -1);
		var max_row_size;
		var font_height_coef = PDF_FONT_HEIGHTS[ToLower(Font)];
		if (!font_height_coef)
			font_height_coef = 1;
			//font_height_coef = 1/font_height_coef;

		if (table_y < 0) {
			table_y = TextY - border - FontSize/2;
			auto_pos = true;
			max_row_size = Height - MarginTop - MarginBottom;
			max_row_size *= 0.95;
		}
		if (table_x < 0)
			table_x = MarginLeft;
		if (table_width < 0)
			table_width = Width - MarginLeft - MarginRight;

		var[] columns;
		var[] headers;
		var table_width_no_padding;

		var font_line_size = round(this.FontSize / font_height_coef, 3);
		for (var i = 0; i < length header; i++) {
			var e = header[i];
			if (e) {
				var width = 1;
				var caption = "";
				var align = 0;
				var column_style = null;
				if (typeof e == "array") {
					caption = "" + e[0];
					width = e[1];
					align = e[2];
					if (align > 1)
						align = 1;
					if (align < 0)
						align = 0;
					column_style = e[3];
				} else
					caption = "" + e;

				if (width <= 0)
					width = 1;
				total_width += width;
				columns[length columns] = new PDFColumn(caption, width, align, column_style);
				headers[length headers] = caption;
			}
		}
		table_width_no_padding = table_width - (length columns + 1) * (padding + border);
		for (i = 0; i < length columns; i++) {
			var column = columns[i];
			column.computed_width = round(column.width/total_width * table_width, 2);
		}
		var table = new PDFTable(columns, data, table_x, table_y, table_width_no_padding, total_width);
		var header_height = 0;

		this.Push();
		this.LineWidth = border;

		if (header_visible) {
			this.Push();
			var x = table_x;
			var line_width = 0;
			padding += border/2;

			header_height = this.__ComputeRowHeight(headers, table, var out_rows, padding) * FontSize * font_height_coef;
			var filled = false;

			for (i = 0; i < length columns; i++) {
				var y = table_y - padding - line_width;
				caption = out_rows[i];
				column = columns[i];
				if (!column)
					break;

				if ((border) || (header_background) || (header_color)) {
					filled = false;
					if (header_style) {
						if (header_background) {
							filled = true;
							this.FillColor = header_background;
						}
						if (header_color) {
							if (border)
								this.Color = header_color;
							else
							if (header_background)
								this.Color = header_background;
						}
					}
					this.Rectangle(x, table_y - header_height - padding * 2, column.computed_width - line_width * 2, header_height + padding * 2, filled);
				}
				if ((header_color) || (header_text_color))
					this.FillColor = header_text_color ?? header_color;
				if (caption) {
					for (var j = 0; j < length caption; j++) {
						var line = caption[j];
						if (line) {
							var delta = 0;
							if (column.align > 0) {
								var len = this.Owner.Measure(line, Font, FontSize);
								var delta_ref = column.computed_width - padding * 2 - len;
								if (delta_ref > 0)
									delta = column.align * delta_ref;
							}
							this.Print(round(x + padding + delta, 3), round(y - font_line_size, 3), line, FontSize, Font);
						}
						y -= FontSize;
					}
				}
				x += column.computed_width;
			}

			this.Pop();
			if (auto_pos)
				max_row_size -= header_height;
		}
		var row_y = table_y;
		if (header_visible)
		 	row_y = row_y - header_height - padding * 2 - border;
		else
			row_y -= border/2;

		for (i = data_offset; i < length data; i++) {
			x = table_x;
			var row = data[i];
			if (row) {
				var row_height = this.__ComputeRowHeight(row, table, out_rows, padding, var spans, var styles) * FontSize * font_height_coef;

				if ((auto_pos) && (row_y - row_height <= MarginBottom) && (row_height < max_row_size)) {
					if (return_offset)
						return i;
					var offset = i;
					do {
						var page = this.__NewPage();
						offset = page.Table(header, data, style, offset, -1, -1, -1, true);
					} while (offset < length data);
					return page;
				}

				for (var k = 0; k < length out_rows; k++) {
					if (row_height) {
						caption = out_rows[k];
						column = columns[k];
						if (!column)
							continue;
						y = row_y;

						var span = spans[k];
						var spanstyle = styles[k];
						var column_width = column.computed_width;
						if (span >= 2) {
							for (var k1 = 1; k1 < span; k1++) {
								var span_column = columns[k + k1];
								if (span_column)
									column_width += span_column.computed_width;
							}
							k += span - 1;
						}
						var has_style = false;

						var background = column.background;
						var color = column.color;
						var textcolor = column.textcolor;

						if (row_style >= 0) {
							var rstyle = row[row_style];
							if (typeof rstyle == "array") {
								color = color ?? this.__style(rstyle, "color", color);
								background = background ?? this.__style(rstyle, "background", background);
								textcolor = textcolor ?? this.__style(rstyle, "text-color", textcolor);
							}
						}
						if ((spanstyle) && (typeof spanstyle == "array")) {
							color = this.__style(spanstyle, "color", color);
							background = this.__style(spanstyle, "background", background);
							textcolor = this.__style(spanstyle, "text-color", textcolor);
						}

						if ((border) || (background) || (color)) {
							filled = false;
							if ((background) || (color)) {
								has_style = true;
								this.Push();
							}
							if (background) {
								filled = true;
								this.FillColor = background;
							}
							if (color) {
								if (border)
									this.Color = color;
								else
								if (background)
									this.Color = background;
							}
							this.Rectangle(x, y - row_height - padding * 2, column_width - line_width * 2, row_height + padding * 2, filled);
						}
						if (caption) {
							if (textcolor) {
								if (!has_style) {
									has_style = true;
									this.Push();
								}
								this.FillColor = textcolor;
							} else
							if (has_style) {
								this.Pop();
								has_style = false;
							}

							for (j = 0; j < length caption; j++) {
								line = caption[j];
								if (line) {
									delta = 0;
									if (column.align > 0) {
										len = this.Owner.Measure(line, Font, FontSize);
										delta_ref = column_width - padding * 2 - len;
										if (delta_ref > 0)
											delta = column.align * delta_ref;
									}
									this.Print(round(x + padding + delta, 3), round(y - padding - font_line_size, 3), line, FontSize, Font);
								}
								y -= FontSize;
							}
						}
						if (has_style)
							this.Pop();
						x += column_width;
					}
				}
				row_y -= row_height + padding * 2;
			}
		}
		this.Pop();

		if (auto_pos) {
			this.TextX = MarginLeft;
			this.TextY = row_y - font_line_size - border * 2;
		}
		if (return_offset)
			return length data;
		return this;
	}

	UpdateParams(forced = false) {
		var str = "";
		if ((CurrentColor != Color) || (forced)) {
			CurrentColor = Color;
			str += "" + CurrentColor + " RG";
		}
		if ((CurrentFillColor != FillColor) || (forced)) {
			CurrentFillColor = FillColor;
			if (str)	
				str += " ";
			str += "" + CurrentFillColor + " rg";
		}
		if ((CurrentLineWidth != LineWidth) || (forced)) {
			CurrentLineWidth = LineWidth;
			if (str)	
				str += " ";
			str += "" + LineWidth + " w";
		}
		if (str)
			Elements[length Elements] = new PDFPath(str);
	}

	Print(number x, number y, text, fontsize = 12, fontname = "", escape = true) {
		__textinitialized = true;
		UpdateParams();
		fontname = trim(fontname);
		Elements[length Elements] = new PDFText(x, y, text, fontsize, fontname, escape);
		if (fontname)
			Fonts[ToLower(fontname)] = this.Owner.__UseFont(fontname);
	}

	Rectangle(number x, number y, number width, number height, fill = false) {
		UpdateParams();
		var fill_str = "s";
		if (fill)
			fill_str = "b";

		Elements[length Elements] = new PDFPath("$x $y m $x $y $width $height re h $fill_str");
	}

	Line(number x1, number y1, number x2, number y2, dashed_param = "") {
		UpdateParams();
		Elements[length Elements] = new PDFPath("$x1 $y1 m $dashed_param $x2 $y2 l h S");
	}

	Image(string name, number x, number y, scale_w = 0, scale_h = 0) {
		var image = this.Owner.Images[name];
		if (image) {
			if (!UsedImages[name]) {
				ImageIndex[name] = length UsedImages - 1;
				UsedImages[name] = image;
			}
			var size = "";
			if ((scale_w) && (scale_h))
				size = "$scale_w 0 0 $scale_h 0 0 cm\r\n";
			Elements[length Elements] = new PDFPath("q\r\n1 0 0 1 $x $y cm\r\n$size/Im${ImageIndex[name]} Do\r\nQ");
			return true;
		}
		return false;
	}

	__resources() {
		var resources = "";
		if (Fonts) {
			resources += "/Font<<";
			for (var i = 0; i < length Fonts; i++) {
				var name = Fonts[i];
				var offset = this.Owner.__getfont(name) + 1;
				resources += "/$name $offset 0 R";
			}
			resources += ">>";
		}
		if (UsedImages) {
			resources += "/ProcSet[/PDF/ImageB]/XObject <<";
			for (i = 0; i < length UsedImages; i++) {
				var img = UsedImages[i];
				if (img)
					resources += "/Im$i ${img.obj_id} 0 R";
			}
			resources += ">>";
		}
		return resources;
	}

	__render(offsets, var pdf) {
		var stream = "";
		if (Elements) {
			var current_font = "";
			var current_size = 0;
			for (var i = 0; i < length Elements; i++) {
				var element = Elements[i];	
				if (stream)
					stream += "\r\n";
				var font_data = "";
				switch (classof element) {
					case "PDFText":
						if (element.text) {
							if ((current_font != element.font) || (current_size != element.size)) {
								if (element.font)
									current_font = element.font;
								if (element.size)
									current_size = element.size;
								if ((current_font) && (current_size)) {
									var fontname = Fonts[ToLower(current_font)];
									font_data = "/$fontname ${current_size} Tf";
								}
							}
							stream += "BT $font_data ${element.x} ${element.y} Td(${element.text})Tj ET";
						}
						break;
					case "PDFPath":
						stream += element.path;
						break;
				}
			}
		}

		return stream;
	}
}

class PDFEmbeddedFile {
	var content;
	var name;
	var type;

	PDFEmbeddedFile(var content, name, type) {
		this.content = content;
		this.name = name;
		this.type = type;
	}
}

class PDFImage {
	var content;
	var width;
	var height;
	var obj_id;

	PDFImage(var content, width, height) {
		this.content = content;
		this.width = width;
		this.height = height;
	}
}

class PDFGenerator {
	var DefaultPageWidth;
	var DefaultPageHeight;
	var MarginTop = 20;
	var MarginBottom = 20;
	var MarginLeft = 20;
	var MarginRight = 20;

	var UseCompression = true;
	var Lang = "(EN-US)";
	var Title = "";
	var Creator = "";
	var Producer = "";
	var Author = "";
	var Subject = "";
	var Keywords = "";
	protected var Unicode = false;
	var Encoding = "";

	protected var _Footer;
	protected var _Header;
	var[] Pages;
	protected var[] Fonts;
	protected var[] FontsMetric;
	protected var[] FontNames;
	protected var[] FontOffsets;
	protected var[] Blobs;
	protected var[] EmbeddedFonts;
	var[] Images;
	var Metrics;
	var EncodingMetrics;
	var[] Template;

	public property Footer { get GetFooter }
	public property Header { get GetHeader }

	PDFGenerator(DefaultPageWidth = PDF_A4_W, DefaultPageHeight = PDF_A4_H) {
		this.DefaultPageWidth = DefaultPageWidth;
		this.DefaultPageHeight = DefaultPageHeight;
		this.Metrics = PDF_FONT_METRIC;
		this.EncodingMetrics = PDF_FONT_ENCODING_METRIC;
	}

	UseTemplate(page) {
		Template = new [];
		if (page) {
			for (var i = 0; i < length page.Elements; i++)
				Template[i] = page.Elements[i];
		}
	}

	LoadTemplate(page) {
		if (page) {
			for (var i = 0; i < length this.Template; i++)
				page.Elements[length page.Elements] = this.Template[i];
		}
	}

	protected LoadEncodingMetrics(fontname_lo) {
		var metrics = this.EncodingMetrics;
		var res = metrics[fontname_lo];
		if (res) {
			var encoding = ToLower(this.Encoding);
			if (!encoding)
				encoding = "iso-8859-1";
			if (res) {
				res = res[encoding];
				if (res)
					FontsMetric[fontname_lo] = res;
			}
		}
		return res;
	}

	protected WVector(fontname) {
		if (this.Encoding)
			var arr = this.FontsMetric[fontname] ?? LoadEncodingMetrics(fontname);

		if (!arr) {
			if (!IsSet(this.Metrics, fontname))
				fontname = PDF_DEFAULT_FONT;
			arr = this.Metrics[fontname];
		}
		return arr;
	}

	Measure(string text, string fontname, number size) {
		if (text) {
			fontname = ToLower(fontname);
			var arr = this.WVector(fontname);
			var fixed_size;
			if (typeof arr != "array")
				fixed_size = true;

			var w_size = 0;
			if (fixed_size) {
				w_size = length text * arr * size;
			} else {
				for (var i = 0; i < length text; i++)
					w_size += (arr[ord(text[i])] ?? 0.6) * size;
			}
			return w_size;
		}
		return 0;
	}

	Wrap(string text, string fontname, number size, width, var last_width = 0) {
		var[] res;
		if (text) {
			fontname = ToLower(fontname);
			if (!IsSet(this.Metrics, fontname))
				fontname = PDF_DEFAULT_FONT;

			var arr = this.Metrics[fontname];
			var w_size = last_width;
			var last_line = "";
			var line = "";
			var last_separator = 0;

			for (var i = 0; i < length text; i++) {
				var l = text[i];
				if (l == "\t") {
					text[i] = "    ";
					l = " ";
				}
				if (l == "\r")
					continue;
				if (l == "\n") {
					res[length res] = line;
					last_line = "";
					line = "";
					w_size = 0;
					continue;
				} else {
					w_size += arr[ord(l)] * size;
					if ((ceil(w_size) >= width) && (i)) {
						if (!last_line) {
							last_line = line;
							last_separator = i - 1;
						}
						i = last_separator;
						line = "";
						res[length res] = last_line;
						last_line = "";
						w_size = 0;
						continue;
					}
					line += l;
				}

				switch (l) {
					case " ":
					case ".":
					case ",":
					case "-":
					case "#":
					case "!":
					case "?":
					case ";":
					case ":":
					case ")":
					case "(":
					case "[":
					case "]":
					case "/":
					case "\\":
					case "{":
					case "}":
					case "+":
					case "=":
					case "\t":
					case "\n":
					case "\r":
						last_separator = i;
						last_line = line;
						break;
				}
			}
			if ((line) || (l == "\n"))
				res[length res] = line;
			last_width = w_size;
			return res;
		}
		return res;
	}

	NewPage(Width = 0, Height = 0) {
		if (Width <= 0)
			Width = DefaultPageWidth;
		if (Height <= 0)
			Height = DefaultPageHeight;
		var page = new PDFPage(this, Width, Height, MarginTop, MarginBottom, MarginLeft, MarginRight);
		Pages[length Pages] = page;
		return page;
	}

	GetHeader() {
		if (!_Header) {
			_Header = new PDFPage(this, DefaultPageWidth, DefaultPageHeight, MarginTop, MarginBottom, MarginLeft, MarginRight, false);
			_Header.FontSize = 8;
		}
		return _Header;
	}

	GetFooter() {
		if (!_Footer) {
			_Footer = new PDFPage(this, DefaultPageWidth, DefaultPageHeight, MarginTop, MarginBottom, MarginLeft, MarginRight, false);
			_Footer.FontSize = 8;
		}
		return _Footer;
	}

	EmbedFont(fontname, ttfdata) {
		EmbeddedFonts[fontname] = ttfdata;
	}

	protected __offset(offset) {
		var res = "" + offset;
		while (length res < 10)
			res = "0" + res;
		return res;
	}

	protected __object(offsets, var pdf, object_data) {
		var offset = __offset(length pdf);
		var obj_id = length offsets + 1;
		offsets[length offsets] = offset;
		pdf += "$obj_id 0 obj\r\n" + object_data + "\r\nendobj\r\n";
		return offset;
	}

	protected __xref(offsets, var pdf, root, info_id) {
		var offset = length pdf;
		var obj_count = length offsets + 1;
		pdf += "xref\r\n";

		pdf += "0 $obj_count\r\n";
		pdf += "0000000000 65535 f\r\n";
		for (var i = 0; i < length offsets; i++)
			pdf += offsets[i] + " 00000 n\r\n";
		if (info_id)
			pdf += "trailer <</Size $obj_count/Root $root 0 R/Info $info_id 0 R>>\r\n";
		else
			pdf += "trailer <</Size $obj_count/Root $root 0 R>>\r\n";
		return offset;
	}

	public __UseFont(string fontname) {
		var fontname_lo = ToLower(fontname);
		var font = Fonts[fontname_lo];
		if (font)
			return FontNames[fontname_lo];

		Fonts[fontname_lo] = fontname;
		var fname = "F" + (length Fonts);
		FontNames[fontname_lo] = fname;
		return fname;
	}

	protected __stream(offsets, var pdf, object_data) {
		var extra = "";
		if (UseCompression) {
			extra = "/Filter/FlateDecode";
			object_data = compress(object_data);
		}
		return this.__object(offsets, pdf, "<</Length ${length object_data}$extra>>\r\nstream\r\n$object_data\r\nendstream");
	}

	protected __register_fonts(offsets, var pdf) {
		FontOffsets = new [];
		var unicode_str = "";
		var encoding = "";
		var encoding_ref = "";
		var charset = ToLower(this.Encoding);
		switch (charset) {
			case "":
				break;
			case "iso-8859-1":
				encoding_ref = PDF_ISO_8859_1;
				break;
			case "iso-8859-2":
				encoding_ref = PDF_ISO_8859_2;
				break;
			case "cp1251":
				encoding_ref = PDF_CP1251;
				break;
			case "iso-8859-4":
				encoding_ref = PDF_ISO_8859_4;
				break;
			case "cp1255":
				encoding_ref = PDF_CP1255;
				break;
			case "iso-8859-11":
				encoding_ref = PDF_ISO_8859_11;
				break;
			case "cp1257":
				encoding_ref = PDF_CP1257;
				break;
			case "cp1258":
				encoding_ref = PDF_CP1258;
				break;
			case "cp1253":
				encoding_ref = PDF_CP1253;
				break;
			case "cp874":
				encoding_ref = PDF_CP874;
				break;
			case "cp1250":
				encoding_ref = PDF_CP1250;
				break;
			case "iso-8859-7":
				encoding_ref = PDF_ISO_8859_7;
				break;
			case "iso-8859-9":
				encoding_ref = PDF_ISO_8859_9;
				break;
			case "cp1252":
				encoding_ref = PDF_CP1252;
				break;
			case "cp1254":
				encoding_ref = PDF_CP1254;
				break;
			case "iso-8859-15":
				encoding_ref = PDF_ISO_8859_15;
				break;
			case "iso-8859-5":
				encoding_ref = PDF_ISO_8859_5;
				break;
			case "koi8-r":
				encoding_ref = PDF_KOI8_R;
				break;
			case "iso-8859-16":
				encoding_ref = PDF_ISO_8859_16;
				break;
			case "koi8-u":
				encoding_ref = PDF_KOI8_U;
				break;
			case "symbol":
				encoding_ref = PDF_SYMBOL;
				break;
			default:
				throw "Unsupported encoding ${this.Encoding}";
		}
		if (encoding_ref) {
			this.__object(offsets, pdf, "<</Type/Encoding/Differences[$encoding_ref]>>");
			encoding = "/Encoding ${length offsets} 0 R";
		}

		if (EmbeddedFonts) {
			var keys = GetKeys(EmbeddedFonts);
			if (keys) {
				for (var i = 0; i < length EmbeddedFonts; i++) {
					var font_name = keys[i];	
					var font_data = EmbeddedFonts[i];
					if ((font_name) && (font_data)) {
						var font_id = length offsets + 3;
						var font_desc_id = length offsets + 2;
						this.__object(offsets, pdf, "<</Type/Font/SubType/TrueType $font_desc_id 0 R");
						var font_flags = 32;
						this.__object(offsets, pdf, "<</Type/FontDescriptor/FontName/$font_name/Flags $font_flags/FontFile2 $font_id 0 R");
						this.__stream(offsets, pdf, font_data);
					}
				}
			}
		}
		if (Unicode) {
			this.__stream(offsets, pdf, "/CIDInit /ProcSet findresource begin 12 dict begin begincmap /CIDSystemInfo << /Registry (Adobe) /Ordering (UCS) /Supplement 0 >> def /CMapName /Adobe-Identity-UCS def /CMapType 2 def 1 begincodespacerange <0000> <FFFF> endcodespacerange 1 beginbfrange <0000> <FFFF> <0000> endbfrange endcmap CMapName currentdict /CMap defineresource pop end end");
			var unicode_id = length offsets;
			unicode_str = "/ToUnicode $unicode_id 0 R/Encoding/Identity-H";
		}

		for (i = 0; i < length Fonts; i++) {
			var font = Fonts[i];
			if (font) {
				var reg_name = FontNames[i];
				FontOffsets[reg_name] = length offsets;
				if (unicode_str) {
					this.__object(offsets, pdf, "<</Type/Font/Subtype/Type0/BaseFont/$font$unicode_str/DescendantFonts [${length offsets + 2} 0 R]>>");
					this.__object(offsets, pdf, "<</Type/Font/Subtype/CIDFontType2/BaseFont/$font/CIDToGIDMap/Identity/CIDSystemInfo<</Registry (Adobe)/Ordering (USC)/Supplement 0>>>>");
				} else {
					if (encoding) {
						var fontname_lo = ToLower(font);
						if ((fontname_lo != "symbol") && (fontname_lo != "zapfdingbats")) {
							var widths = "";
							if (encoding_ref) {
								var arr = this.WVector(fontname_lo);
								if (arr) {
									var wvector = "";
									var start = -1;
									var is_fixed_font = false;
									var first_char = 0;
									if (typeof arr != "array") {
										is_fixed_font = true;
										first_char = 32;
									}
									for (var j = first_char; j <= 255; j++) {
										var wsize;
										if (is_fixed_font)
											wsize = arr;
										else
											wsize = arr[j];

										if ((start == -1) && (wsize))
											start = j;
										if (start >= 0) {
											if (wvector)
												wvector += " ";
											wvector += wsize * 1000;
										}
									}
									if (wvector)
										widths = "/FirstChar $start/LastChar 255/Widths [$wvector]";
								}
							}
							this.__object(offsets, pdf, "<</Type/Font/Subtype/Type1/BaseFont/$font$unicode_str$encoding$widths>>");
						} else
							this.__object(offsets, pdf, "<</Type/Font/Subtype/Type1/BaseFont/$font$unicode_str>>");
					} else
						this.__object(offsets, pdf, "<</Type/Font/Subtype/Type1/BaseFont/$font$unicode_str>>");
				}
			}
		}
	}

	__getfont(fontid) {
		if (FontOffsets)
			return FontOffsets[fontid];
		return "0";
	}

	Embed(var content, name, subtype = "") {
		if ((content) && (name))
			Blobs[length Blobs] = new PDFEmbeddedFile(content, name, subtype);
	}

	UseImage(key, var content, width, height) {
		if (content)
			Images[ToLower(key)] = new PDFImage(content, width, height);
	}

	protected __embed(offsets, var pdf) {
		var public_files = "";
		for (var i = 0; i < length Blobs; i++) {
			var blob = Blobs[i];
			if (blob) {
				var file_id = length offsets + 2;
				this.__object(offsets, pdf, "<</Type/Filespec/F(${blob.name})/EF<</F $file_id 0 R>>>> ");
				var bdata = "<</Type/EmbeddedFile/Size ${length blob.content}";
				if (blob.type)
					bdata += "/Subtype/" + StrReplace(blob.type, "/", "#2F");
				bdata += "/Length ${length blob.content}>>\r\nstream\r\n";
				bdata += blob.content;
				bdata += "\r\nendstream";
				this.__object(offsets, pdf, bdata);
				if (public_files)
					public_files += " ";
				public_files += "(${blob.name}) ${file_id - 1} 0 R";
			}
		}
		return public_files;
	}

	protected __embed_images(offsets, var pdf) {
		for (var i = 0; i < length Images; i++) {
			var image = Images[i];
			if (image) {
				var size = "";
				if (image.width)
					size += "/Width ${image.width}";
				if (image.height)
					size += "/Height ${image.height}";
				image.obj_id = length offsets + 1;
				this.__object(offsets, pdf, "<</Type/XObject/Subtype/Image/ColorSpace/DeviceRGB/Length ${length image.content}$size/Filter/DCTDecode/BitsPerComponent 8>>\r\nstream\r\n${image.content}\r\nendstream");
			}
		}
	}

	Done() {
		Pages = new [];
		delete _Footer;
		delete _Header;
	}

	__wide(str) {
		var res = "<feff";
		for (var i = 0; i < length str; i++) {
			var s = NumberToHex(ord(str[i]));
			if (length s == 1)
				s = "0" + s;
			res += "00" + s;
		}
		res += ">";
		return res;
	}

	Generate() {
		if (!Pages)
			throw "PDFGenerator.Generate: no pages defined";
		var[] offsets;
		var pdf = "%PDF-1.6\r\n";
		var title_id = 0;
		var info = "";
		if (Title)
			info += "/Title" + this.__wide(Title);
		if (Creator)
			info += "/Creator" + this.__wide(Creator);
		if (Author)
			info += "/Author" + this.__wide(Author);
		if (Subject)
			info += "/Subject" + this.__wide(Subject);
		if (Producer)
			info += "/Producer" + this.__wide(Producer);
		if (Keywords)
			info += "/Keywords" + this.__wide(Keywords);

		if (info) {
			title_id = length offsets + 1;
			this.__object(offsets, pdf, "<<$info>>");
		}
		__register_fonts(offsets, pdf);

		var public_files = __embed(offsets, pdf);
		__embed_images(offsets, pdf);
		var root = length offsets + 1;
		var pages_id = root + 1;
		var kids = "";
		var page_id = pages_id + 1;
		for (var i = 0; i < length Pages; i++) {
			var page = Pages[i];
			if (page) {
				if (kids)
					kids += " ";
				kids += "$page_id 0 R";
				page_id += 3;
			}
		}
		var attachments = "";
		if (public_files)
			attachments = "/Names<</EmbeddedFiles<</Names[$public_files]>>>>";
		this.__object(offsets, pdf, "<</Type/Catalog/Lang ${Lang}/Pages $pages_id 0 R$attachments>>/ViewerPreferences<</DisplayDocTitle true>>");
		this.__object(offsets, pdf, "<</Type/Pages/Kids[$kids]/Count ${length Pages}>>");

		for (i = 0; i < length Pages; i++) {
			page = Pages[i];
			if (page) {
				var res_data = page.__resources();
				var resources = length offsets + 2;
				var contents = length offsets + 3;
				this.__object(offsets, pdf, "<</Type/Page/Parent $pages_id 0 R/Resources $resources 0 R/MediaBox[0 0 ${page.Width} ${page.Height}]/Contents $contents 0 R>>");
				var stream = page.__render(offsets, pdf);
				this.__object(offsets, pdf, "<<$res_data>>");
				__stream(offsets, pdf, stream);
			}
		}

		var offset = __xref(offsets, pdf, root, title_id);
		pdf += "startxref\r\n";
		pdf += "" + offset + "\r\n";
		pdf += "%%EOF";
		Done();
		return pdf;
	}
}
