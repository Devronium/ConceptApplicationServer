import standard.db.mysql
import standard.lib.str
import win32.base.messages
import standard.net.socket


define TRANSACTION_ROLLBACK		0
define TRANSACTION_COMMIT		1

class MyDataRecord {
	public var DATA;
	private var ORDER;
	private var TYPE;
	public property Type { get TYPE }

	public operator = (string x) {
		this.DATA=x;
		return x;
	}

	public function ToBuffer() {
		return "" + this.DATA;
	}

	public function ToString() {
		return "" + this.DATA;
	}

	public function ToNumber() {
		return value this.DATA;
	}

	public function Value() {
		switch (this.TYPE) {
			case MYSQL_TYPE_DECIMAL:
			case MYSQL_TYPE_TINY:
			case MYSQL_TYPE_SHORT:
			case MYSQL_TYPE_LONG:
			case MYSQL_TYPE_FLOAT:
			case MYSQL_TYPE_DOUBLE:
			case MYSQL_TYPE_NULL:
			case MYSQL_TYPE_TIMESTAMP:
			case MYSQL_TYPE_LONGLONG:
			case MYSQL_TYPE_INT24:
			case MYSQL_TYPE_NEWDECIMAL:
				return value this.DATA;
		}
		return this.DATA;
	}

	function MyDataRecord(ORD,LNK,TYPE=-1) {
		this.ORDER=ORD;
		this.TYPE=TYPE;
	}
}

class MyConnection {
	protected var connection=0;
	protected var result=0;

	private var host;
	private var port;
	private var username;
	private var password;
	private var db;
	private var flags;
	private var unixsocket;

	public var _LASTERR="";

	public property Connection { get connection }
	
	function MyConnection() {
		this->connection=0;
	}

	static function InitError() {
		return MySQLError(null);
	}

	static function InitLocal(string data_dir="./data", extra_data=null, server_grp=null) {
		var arr_data=["mysqld_concept_embedded", "--datadir=$data_dir", "--key_buffer_size=32M"];
		var server_groups=["libmysqld_server", "libmysqld_client", ""];

		if (server_grp)
			server_groups=server_grp;
		if (!extra_data)
			extra_data=["--max_connections=100", "--read_buffer_size=64K", "--read_rnd_buffer_size=256K", "--sort_buffer_size=512K", "--innodb_additional_mem_pool_size=2M", "--innodb_log_buffer_size=1M", "--innodb_flush_log_at_trx_commit=1", "--innodb_buffer_pool_size=47M", "--innodb_log_file_size=24M", "--innodb_thread_concurrency=8"];

		if (extra_data)
			arr_data+=extra_data;

		return MySQLLibraryInit(arr_data, server_groups);
	}

	static function DoneLocal() {
		MySQLLibraryDone();
	}

	function OpenLocal(string db="", string username="", string password="", number flags=0) {
		this->connection=MySQLInit();
		MySQLOptions(this->connection, MYSQL_READ_DEFAULT_GROUP, "libmysqld_client");
		MySQLOptions(this->connection, MYSQL_OPT_LOCAL_INFILE, 0);
		MySQLOptions(this->connection, MYSQL_OPT_USE_EMBEDDED_CONNECTION, "");
		this->connection=MySQLConnect("", username, password, db, 0, "", 0, this->connection);
		return this->connection;
	}

	function Reopen() {
		if (this->connection)
			this.Close();

		this->connection=MySQLInit();
		this->connection=MySQLConnect(host, username, password, db, port, unixsocket, flags, this->connection);
		return this->connection;
	}

	function Open(string db, string username="", string password="", string host="localhost", number port=3306, string unix_socket="", number flags=0) {
		this->connection=MySQLInit();
		//MySQLOptions(this->connection, MYSQL_OPT_RECONNECT, true);
		this->connection=MySQLConnect(host, username, password, db, port, unix_socket, flags, this->connection);
		this->host=host;
		this->username=username;
		this->password=password;
		this->db=db;
		this->port=port;
		this->flags=flags;
		this->unixsocket=unix_socket;

		return this->connection;
	}

	function DriverOpen(string db, string username="", string password="", string host="localhost", number port=3306, string unix_socket="", flags=0) {
		return this->Open(db, username, password, host, port, unix_socket, value (""+flags));
	}

	function Close() {
		if (this->connection)
			MySQLDisconnect(this->connection);
		return this->connection=0;
	}

	function StartTransaction() {
		if (this->connection)
			MySQLAutoCommit(0,this->connection);
	}

	function EndTransaction(MODE) {
		if (MODE==TRANSACTION_ROLLBACK)
			return MySQLRollback(this->connection);
		else
			return MySQLCommit(this->connection);
	}

	private function _GetStmtElements(number res) {
		var arr=0;
		if (MySQLFetchFirst(res)) {
			var len=MySQLCountColumns(res);
			var[] _columns;
			for (var j=0;j<len;j++) {
				MySQLDescribeCol(j+1,
						var name,
						var data_type,
						var column_size,
						var decimal_digits,
						var nullable, 
						res
				);
				_columns[name]=name;
			}

			arr=new [];
			do {

				var arr2=new [];
				for (var i=0;i<len;i++) {
					arr2[_columns[i]]=MySQLColumnGet(i,res);
				}
				arr[length arr]=arr2;
				
			} while (MySQLFetchNext(res));
		}
		return arr;
	}

	function ListTables(string wildcard="") {
		var res=MySQLListTables(wildcard, connection);
		if (res) {
			var result=_GetStmtElements(res);
			MySQLFreeResult(res);
			return result;
		}
		return 0;
	}

	function ListColumns(string table,string columns="") {
		var res=MySQLListColumns(table, columns, connection);
		if (res) {
			var result=_GetStmtElements(res);
			MySQLFreeResult(res);
			return result;
		}
		return 0;
	}

	static function ListDSN() {
		return [ ];
	}

	function LastError() {
		var err=MySQLError(this->connection);
		if (_LASTERR) {
			if (err)
				err+="\n";
			err+=_LASTERR;
			_LASTERR="";
			
		}
		return err;
	}
}

class VirtualADOObject {
	protected var _DATASET;
	protected var _DATAFIELD;

	public property DataSet { set SetDataSet, get _DATASET }
	public property DataField { set SetDataField, get _DATAFIELD }

	// is pure virtual !
	public function __DataSetUpdateCommand(Sender);
	public function __DataSetNewQueryNotify(Sender);

	public function __DataSetColumnUpdate(Sender,ColumnValue,rowindex);

	protected function AddLinkedObject();
	protected function SetDataSet(dataset) {
		if (this->_DATASET) {
			if (dataset) {
				if (dataset==this->_DATASET)
					return;
			}
		}

		this->_DATASET=dataset;
		dataset->AddLinkedObject(this);
	}
	override AddLinkedObject;

	protected function SetDataField(x) {
		this->_DATAFIELD=x;
	}
}

class MyDataSet {
	protected var _CONNECTION;
	protected var _COMMANDTEXT;
        protected var result=0;
	protected var stmt=null;
        protected var data_array;

	protected var ADO_LINKED_OBJECTS;
	protected var rowindex=0;
	protected var prepared_query;
	protected var status=0;

	protected var old_rowindex=0;
	protected var _columns=0;
	protected var reset_error_flag=true;

	var[] parameters;

	public property Columns { get _columns }
	public property Connection { set SetConnection, get _CONNECTION }
	public property CommandText { set SetCommandText, get _COMMANDTEXT }
	public property FieldValues { get GetValues }
	public property PreparedQuery { get prepared_query, set SetPreparedQuery }
	public property RowIndex { get rowindex }
	public property IsUpdateQuery { get status }

	function First();


	public function SetPreparedQuery(string query) {
		this->prepared_query=query;
		this->_COMMANDTEXT="";
	}

	public function AddParameter(var parameter) {
		parameters[length parameters]=""+parameter;//"'"+this.Escape(""+parameter)+"'";
	}

	public function ClearParameters() {
		parameters=new [];
	}

	function Text(); override Text;
	function Checked(); override Checked;

	private function ForcedNotify() {
		var count=length this->ADO_LINKED_OBJECTS;
		for (var i=0;i<count;i++) {
			var object=&this->ADO_LINKED_OBJECTS[i];
			object->__DataSetNewQueryNotify(this);
		}
	}

	private function Syncronize() {
		var count=length this->ADO_LINKED_OBJECTS;
		for (var i=0;i<count;i++) {
			var object=&this->ADO_LINKED_OBJECTS[i];
			if 	((classof object=="RADOEdit") ||
				(classof object=="RADOEditComboBox") ||
				(classof object=="RADOTextView")) {
					var field=object->DataField;
					if (field!="")
						FieldValues[field]=object->Text;
			} else
			if 	((classof object=="RADOCheckButton") ||
				(classof object=="RADORadioButton")) {
					field=object->DataField;
					if (field!="")
						FieldValues[field]=""+object->Checked;
			}
		}
	}

	function ExecuteQuery(); override ExecuteQuery;
	function FetchByIndex(); override FetchByIndex;

	public function Update() {
		throw "Positional update not supported !";
	}

	public function Refresh() {
		old_rowindex=rowindex;
		this.ExecuteQuery();
	}

	public function Delete() {
		throw "Positional delete not supported !";
	}

	public function MyDataSet(MyConnection _Connection, number err_flag=true) {
		Connection=_Connection;
		this->ADO_LINKED_OBJECTS=new [];
		this->data_array=new [];
		this->rowindex=-1;
		this->_COMMANDTEXT="";
		this->prepared_query="";
		this->old_rowindex=-1;
		this->reset_error_flag=err_flag;
	}

	protected function SetConnection(MyConnection x) {
		this->_CONNECTION=x;
	}

	private function SetCommandText(string x) {
		this->_COMMANDTEXT=x;
		this->prepared_query="";
	}

	public function UpdateColumnList(Sender) {
		try {
			//var index=data_array->GetIndexByKey(Sender->DataField);
			if (!_columns)
				return 0;

			BeginUpdateSession();
			if (MySQLFetchFirst(this->result)) {
				var len=length _columns;

				var arr=new [];
				// init array 
				for (var i=0;i<len;i++)
					arr[_columns[i]]="";

				do {

					for (i=0;i<len;i++) {
						if (this->stmt)
							arr[i]=MySQLSTMTColumnGet(i,this->stmt);
						else
							arr[i]=MySQLColumnGet(i,this->result);
					}
					Sender->__DataSetColumnUpdate(this,arr,-1);
				} while (MySQLFetchNext(this->result));
				MySQLFetchFirst(this->result);
			}
			EndUpdateSession();

		} catch (var Exception) {
		}
	}

	public function AfterQueryNotify() {
		var ADO_COUNT=length this->ADO_LINKED_OBJECTS;
		var OBJECTS=this->ADO_LINKED_OBJECTS;

		for (var i=0;i<ADO_COUNT;i++) {
			var ADO_ELEMENT=&OBJECTS[i];
			ADO_ELEMENT->__DataSetNewQueryNotify(this);
		}
	}

	private function CountParameters(string str) {
		var arr=StrSplit(str, "?", true);

		var count=length arr;
		if (count<=1)
			return 0;

		return count-1;
	}

	private function DoParameters(string query) {
		var params=this.parameters;

		var arr=StrSplit(query, "?", true);
		var count=length arr;

		var res="";
		for (var i=0;i<count;i++) {
			if (i) {
				res+=params[i-1];
			}
			res+=arr[i];
		}
		this.ClearParameters();

		return res;
	}

	function ExecuteNonQuery() {
		this->rowindex=-1;
		this->old_rowindex=-1;

		delete _columns;

		if (reset_error_flag)
			this.LastError();

		var conection_target=this->_CONNECTION->Connection;
		if (!conection_target)
			return -1;

		this.CloseRead(false);

		if (prepared_query!="") {
			this.stmt=MySQLStatement(conection_target);
			var res=0;
			if (MySQLPrepare(prepared_query, stmt))
				return 0;
			var count_param=MySQLCountParams(stmt);
			var orig_param=length parameters;
			if (orig_param != count_param)
				throw "Invalid parameter count: Needed $count_param, received $orig_param.";
			if (count_param) {
				if (MySQLBindParameters(stmt, parameters))
					return 0;
			}
			res=!MySQLPreparedExecute(stmt);
			var err=MySQLSTMTError(stmt);
			this.CloseRead();
			if (err)
				this->_CONNECTION->_LASTERR=err;
			return res;
		} else
			return !MySQLQuery(this->_COMMANDTEXT,conection_target);
	}

	function ExecuteQuery(number client_processing=true) {
		this->rowindex=-1;
		delete _columns;

		if (reset_error_flag)
			this.LastError();

		this.CloseRead(false);

		var conection_target=this->_CONNECTION->Connection;
		if (!conection_target)
			return -1;

		if (prepared_query!="") {
			this.stmt=MySQLStatement(conection_target);
			var res=0;
			if (MySQLPrepare(prepared_query, stmt))
				return -1;
			var count_param=MySQLCountParams(stmt);
			var orig_param=length parameters;
			if (orig_param != count_param)
				throw "Invalid parameter count: Needed $count_param, received $orig_param.";
			if (count_param) {
				if (MySQLBindParameters(stmt, parameters))
					return -1;
			}
			if (MySQLPreparedExecute(stmt))
				return -1;
			if (MySQLBindStatement(stmt, client_processing))
				return -1;
			// store metadata
			this->result=MySQLSTMTResult(stmt);
		} else {
			if (MySQLQuery(this->_COMMANDTEXT,conection_target))
				return -1;
			if (client_processing)
				this->result=MySQLStoreResult(conection_target);
			else
				this->result=MySQLUseResult(conection_target);
		}

		if (!this->result)
			return -1;

		this->data_array=new [];
		var count=MySQLCountColumns(this->result);
		var result=this->result;

		if (count)
			_columns=new [];

		for (var i=0;i<count;i++) {

			MySQLDescribeCol(i+1,
						var name,
						var data_type,
						var column_size,
						var decimal_digits,
						var nullable, 
						result
			);
			_columns[i]=name;

			//this->data_array->Add(0,name);
			if (!this->data_array[name])
				this->data_array[name]=new MyDataRecord(i,result,data_type);
			else {
				var tmp_index=2;
				var temp_name="$name($tmp_index)";
				while (this->data_array[temp_name]) {
					temp_name="$name($tmp_index)";
					tmp_index++;
				}
				this->data_array[temp_name]=new MyDataRecord(i,result,data_type);
				_columns[i]=temp_name;
			}
		}
		this->AfterQueryNotify();

		if (old_rowindex==-1) {
			this->First();
		} else {
			rowindex=-1;
			this->FetchByIndex(old_rowindex);
			old_rowindex=-1;
		}
		return result;
	}

	function ExecuteQueryAsync(number client_processing=true) {
		this->rowindex=-1;
		delete _columns;

		if (reset_error_flag)
			this.LastError();

		this.CloseRead(false);

		var conection_target=this->_CONNECTION->Connection;
		if (!conection_target)
			return -1;

		if (prepared_query!="") {
			throw "MySQL client driver does not support async prepared queries";
		} else {
			if (MySQLSendQuery(this->_COMMANDTEXT,conection_target))
				return false;
		}
		return true;
	}

	function IsBusy() {
		var sock = MySQLFD(this->_CONNECTION->Connection);
		if (sock > 0) {
			if (SocketHasData(sock) == false)
				return true;
		}
		return false;
	}

	function GetResult(client_processing = true) {
		var conection_target=this->_CONNECTION->Connection;
		if (!conection_target)
			return -1;

		if (MySQLReadQueryResult(conection_target))
			return -1;

		if (client_processing)
			this->result=MySQLStoreResult(conection_target);
		else
			this->result=MySQLUseResult(conection_target);

		if (!this->result)
			return -1;

		this->data_array=new [];
		var count=MySQLCountColumns(this->result);
		var result=this->result;

		if (count)
			_columns=new [];

		for (var i=0;i<count;i++) {

			MySQLDescribeCol(i+1,
						var name,
						var data_type,
						var column_size,
						var decimal_digits,
						var nullable, 
						result
			);
			_columns[i]=name;

			//this->data_array->Add(0,name);
			if (!this->data_array[name])
				this->data_array[name]=new MyDataRecord(i,result,data_type);
			else {
				var tmp_index=2;
				var temp_name="$name($tmp_index)";
				while (this->data_array[temp_name]) {
					temp_name="$name($tmp_index)";
					tmp_index++;
				}
				this->data_array[temp_name]=new MyDataRecord(i,result,data_type);
				_columns[i]=temp_name;
			}
		}
		this->AfterQueryNotify();

		if (old_rowindex==-1) {
			this->First();
		} else {
			rowindex=-1;
			this->FetchByIndex(old_rowindex);
			old_rowindex=-1;
		}
		return result;
	}

	public function CountRows() {
		if (this->result)
			return MySQLCountRows(this->result);
		return 0;
	}

	public function Escape(string mystr) {
		return MySQLEscape(mystr, this->_CONNECTION.Connection);
	}

	public function FetchByIndex(index) {
		var read=0;
		if (!this->result)
			return 0;

		if (index==0) {
			read=MySQLFetchFirst(this->result);
		} else
		if (this->rowindex==index-1)
			read=MySQLFetchNext(this->result);
		else
			read=MySQLFetchAbsolute(index+1,this->result);

		if (!read) {
			//this->CloseRead();
			return 0;
		}
		this->rowindex=index;

		var array=this->data_array;
		var count=length array;

		for (var i=0;i<count;i++) {
			if (this->stmt)
				var str=MySQLSTMTColumnGet(i,this->stmt);
			else
				str=MySQLColumnGet(i,this->result);
			//array->ChangeValueByIndex(i,str);
			array[i]=str;
		}

		if (read) {
			var ADO_COUNT=length this->ADO_LINKED_OBJECTS;
			var OBJECTS=this->ADO_LINKED_OBJECTS;
			BeginUpdateSession();
			for (i=0;i<ADO_COUNT;i++) {
				var ADO_ELEMENT=&OBJECTS[i];//->GetElementByIndex(i);
				ADO_ELEMENT->__DataSetUpdateCommand(this);
			}
			EndUpdateSession();
		}
		
		return read;
	}

	public function Next() {
		return FetchByIndex(rowindex+1);
	}

	public function Prev() {
		return FetchByIndex(rowindex-1);
	}

	public function Current() {
		return FetchByIndex(rowindex);
	}

	override First;
	public function First() {
		return FetchByIndex(0);
	}

	public function FetchRow() {
		if (this.result)
			return MySQLFetchRow(this.result);
		else
			throw "No results to fetch rows from";
	}

	public function FetchForward() {
		if (stmt) {
			var res=MySQLFetchForward(stmt);
			if (!res)
				return false;

			var array=this->data_array;
			var count=length array;
			for (var i=0;i<count;i++) {
				var str=MySQLSTMTColumnGet(i,this->stmt);
				array[i]=str;
			}

			return true;
		} else {
			if (!this.result)
				return false;


			res=MySQLFetchRow(this.result);
			if (res) {
				array=this->data_array;
				count=length array;
				for (i=0;i<count;i++) {
					array[i]=res[i];
				}
				return true;
			}
		}
		return false;
	}

	public function AddLinkedObject(Object) {
		this->ADO_LINKED_OBJECTS[length this->ADO_LINKED_OBJECTS]=Object;
		Object->__DataSetNewQueryNotify(this);
		Object->__DataSetUpdateCommand(this);
	}

	public function RemoveLinkedObject(Name) {
		//this->ADO_LINKED_OBJECTS->DeleteElementByKey(Name);
		var arr=this->ADO_LINKED_OBJECTS;
		arr[Name]=null;

		var []arr2;

		var len=length arr;
		for (var i=0;i<len;i++) {
			if (arr[i])
				arr2[length arr2]=arr[i];
		}

		this->ADO_LINKED_OBJECTS=arr2;
	}

	function GetValues() {
		var array=this->data_array;
		return array;
	}

	function CloseRead(number clear_parameters=true) {
		if (this->result) {
			MySQLFreeResult(this->result);
			this->result=0;
		}
		if (this.stmt) {
			MySQLFreeQuery(stmt);
			this.stmt=null;
		}
		if (clear_parameters)
			this.ClearParameters();
		this->old_rowindex=-1;
	}

	function finalize() {
		if (this->result)
			MySQLFreeResult(this->result);
	}

	function LastError() {
		var err="";
		if (stmt)
			err=MySQLSTMTError(stmt);
		if (!err)
			err=this->_CONNECTION->_LASTERR;

		this->_CONNECTION->_LASTERR="";

		if (err)
			return err;
		return this._CONNECTION.LastError();
	}
}