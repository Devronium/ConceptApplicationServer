import standard.lang.serialize
import standard.lib.str
import standard.lib.cripto
import standard.lib.vad2

include TCPSocket.con

class RemoteGPUClient {
	static stt(host, port, hmac_key, var buffer, codec = 8, lang = "", sample_rate = 8000, voice_ms = -1, timeout = 4000, max_size = 48000, var error = "") {
		try {
			var client = new TCPSocket();
			client.SetOption(SOL_SOCKET, SO_RCVTIMEO, timeout);
			client.SetOption(SOL_SOCKET, SO_SNDTIMEO, timeout);
			client.ConnectTimeout = 1000;

			error = "";

			if (!client.Connect(host, port)) {
				console.warn(LOG_THIS, "error connecting to $host:$port");
				error = "error connecting to service";
				console.warn(LOG_THIS, error);
				return "";
			}

			lang = ToLower(lang);
			if (lang == "auto")
				lang = "";

			var[] obj;
			obj["lang"] = lang;
			obj["codec"] = codec;
			obj["buffer"] = buffer;
			obj["sampleRate"] = sample_rate;
			if (voice_ms >= 0)
				obj["voice"] = voice_ms;
			obj["timestamp"] = Date.now();
			hmac_sha256(hmac_key, obj["buffer"] + obj["lang"] + obj["timestamp"], obj["auth"]);

			var buf = BinarizeObject(obj);
			var socket_buffer = pack("U32", length buf) + buf;

			var start = Date.now();
			do {
				var sent = client.Write(socket_buffer);
				if (sent <= 0)
					throw "error sending buffer";

				if (sent < length socket_buffer)
					socket_buffer = SubStr(socket_buffer, sent);
				else
					break;
				if ((Date.now() - start)  > timeout) {
					console.warn(LOG_THIS, "write timeout to $host:$port");
					error = "write timeout";
					client.Close(true);
					return "";
				}
			} while (socket_buffer);

			var arr = unpack("U32", client.Read(4));
			var size = arr[0];

			client.SetOption(SOL_SOCKET, SO_RCVTIMEO, timeout);

			if ((size > 0) && (size <= max_size)) {
				start = Date.now();
				var read_buffer = "";
				while (length read_buffer < max_size) {
					var data = client.Read(size - length read_buffer);
					if (!data)
						break;
					read_buffer += data;
					if ((Date.now() - start)  > timeout)
						break;
				}
				if (!read_buffer)
					throw "invalid buffer received";
				obj = UnBinarizeObject(read_buffer);
				if ((!obj) || (typeof obj != "array"))
					throw "invalid buffer";

				client.Close(true);
				return (obj["text"] ?? "");
			}
			error = "buffer too big ($size)";
			console.warn(LOG_THIS, error);
		} catch (var exc) {
			error = exc;
			console.warn(LOG_THIS, exc);
		}
		client.Close(true);
		return "";
	}
}

class RemoteGPUStream {
	protected var audio_buffer = "";
	protected var last_vad_ms = 0;
	protected var vadInterval = 0;
	var pause_until = 0;

	public var BufferTimeout = 8000;
	public var MinBufferSize = 2000;

	var modelSampleRate = 16000;
	var _frame_size;
	var _frame_size_ms = 20;

	var decodedText = "";

	var host = "";
	var port = 0;
	var key = "";
	var codec = 8;
	var lang = "";

	var padding_buffer = "";

	var alternateHost = "";
	var alternatePort = 0;
	var alternateKey = "";

	var _handle = true;

	var _timeout_count = 0;

	RemoteGPUStream(host, port, key, lang, codec = 8, modelSampleRate = 16000, use_padding = true) {
		this.modelSampleRate = modelSampleRate;
		_frame_size = _frame_size_ms * modelSampleRate / 1000 * 2;

		this.key = key;
		this.host = host;
		this.port = port;
		this.lang = lang;
		this.codec = codec;

		if (use_padding) {
			var max_padding = modelSampleRate * 1.5;
			if ((codec == 8) || (codec == 0)) {
				while (length padding_buffer < max_padding)
					padding_buffer += "\xD5";
			} else {
				max_padding *= 2;
				while (length padding_buffer < max_padding)
					padding_buffer += "\x00\x00";
			}
		}
	}

	feed(vad, var full_buffer, before_decode_callback = null, before_decode_callback_data = null, force_decode = false) {
		audio_buffer += full_buffer;

		if (pause_until) {
			if (pause_until > Date.now())
				return;
			pause_until = 0;
		}

		var buf_size_ms = length audio_buffer / (modelSampleRate * 2) * 1000;
		if (!vadInterval)
			vadInterval = MinBufferSize;

		var timeout = (buf_size_ms > BufferTimeout);
		if (force_decode)
			timeout = true;

		if ((audio_buffer) && (((buf_size_ms - last_vad_ms) >= vadInterval) || (timeout))) {
			var new_data_ms = 0;
			var new_data = vad_process(vad, audio_buffer, var info);
			if ((new_data) && (info)) {
				new_data_ms = length new_data / (modelSampleRate * 2) * 1000;
				var silence_ms = (length audio_buffer - info[length info - 1]["end"]) / (modelSampleRate * 2) * 1000;

				if (!timeout) {
					if (silence_ms < 1746)
						new_data = "";
				}
			} else
			if ((!_timeout_count) && (buf_size_ms > (BufferTimeout / 2))) {
				timeout = true;
				_timeout_count ++;
			}

			last_vad_ms = buf_size_ms;
			if ((new_data) || (timeout)) {
				if (before_decode_callback)
					before_decode_callback(before_decode_callback_data);
				var error = "";

				audio_buffer = audio_buffer + padding_buffer;

				var text = RemoteGPUClient::stt(this.host, this.port, this.key, audio_buffer, this.codec, this.lang, this.modelSampleRate, /* new_data_ms */ 110, 4000, 48000, error);

				if ((!text) && (error) && (this.alternateHost))
					text = RemoteGPUClient::stt(alternateHost, this.alternatePort ?? this.port, this.alternateKey ?? this.key, audio_buffer, this.codec, this.lang, this.modelSampleRate, new_data_ms, 4000, 48000, error);

				if ((!text) && (error))
				 	text = "($error)";
				text = trim(text);
				if ((text) && (text[0] == "-"))
					text = trim(SubStr(text, 1));
					
				if (decodedText)
					decodedText += " ";
				decodedText += text;

				audio_buffer = "";
				last_vad_ms = 0;
				_timeout_count = 0;

				vadInterval = MinBufferSize;
			} else {
				vadInterval = 1000;
			}
		}
	}

	pause(ms) {
		if (ms > 0)
			pause_until = Date.now() + ms;
		else
			pause_until = 0;
	}

	decode() {
		return decodedText;
	}

	finish() {
		var text = decodedText;
		_timeout_count = 0;
		audio_buffer = "";
		decodedText = "";
		last_vad_ms = 0;
		pause_until = 0;
		vadInterval = 0;
		return text;
	}

	reset() {
		this.finish();
	}

	close() {
		_timeout_count = 0;
		pause_until = 0;
		audio_buffer = "";
		last_vad_ms = 0;
		decodedText = "";
	}
}
