include BinFile.con
include TinDBOid.con

class TinBase {
	protected var DB = "";
	protected var[] tables;
	public property Use { get DB, set SetDB }
	public var NoIndexCached = false;
	public var Mode = "r+b";
	public var DebugPath;
	public var Log;

	TinBase(dbname = "default", JournalLog = null) {
		Use = dbname;
		Log = JournalLog;
	}

	Flush(flush_index = true) {
		for (var i = 0; i < length tables; i++) {
			var t = tables[i];
			if (t) {
				t.FlushDB(flush_index);
				t.ResetCache();
			}
		}
	}

	static Lock(name, write = false) {
		if (name) {
			if (write)
				return WorkerSharedRWLock(name, RWLOCK_WRITE);
			return WorkerSharedRWLock(name, RWLOCK_READ);
		}
		return false;
	}

	static Unlock(name, write = false) {
		if (name) {
			if (write)
				return WorkerSharedRWLock(name, RWUNLOCK_WRITE);
			return WorkerSharedRWLock(name, RWUNLOCK_READ);
		}
		return false;
	}

	static Generator(db, name, increment = 1) {
		if ((Pos(name, "..") > 0) || (Pos(name, "/") > 0) || (Pos(name, "\\") > 0) || (!name) || (name == ".") || (Pos(name, " ") > 0) || (Pos(name, "\t") > 0))
			throw "Invalid generator name $name\n";

		var gen_name = "$db/$name.gen";

		var hFile = fopen(gen_name, "r+");
		if (!hFile) {
			WriteFile("1", gen_name);
			hFile = fopen(gen_name, "r+");
		}
		if (!hFile)
			throw "Error creating or opening data for generator '$name'";

		var err = false;
		var gen_value;
		TinBase::Lock("g:$name", true);
		fread(var fdata, 1, 0xFF, hFile);
		if (fdata) {
			var data = value fdata;
			if (!data)
				data = 1;
			gen_value = data;
			data += increment;
			fseek(hFile, 0, SEEK_SET);
			ftruncate(hFile, 0);
			fdata = "" + data;
			if (fwrite(fdata, 1, length fdata, hFile) != length fdata)
				err = true;
		} else
			err = true;
		fclose(hFile);
		TinBase::Unlock("g:$name", true);

		if (err)
			throw "I/O error for generator '$name'";

		return gen_value;
	}

	SetDB(string db) {
		if (!db)
			throw "Invalid database selected\n";
		_mkdir(db);
		this.DB = db;
	}

	Collection(string name, index_only = false) {
		if (!DB)
			throw "No database selected";
		var key = "${DB}/$name";
		if (NoIndexCached) { 
			var t = new BinFile(key, this.Mode);
			if (Log)
				t.Journal = Log;
			if (DebugPath) {
				var path = "$key.debug";
				_mkdir(path);
				t.DebugPath = path;
			}
			if ((!index_only) && (this.Mode != "r") && (this.Mode != "rb")) {
				if (!t.Open())
					throw "Cannot open $key\n";
			}
		} else {
			t = tables[key];
			if ((!t) || (!t.Handle)) {
				t = new BinFile(key, this.Mode);
				if (Log)
					t.Journal = Log;
				if (DebugPath) {
					path = "$key.debug";
					_mkdir(path);
					t.DebugPath = path;
				}
				if ((!index_only) && (this.Mode != "r") && (this.Mode != "rb")) {
					if (!t.Open())
						throw "Cannot open $key\n";
				}
				tables[key] = t;
			}
		}
		return t;
	}

	StoreHandler(string code) {
		TinBase::Lock(":handler", true);
		var wr = WriteFile(code, "${DB}/handler.con");
		TinBase::Unlock(":handler", true);
		return wr;
	}

	StoreJS(string code) {
		TinBase::Lock(":js", true);
		var wr = WriteFile(code, "${DB}/code.js");
		TinBase::Unlock(":js", true);
		return wr;
	}

	ReadHandler() {
		TinBase::Lock(":handler");
		var handler = ReadFile("${DB}/handler.con");
		TinBase::Unlock(":handler");
		return handler;
	}

	ReadJS() {
		TinBase::Lock(":js");
		var handler = ReadFile("${DB}/code.js");
		TinBase::Unlock(":js");
		return handler;
	}

	StoreTriggers(array _triggers) {
		TinBase::Lock(":triggers", true);
		var wr = WriteFile(BinarizeObject(_triggers), "${DB}/triggers.bin");
		TinBase::Unlock(":triggers", true);
		return wr;
	}

	ReadTriggers() {
		TinBase::Lock(":triggers");
		var data = ReadFile("${DB}/triggers.bin");
		TinBase::Unlock(":triggers");
		if (data)
			return UnBinarizeObject(data);
		return null;
	}

	operator[](string name) {
		return Collection(name);
	}

	Reset() {
		this.Flush();
		for (var i = 0; i < length tables; i++) {
			var t = tables[i];
			if (t)
				t.Reset();
		}
		tables = new [];
	}
}
