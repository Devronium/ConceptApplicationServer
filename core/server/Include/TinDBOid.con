import standard.lang.serialize
import standard.lib.str
import standard.C.time

class TinDBOid {
	static create(serverid, workerid, counter) {
		return pack("U32U8U16U8U16", time(), serverid / 0x1000000, serverid % 0x1000000, workerid, counter);
	}

	static info(oid) {
		var arr = unpack("U32U8U16U8U16", oid);
		return ["time" => arr[0], "server" => arr[1] * 0x1000000 + arr[2], "worker" => arr[3], "counter" => arr[4]];
	}

	static hex(oid) {
		return StringToHex(oid);
	}

	static oid(oid) {
		return HexToString(oid);
	}

	static oidtostr(o) {
		if (typeof o == "array") {
			if (IsSet(o, '$oid')) {
				var oid = o['$oid'];
				if ((oid) && (typeof oid == "string"))
					o['$oid'] = TinDBOid::hex(oid);
			}
			if (IsSet(o, '$v')) {
				oid = o['$v'];
				if ((oid) && (typeof oid == "string"))
					o['$v'] = TinDBOid::hex(oid);
			}
		}
		return o;
	}

	static strtooid(o) {
		if (typeof o == "array") {
			if (IsSet(o, '$oid')) {
				var oid = o['$oid'];
				if ((oid) && (typeof oid == "string"))
					o['$oid'] = TinDBOid::oid(oid);
			}
			if (IsSet(o, '$v')) {
				oid = o['$v'];
				if ((oid) && (typeof oid == "string"))
					o['$v'] = TinDBOid::oid(oid);
			}
		}
		return o;
	}

	static oidtostr2(arr) {
		if (typeof arr == "array") {
			for (var i = 0; i < length arr; i++)
				TinDBOid::oidtostr(arr[i]);
		}
		return arr;
	}

	static strtooid2(arr) {
		if (typeof arr == "array") {
			for (var i = 0; i < length arr; i++)
				TinDBOid::strtooid2(arr[i]);
		}
		return arr;
	}
}
