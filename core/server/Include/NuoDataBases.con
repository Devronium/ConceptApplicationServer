import standard.db.nuo
import standard.lib.str
import win32.base.messages


define TRANSACTION_ROLLBACK		0
define TRANSACTION_COMMIT		1

class NuoDataRecord {
	public var DATA;
	private var ORDER;
	//private var LINK;

	public operator = (string x) {
		this.DATA=x;
		return x;
	}

	public function ToBuffer() {
		return this.DATA;
	}

	public function ToString() {
		return String(this.DATA);
	}

	public function ToNumber() {
		return value this.DATA;
	}

	public function Value() {
		return this.DATA;
	}

	function XMLSerialized() {
		var XMLData;
		if (typeof DATA=="class")
			XMLData = "<ADODataRecord>" + this->DATA->XMLSerialized() + "\n</ADODataRecord>";
		else
			XMLData = "<ADODataRecord>" + this->DATA + "</ADODataRecord>";

		return XMLData;
	}

	function NuoDataRecord(ORD,LNK) {
		this.ORDER=ORD;
		//this.LINK=LNK;
	}
}


class NuoConnection {
	protected var connection=0;
	protected var result=0;

	private var host;
	private var username;
	private var password;
	private var schema;
	private var db;

	public property Connection { get connection }
	public property AutoCommit { get GetAutoCommit, set SetAutoCommit }
	public property IsolationLevel { get GetIsolationLevel, set SetIsolationLevel }
	
	function NuoConnection() {
		this->connection=0;
	}

	static function InitError() {
		return NuoError();
	}

	function Info() {
		if (this->connection)
			return NuoInfo(this->connection);
		return [ ];
	}

	function Reopen() {
		if (this->connection)
			this.Close();

		this->connection=NuoConnect(db+"@"+host, ["user" => username, "password" => password, "schema" => schema]);
		return this->connection;
	}

	function Open(string db, string username="", string password="", string host="localhost", schema="hello", create=false) {
		if (!db)
			db="system";

		this->connection=NuoConnect(db+"@"+host, ["user" => username, "password" => password, "schema" => schema]);

		if ((!this->connection) && (create) && (db!="system")) {
			this->connection=NuoConnectCreate(host, db, ["user" => username, "password" => password, "schema" => schema]);
			if (this->connection)
				NuoDisconnect(this->connection);

			this->connection=NuoConnect(db+"@"+host, ["user" => username, "password" => password, "schema" => schema]);
		}
		this->host=host;
		this->username=username;
		this->password=password;
		this->db=db;
		this->schema=schema;
	
		if (this->connection) {
			NuoSetAutoCommit(this->connection, false);
			NuoSetIsolationLevel(this->connection, TRANSACTION_READ_COMMITTED);
		}

		return this->connection;
	}

	function DriverOpen(string db, string username="", string password="", string host="localhost", string schema="hello", create=true) {
		return this->Open(db, username, password, host, schema, create);
	}

	function Close() {
		if (this->connection)
			NuoDisconnect(this->connection);
		return this->connection=0;
	}

	function SetAutoCommit(number on) {
		if (this->connection) {
			NuoSetAutoCommit(this->connection, on);
		}
		return on;
	}

	function GetAutoCommit() {
		if (this->connection)
			return NuoGetAutoCommit(this->connection);
		return -1;
	}

	function SetIsolationLevel(number level) {
		if (this->connection) {
			NuoSetIsolationLevel(this->connection, level);
		}
		return level;
	}

	function GetIsolationLevel() {
		if (this->connection)
			return NuoGetIsolationLevel(this->connection);
		return -1;
	}

	function StartTransaction() {
		if (this->connection) {
			NuoSetAutoCommit(this->connection, 0);
			NuoPrepareTransaction(this->connection);
		}
	}

	function EndTransaction(MODE) {
		if (MODE==TRANSACTION_ROLLBACK)
			return NuoRollback(this->connection);
		else
			return NuoCommit(this->connection);
	}

	private function _GetStmtElements(number res) {
		var[] result;
		if (res)
			result=NuoValues(res);
	}

	function ListTables(string wildcard="") {
		return [ ];
	}

	function ListColumns(string table,string columns="") {
		return [ ];
	}

	static function ListDSN() {
		return [ ];
	}

	function LastError() {
		return NuoError();
	}
}


class VirtualNuoObject {
	protected var _DATASET;
	protected var _DATAFIELD;

	public property DataSet { set SetDataSet, get _DATASET }
	public property DataField { set SetDataField, get _DATAFIELD }

	// is pure virtual !
	public function __DataSetUpdateCommand(Sender);
	public function __DataSetNewQueryNotify(Sender);

	public function __DataSetColumnUpdate(Sender,ColumnValue,rowindex);

	protected function AddLinkedObject();
	protected function SetDataSet(dataset) {
		if (this->_DATASET) {
			if (dataset) {
				if (dataset==this->_DATASET)
					return;
			}
		}

		this->_DATASET=dataset;
		dataset->AddLinkedObject(this);
	}
	override AddLinkedObject;

	protected function SetDataField(x) {
		this->_DATAFIELD=x;
	}
}

class NuoDataSet {
	protected var _CONNECTION;
	protected var _COMMANDTEXT;
        protected var result=0;
	protected var stmt=null;
        protected var data_array;

	protected var ADO_LINKED_OBJECTS;
	protected var rowindex=0;
	protected var prepared_query;
	protected var status=0;

	protected var old_rowindex=0;
	protected var _columns=0;
	protected var reset_error_flag=true;

	var[] parameters;

	public property Columns { get _columns }
	public property Connection { set SetConnection, get _CONNECTION }
	public property CommandText { set SetCommandText, get _COMMANDTEXT }
	public property FieldValues { get GetValues }
	public property PreparedQuery { get prepared_query, set SetPreparedQuery }
	public property RowIndex { get rowindex }
	public property IsUpdateQuery { get status }
	public property ResultHandle { get result }
	public property StatementHandle { get stmt }

	function First();


	public function SetPreparedQuery(string query) {
		this->prepared_query=query;
		this->_COMMANDTEXT="";
	}

	public function AddParameter(var parameter) {
		parameters[length parameters]=""+parameter;
	}

	public function ClearParameters() {
		parameters=new [];
	}

	function Text(); override Text;
	function Checked(); override Checked;

	private function ForcedNotify() {
		var count=length this->ADO_LINKED_OBJECTS;
		for (var i=0;i<count;i++) {
			var object=&this->ADO_LINKED_OBJECTS[i];
			object->__DataSetNewQueryNotify(this);
		}
	}

	private function Syncronize() {
		var count=length this->ADO_LINKED_OBJECTS;
		for (var i=0;i<count;i++) {
			var object=&this->ADO_LINKED_OBJECTS[i];
			if 	((classof object=="RADOEdit") ||
				(classof object=="RADOEditComboBox") ||
				(classof object=="RADOTextView")) {
					var field=object->DataField;
					if (field!="")
						FieldValues[field]=object->Text;
			} else
			if 	((classof object=="RADOCheckButton") ||
				(classof object=="RADORadioButton")) {
					field=object->DataField;
					if (field!="")
						FieldValues[field]=""+object->Checked;
			}
		}
	}

	function ExecuteQuery(); override ExecuteQuery;
	function FetchByIndex(); override FetchByIndex;

	public function Update() {
		throw "Positional update not supported !";
	}

	public function Refresh() {
		old_rowindex=rowindex;
		this.ExecuteQuery();
	}

	public function Delete() {
		throw "Positional delete not supported !";
	}

	public function NuoDataSet(NuoConnection _Connection, number err_flag=true) {
		Connection=_Connection;
		this->ADO_LINKED_OBJECTS=new [];
		this->data_array=new [];
		this->rowindex=-1;
		this->_COMMANDTEXT="";
		this->prepared_query="";
		this->old_rowindex=-1;
		this->reset_error_flag=err_flag;
	}

	protected function SetConnection(NuoConnection x) {
		this->_CONNECTION=x;
	}

	private function SetCommandText(string x) {
		this->_COMMANDTEXT=x;
		this->prepared_query="";
	}

	public function ColumnInfo(number index) {
		if (!this->result)
			return [ ];
		return NuoColumnInfo(this->result, index);
	}

	public function CountColumns() {
		if (!this->result)
			return 0;
		return NuoCountColumns(this->result);
	}

	public function UpdateColumnList(Sender) {
		try {
			if (!this->result)
				return 0;

			BeginUpdateSession();
			if (NuoFirst(this->result)) {
				do {
					var arr=NuoValues(this->result);
					Sender->__DataSetColumnUpdate(this,arr,-1);
				} while (NuoNext(this->result));
				NuoFirst(this->result);
			}
			EndUpdateSession();

		} catch (var Exception) {
		}
	}

	public function AfterQueryNotify() {
		var ADO_COUNT=length this->ADO_LINKED_OBJECTS;
		var OBJECTS=this->ADO_LINKED_OBJECTS;

		for (var i=0;i<ADO_COUNT;i++) {
			var ADO_ELEMENT=&OBJECTS[i];
			ADO_ELEMENT->__DataSetNewQueryNotify(this);
		}
	}

	private function CountParameters(string str) {
		var arr=StrSplit(str, "?", true);

		var count=length arr;
		if (count<=1)
			return 0;

		return count-1;
	}

	private function DoParameters(string query) {
		var params=this.parameters;

		var arr=StrSplit(query, "?", true);
		var count=length arr;

		var res="";
		for (var i=0;i<count;i++) {
			if (i) {
				res+=params[i-1];
			}
			res+=arr[i];
		}
		this.ClearParameters();

		return res;
	}

	function ExecuteNonQuery() {
		this->rowindex=-1;
		this->old_rowindex=-1;

		delete _columns;

		if (reset_error_flag)
			this.LastError();

		var conection_target=this->_CONNECTION->Connection;
		if (!conection_target)
			return -1;

		this.CloseRead(false);

		if (prepared_query!="") {
			this.stmt=NuoPrepared(prepared_query, conection_target);
			if (!this.stmt)
				return 0;

			var res=0;
			var count_param=NuoParameterCount(this.stmt);
			var orig_param=length parameters;
			if (orig_param != count_param)
				throw "Invalid parameter count: Needed $count_param, received $orig_param.";

			if (count_param) {
				for (var i=0;i<count_param;i++) {
					if (!NuoSetParameter(stmt, i+1, parameters[i]))
						return 0;
				}
			}
			result=NuoExecute(stmt);
		} else
			result=NuoQuery(this->_COMMANDTEXT,conection_target);

		var err=NuoError();
		this.CloseRead();

		if (err)
			return 0;
		return 1;
	}

	function ExecuteQuery(number dummy=true) {
		this->rowindex=-1;
		delete _columns;

		if (reset_error_flag)
			this.LastError();

		this.CloseRead(false);

		var conection_target=this->_CONNECTION->Connection;
		if (!conection_target)
			return -1;

		if (prepared_query!="") {
			this.stmt=NuoPrepared(prepared_query, conection_target);
			if (!this.stmt)
				return -1;

			var count_param=NuoParameterCount(this.stmt);
			var orig_param=length parameters;
			if (orig_param != count_param)
				throw "Invalid parameter count: Needed $count_param, received $orig_param.";

			if (count_param) {
				for (var i=0;i<count_param;i++) {
					if (!NuoSetParameter(stmt, i+1, parameters[i]))
						return 0;
				}
			}
			this->result=NuoExecute(stmt);

			if (!this->result) {
				NuoFinish(this->stmt);
				this->stmt=0;
			}
		} else {
			this->result=NuoQuery(this->_COMMANDTEXT,conection_target);

		}

		if (!this->result)
			return -1;

		this->data_array=new [];
		var count=NuoCountColumns(this->result);
		var result=this->result;

		if (count)
			_columns=new [];

		for (i=0;i<count;i++) {

			var cinfo=NuoColumnInfo(result, i+1);
			var name="";
			if (cinfo)
				name=ToLower(cinfo["ColumnName"]);

			_columns[i]=name;

			if (!this->data_array[name])
				this->data_array[name]=new NuoDataRecord(i,result);
			else {
				var tmp_index=2;
				var temp_name="$name($tmp_index)";
				while (this->data_array[temp_name]) {
					temp_name="$name($tmp_index)";
					tmp_index++;
				}
				this->data_array[temp_name]=new NuoDataRecord(i,result);
				_columns[i]=temp_name;
			}
		}
		this->AfterQueryNotify();

		if (old_rowindex==-1) {
			//this->First();
			rowindex=-1;
		} else {
			rowindex=-1;
			this->FetchByIndex(old_rowindex);
			old_rowindex=-1;
		}
		return result;
	}

	public function CountRows() {
		if (this->stmt)
			return NuoCountRows(this->stmt);
		return 0;
	}

	public function Analyze(flags) {
		if (this->stmt)
			return NuoAnalyze(this->stmt, flags);
		return "";
	}

	public function FetchByIndex(index) {
		var read=0;

		if (!this->result)
			return 0;

		if (index==0) {
			read=NuoFirst(this->result);
		} else
		if (this->rowindex==index-1)
			read=NuoNext(this->result);
		else
			read=NuoAbsolute(this->result, index+1);

		if (!read) {

			//this->CloseRead();
			return 0;
		}
		this->rowindex=index;

		var array=this->data_array;
		var count=length array;

		for (var i=0;i<count;i++) {
			var str=NuoValue(this->result, i+1);
			array[i]=str;
		}

		if (read) {
			var ADO_COUNT=length this->ADO_LINKED_OBJECTS;
			var OBJECTS=this->ADO_LINKED_OBJECTS;
			BeginUpdateSession();
			for (i=0;i<ADO_COUNT;i++) {
				var ADO_ELEMENT=&OBJECTS[i];//->GetElementByIndex(i);
				ADO_ELEMENT->__DataSetUpdateCommand(this);
			}
			EndUpdateSession();
		}
		
		return read;
	}

	public function Next() {
		return FetchByIndex(rowindex+1);
	}

	public function Prev() {
		return FetchByIndex(rowindex-1);
	}

	public function Current() {
		return FetchByIndex(rowindex);
	}

	override First;
	public function First() {
		return FetchByIndex(0);
	}

	public function FetchRow() {
		if (this.result)
			return FetchByIndex(rowindex);
		else
			throw "No results to fetch rows from";
	}

	public function FetchForward() {
		if (result) {
			var res=NuoNext(this->result);
			if (!res)
				return false;

			var array=this->data_array;
			var count=length array;
			for (var i=0;i<count;i++) {
				var str=NuoValue(this->result, i+1);
				array[i]=str;
			}

			return true;
		}
		return false;
	}

	public function AddLinkedObject(Object) {
		this->ADO_LINKED_OBJECTS[length this->ADO_LINKED_OBJECTS]=Object;
		Object->__DataSetNewQueryNotify(this);
		Object->__DataSetUpdateCommand(this);
	}

	public function RemoveLinkedObject(Name) {
		//this->ADO_LINKED_OBJECTS->DeleteElementByKey(Name);
		var arr=this->ADO_LINKED_OBJECTS;
		arr[Name]=null;

		var []arr2;

		var len=length arr;
		for (var i=0;i<len;i++) {
			if (arr[i])
				arr2[length arr2]=arr[i];
		}

		this->ADO_LINKED_OBJECTS=arr2;
	}

	function GetValues() {
		var array=this->data_array;
		return array;
	}

	function CloseRead(number clear_parameters=true) {
		if (!this->_CONNECTION.Connection)
			return 0;

		if (this->result) {
			NuoFreeResult(this->result);
			this->result=0;
		}
		if (this.stmt) {
			NuoFinish(stmt);
			this.stmt=null;
		}
		if (clear_parameters)
			this.ClearParameters();
		this->old_rowindex=-1;
	}

	function finalize() {
		if (!this->_CONNECTION.Connection)
			return 0;
		if (this.stmt) {
			NuoFinish(stmt);
			this.stmt=null;
		} else
		if (this->result) {
			NuoFreeResult(this->result);
			this->result=0;
		}
	}

	function LastError() {
		return NuoError();
	}
}
