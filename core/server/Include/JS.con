import standard.lang.js

// 128M
define DEFAULT_JS_MAX_RUNTIME_SIZE	134217728

class JS {
	protected var runtime;
	protected var context;
	protected var global;
	protected var error_delegate;

	public var LastError;
	public var UserData;

	JS(error_handler = null, size = DEFAULT_JS_MAX_RUNTIME_SIZE, stack_chunk_size = 8192) {
  		if ((!(runtime = JSNewRuntime (size)))
       			|| (!(context = JSNewContext (runtime, stack_chunk_size)))
       			|| (!(global  = JSNewObject  (context, null, null, null)))) 
			return;
		if (!JSInitStandardClasses(context, global)) {
			this.done();
			return;
		}

		JSSetErrorReporter(context, this.__error_callback);

		if (error_handler)
			this.error(error_handler);
	}

	__error_callback(ctx, message, struct) {
		LastError = message;
		if (struct) {
			LastError += "(${struct["filename"]}:${struct["lineno"]})";
		}
		if (error_delegate)
			return error_delegate(this, message, struct);
	}

	reset(size = DEFAULT_JS_MAX_RUNTIME_SIZE, stack_chunk_size = 8192) {
		this.done();

  		if ((!(runtime = JSNewRuntime (size)))
       			|| (!(context = JSNewContext (runtime, stack_chunk_size)))
       			|| (!(global  = JSNewObject  (context, null, null, null)))) 
			return false;
		if (!JSInitStandardClasses(context, global)) {
			this.done();
			return false;
		}

		JSSetErrorReporter(context, this.__error_callback);
		return true;
	}

	variable(name, val) {
		return JSObjectKey(context, global, name, val);
	}

	error(delegate error_handler) {
		this.error_delegate = error_handler;
	}

	allowrecursive(recursive = true) {
		JSRecursive(context, recursive);
	}

	script(var code, code_name = "code.js") {
		LastError = "";
		if (!JSEvaluateScript(context, global, code, code_name, 1, var rval)) {
			if (this.LastError)
				throw "" + this.LastError;
			throw "Error executing script ($code_name)";
		}
		return rval;
	}

	call(string function_name, parameters = null) {
		if (!parameters)
			parameters = new [];
		return JSCall(context, global, function_name, parameters);
	}

	wrap(delegate, string js_name) {
		return JSWrap(context, global, delegate, js_name);
	}

	gc() {
		JSGC(context, runtime);
	}

	protected done() {
		if (context) {
	  		JSDestroyContext(context);
			context = null;
		}
		if (runtime) {
	  		JSDestroyRuntime(runtime);
			runtime = null;
		}
	}

	finalize() {
		this.done();
	}

	static eval(string code) {
		return JSEval(code);
	}
}
