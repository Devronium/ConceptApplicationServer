import standard.lib.thread
import standard.net.poll

define MAX_CPU_SLEEP	1000

define LOOP_EVENT_QUIT		true
define LOOP_EVENT_HANDLED	-1
define LOOP_EVENT_REMOVE	-2
define LOOP_EVENT_REMOVE_ALL	-3

class __EventEvent {
	var deleg;
	var when;
	var rerun;
	var socket;
	var data;
	var deleg2;
	var data2;
	var notifyEvents;
	var events_len;

	__EventEvent(deleg, when, rerun = 0) {
		this.deleg = deleg;
		this.when = when;
		if (rerun < 0)
			rerun = 0;
		this.rerun = rerun;
	}

	run(loop) {
		if (!this.deleg)
			return true;
		if (!this.when)
			return this.deleg(loop);
		var now = Date.now();
		if (this.when <= now) {
			if (this.deleg(loop))
				return true;
			if (this.rerun > 0) {
				this.when = now + this.rerun;
				return false;
			}
			return true;
		}
		return false;
	}

	runRead(loop) {
		var code = this.runCallbacks(loop, false);
		switch (code) {
			case LOOP_EVENT_QUIT:
				return true;
			case LOOP_EVENT_HANDLED:
				return false;
		}

		if (!this.deleg) {
			if (this.deleg2)
				return false;
			return true;
		}
		if (rerun > 0)
			this.when = Date.now() + rerun;
		return this.deleg(this.data, loop);
	}

	runWrite(loop) {
		var code = this.runCallbacks(loop, true);
		switch (code) {
			case LOOP_EVENT_QUIT:
				return true;
			case LOOP_EVENT_HANDLED:
				return false;
		}

		if (!this.deleg2) {
			if (this.deleg)
				return false;
			return true;
		}
		return this.deleg2(this.data, loop);
	}

	runCallbacks(loop, is_write) {
		if ((notifyEvents) && (events_len)) {
			for (var i = 0; i < length notifyEvents; i ++) {
				var callback = notifyEvents[i];
				if (callback) {
					switch (callback(this.data, loop, is_write)) {
						case LOOP_EVENT_HANDLED:
							return LOOP_EVENT_HANDLED;
						case LOOP_EVENT_REMOVE:
							events_len --;
							notifyEvents[i] = null;
							break;
						case LOOP_EVENT_REMOVE_ALL:
							events_len = 0;
							notifyEvents = null;
							return false;
						case LOOP_EVENT_QUIT:
							events_len = 0;
							notifyEvents = null;
							return true;
					}
				}
			}
		}
	}
}

class EventLoop {
	protected var[] events;
	protected var[] socketevents;
	protected var running;
	protected var cpu_sleep;
	protected var iotimeout_objects;
	protected var pollfd;

	public var minSleep = 0;
	// dummy variable
	private var Socket;
	private var __currentevent;

	public var userData;

	EventLoop() {
		this.pollfd = PollOpen();
	}

	stat() {
		return ["events" => length events, "sockets" => length socketevents, "iotimeoutobjects" => iotimeout_objects, "cpu_sleep" => cpu_sleep];
	}

	schedule(delegate e, interval = 0) {
		if (!interval)
			interval = 1;
		cpu_sleep = 0;
		events[length events] = new __EventEvent(e, Date.now() + interval, interval);
	}

	timeout(delegate e, when) {
		if (!when)
			when = 1;
		cpu_sleep = 0;
		var timeout = 0;
		if (when) {
			timeout = Date.now() + when;
			iotimeout_objects ++;
		}
		events[length events] = new __EventEvent(e, timeout, when);
	}

	add(delegate e) {
		cpu_sleep = 0;
		events[length events] = new __EventEvent(e, 0, 0);
	}

	callbackEvents() {
		if (!__currentevent)
			throw new Error(@class + "." + @member + " must be called from a loop event", 1, @filename, @line);
		return __currentevent.events_len;
	}

	addEvent(deleg) {
		if (!__currentevent)
			throw new Error(@class + "." + @member + " must be called from a loop event", 1, @filename, @line);
		if (!deleg)
			return;

		if ((!__currentevent.events_len) && (!__currentevent.deleg2)) {
			var flags;
			if (__currentevent.deleg)
				flags = POLL_READ;
			flags |= POLL_WRITE;

			PollUpdate(pollfd, __currentevent.socket, flags);
		}

		__currentevent.events_len ++;
		if (__currentevent.notifyEvents) {
			for (var i = 0; i < length __currentevent.notifyEvents; i ++) {
				if (!__currentevent.notifyEvents[i]) {
					__currentevent.notifyEvents[i] = deleg;
					return;
				}
			}
			__currentevent.notifyEvents[length __currentevent.notifyEvents] = deleg;
		} else {
			__currentevent.notifyEvents = [ deleg ];
		}
	}

	object() {
		if (!__currentevent)
			throw new Error(@class + "." + @member + " must be called from a loop event", 1, @filename, @line);
		return __currentevent.data;
	}

	data() {
		if (!__currentevent)
			throw new Error(@class + "." + @member + " must be called from a loop event", 1, @filename, @line);
		return __currentevent.data2;
	}

	setData(data) {
		if (!__currentevent)
			throw new Error(@class + "." + @member + " must be called from a loop event", 1, @filename, @line);
		__currentevent.data2 = data;
	}

	onWrite(deleg) {
		if (!__currentevent)
			throw new Error(@class + "." + @member + " must be called from a loop event", 1, @filename, @line);
		if (__currentevent.socket > 0) {
			var old_deleg = __currentevent.deleg2;
			__currentevent.deleg2 = deleg;
			if ((!old_deleg) || (!deleg)) {
				var flags;
				if (__currentevent.deleg)
					flags = POLL_READ;
				if ((deleg) || (__currentevent.events_len))
					flags |= POLL_WRITE;

				PollUpdate(pollfd, __currentevent.socket, flags);
			}
		}
	}

	onRead(delegate deleg) {
		if (!__currentevent)
			throw new Error(@class + "." + @member + " must be called from a loop event", 1, @filename, @line);
		if (__currentevent.socket > 0)
			__currentevent.deleg = deleg;
	}

	updateTimeout(timeout = 0) {
		if ((__currentevent) && (__currentevent.socket > 0)) {
			var when = 0;
			if (timeout < 0)
				timeout = 0;
			if (timeout > 0)
				when = Date.now() + timeout;
			__currentevent.when = when;
			__currentevent.rerun = timeout;
		}		
	}

	addSocket(iodescriptor, delegate e, timeout = 0, w = null) {
		var socket = iodescriptor;
		while (typeof socket == "class")
			socket = socket.Socket;

		var key = "" + socket;
		
		var flags = 0;
		if (e)
			flags |= POLL_READ;
		if (w)
			flags |= POLL_WRITE;

		PollAdd(pollfd, socket, flags);
		var when = 0;
		if (timeout > 0)
			when = Date.now() + timeout;
		var ev = new __EventEvent(e, when, timeout);
		ev.socket = socket;
		ev.data = iodescriptor;
		if (w)
			ev.deleg2 = w;
		socketevents[key] = ev;
		if (timeout > 0)
			iotimeout_objects ++;
	}

	iterate() {
		if (!(length this.events)) {
			cpu_sleep = MAX_CPU_SLEEP;
			if (!socketevents)
				running = false;
			return;
		}

		var events2 = new [];
		var max_date = 0;
		var no_sleep = 0;
		for (var i = 0; i < length this.events; i ++) {
			var e = this.events[i];
			try {
				if ((e) && (!e.run(this))) {
					events2[length events2] = e;
					if ((!max_date) || (e.when < max_date)) {
						max_date = e.when;
						if (!e.when)
							no_sleep = true;
					}
				}
			} catch (var exc) {
				console.error(LOG_THIS, exc);
			}
		}
		if (no_sleep) {
			cpu_sleep = this.minSleep;
		} else {
			if (max_date) {
				cpu_sleep = (max_date - Date.now()) / 2;
				if (cpu_sleep > MAX_CPU_SLEEP)
					cpu_sleep = MAX_CPU_SLEEP;
				else
				if (cpu_sleep < this.minSleep)
					cpu_sleep = this.minSleep;
			} else
				cpu_sleep = MAX_CPU_SLEEP;
		}
		this.events = events2;
	}

	protected __remove_sockets() {
		var socketevents2 = new [];
		var iotimeout_objects2 = 0;
		for (var i = 0; i < length socketevents; i++) {
			var e = socketevents[i];
			if ((e) && (e.socket > 0) && ((!e.when) || (e.when >= Date.now()))) {
				socketevents2["" + e.socket] = e;
				if (e.rerun)
					iotimeout_objects2 ++;
			} else
			if ((e) && (e.socket > 0))
				PollRemove(pollfd, e.socket);
		}
		this.socketevents = socketevents2;
		this.iotimeout_objects = iotimeout_objects2;
	}

	protected __timedout() {
		var iotimeout_objects2 = this.iotimeout_objects;
		if (iotimeout_objects2 > 0) {
			var expired = false;
			for (var i = 0; i < length socketevents; i++) {
				var e = socketevents[i];
				if ((e) && (e.when <= Date.now())) {
					expired = true;
					break;
				}
			}
			if (expired)
				this.__remove_sockets();
		}
	}

	protected __exec(outsockets, write_event) {
		var remove_sockets = 0;
		for (var i = 0; i < length outsockets; i ++) {
			var socket = outsockets[i];
			if (socket) {
				var key = "" + socket;
				var e = socketevents[key];
				this.__currentevent = e;
				try {
					if ((!e) || (((write_event) && (e.runWrite(this))) || ((!write_event) && (e.runRead(this))))) {
						if (e)
							PollRemove(pollfd, e.socket);
						socketevents[key] = null;
						remove_sockets ++;
					}
				} catch (var exc) {
					PollRemove(pollfd, e.socket);
					socketevents[key] = null;
					remove_sockets ++;
					console.error(LOG_THIS, exc);
				}
				this.__currentevent = null;
			}
		}
		return remove_sockets;
	}

	protected __poll(timeout) {
		if (timeout < 0)
			timeout = 0;
		var outsockets = PollWait(pollfd, timeout, var write_sockets);
		if ((outsockets) || (write_sockets)) {
			var remove_sockets = 0;
			if (outsockets)
				remove_sockets += this.__exec(outsockets, false);
			if (write_sockets)
				remove_sockets += this.__exec(write_sockets, true);
			if (remove_sockets)
				this.__remove_sockets();
		} else
		if (this.iotimeout_objects)
			this.__timedout();
	}

	run() {
		running = true;
		while (running) {
			if (this.socketevents) {
				this.__poll(cpu_sleep);
			} else {
				if (cpu_sleep > 0)
					Sleep(cpu_sleep);
			}
			iterate();
		}
		this.__close();
		// enable restarting the queue
		this.pollfd = PollOpen();
	}

	quit() {
		running = false;
	}

	protected __close() {
		if (this.pollfd) {
			PollClose(this.pollfd);
			this.pollfd = 0;
		}
	}

	finalize() {
		this.__close();
	}
}
