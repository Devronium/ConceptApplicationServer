include TCPSocket.con
include TLSESocket.con
include Serializable.con

import standard.lib.str

class HTTPRequest {
	protected var socket;
	protected var url;
	protected var connected;
	protected var headersreceived;
	protected var content_length = -1;

	public var buffer = "";
	public var[] headers;
	public var[] response;

	public var OnResponse;
	public var UserData;

	HTTPRequest(string url) {
		url = this.parseurl(url);
		var port;
		if (url["proto"] == "https") {
			socket = new TLSESocket();
			port = url["port"] ?? 443;
		} else {
			socket = new TCPSocket();
			port = url["port"] ?? 80;
		}
		url["port"] = port;
		this.url = url;
	}

	protected parseurl(url) {
		var[] arr;
		var level = 0;
		var element = "";
		var is_port = false;
		for (var i = 0; i < length url; i++) {
			var u = url[i];
			if ((level) && (u != '[') && (u != ']')) {
				element += u;
			} else
			switch (u) {
				case "/":
					// don't parse
					if (element) {
						if (is_port) {
							arr["port"] = value element;
							is_port = false;
						} else
							arr["host"] = element;
						element = SubStr(url, i);
						i = length url;
					}
					break;
				case "[":
					level++;
					break;
				case "]":
					level--;
					break;
				case ":":
					if (!arr) {
						arr["proto"] = ToLower(element);
					} else {
						arr["host"] = element;
						is_port = true;
					}
					element = "";
					break;
				default:
					element += u;
			}
		}
		if (element) {
			if (is_port) {
				arr["port"] = value element;
				element = "/";
			} else
			if (!arr["host"]) {
				arr["host"] = element;
				element = "/";
			}
			arr["path"] = element;
		}
		return arr;
	}

	protected perform(method, resource, headers = null, payload = "", http_version = "HTTP/1.1") {
		method = ToUpper(method);
		var request = "$method $resource $http_version\r\n";		
		if (!headers)
			headers = new [];

		if (!headers["Host"])
			headers["Host"] = url["host"];

		if (headers) {
			if (typeof headers == "string")
				request += trim(headers) + "\r\n";
			else
			if (typeof headers == "array") {
				var keys = GetKeys(headers);
				for (var i = 0; i < length keys; i++) {
					var k = keys[i];	
					if (k)
						request += trim(k) + ": " + trim("" + headers[k]) + "\r\n";
				}
			}
		}
		request += "\r\n";
		if (payload)
			request += payload;
		return request;
	}

	request(method = "GET", headers = null, payload = "") {
		this.buffer = "";
		this.headers = new [];
		this.headersreceived = false;
		this.response = new [];
		this.content_length = -1;
		if (!connected) {
			if (socket.Connect(url["host"], url["port"])) {
				connected = true;
			}
		}
		if (!connected)
			return false;
		var request = perform(method, url["path"], headers, payload);
		do {
			var written = socket.Write(request);
			if (written <= 0)
				return false;
			request = SubStr(request, written);
		} while (request);
		return true;
	}

	pending(maxtimeout = 0) {
		return socket.GetHasData(maxtimeout);
	}

	iterate(maxtimeout = 0) {
		var iterations = 0;
		if ((headersreceived) && (content_length >= 0) && (length buffer >= content_length))
			return 0;

		while (pending(maxtimeout)) {
			buffer += socket.Read();
			if (!headersreceived) {
				var header_pos = Pos(buffer, "\r\n\r\n");
				if (header_pos > 0) {
					var header = SubStr(buffer, 0, header_pos - 1);
					var arr = StrSplit(header, "\r\n");
					headers = new [];
					var arr_response = StrSplit(arr[0], " ");
					response["version"] = arr_response[0];
					response["code"] = arr_response[1];
					for (var i = 1; i < length arr; i++) {
						header = arr[i];
						if (header) {
							var sep = Pos(header, ":");
							if (sep > 0) {
								var k = ToLower(trim(SubStr(header, 0, sep - 1)));
								if (k == "content-length") {
									content_length = value trim(SubStr(header, sep));
									headers[k] = content_length;
								} else {
									var typehk = typeof headers[k];
									if (typehk == "string") {
										headers[k] = [headers[k], trim(SubStr(header, sep))];
									} else
									if (typehk == "array") {
										headers[k] += trim(SubStr(header, sep));
									} else
										headers[k] = trim(SubStr(header, sep));
								}
							}
						}
					}
					buffer = SubStr(buffer, header_pos + 3);
				}
				headersreceived = true;
			}
			iterations++;
			if ((headersreceived) && (content_length >= 0) && (length buffer >= content_length))
				break;
		}
		if ((OnResponse) && (headersreceived) && (((content_length >= 0) && (length buffer >= content_length)) || (content_length < 0)))
			OnResponse(this);

		return iterations;
	}

	close() {
		if (connected)
			socket.Close();
		connected = false;
	}

	finalize() {
		this.close();
	}
}
