import standard.lib.stt
import standard.C.io
import standard.lib.str

class TTSHelper {
	var modelName;

	TTSHelper(model_name) {
		this.modelName = model_name;
	}

	static tts(text, model, out_path, extra_params = "") {
		text = StrReplace(text, "\\", "\\\\");
		text = StrReplace(text, "\"", "\\\"");
		if (extra_params)
			extra_params = " " + extra_params;
		return _system("tts --text \"$text\" --model_name \"$model\" --out_path \"$out_path\"$extra_params");
	}

	speak(text, out_path) {
		return this.tts(text, modelName, out_path);
	}
}

class STTStream {
	var _handle;
	protected var _owner;

	public property Owner { get _owner }

	STTStream(owner) {
		STT_CreateStream(owner._handle, this._handle);
		this._owner = owner;
	}

	feed(var buffer) {
		if (!_handle)
			throw "STTStream is closed";
		STT_FeedAudioContent(this._handle, buffer);
	}

	decode() {
		if (!_handle)
			throw "STTStream is closed";

		return STT_IntermediateDecode(this._handle);
	}

	decodeWithData(aNumResults) {
		if (!_handle)
			throw "STTStream is closed";

		return STT_IntermediateDecodeWithMetadata(this._handle, aNumResults);
	}

	finish() {
		if (!_handle)
			throw "STTStream is closed";
		var str = STT_FinishStream(this._handle);
		this._handle = null;
		this._owner = null;
		return str;
	}

	close() {
		STT_FreeStream(this._handle);
		this._handle = null;
		this._owner = null;
	}

	finalize() {
		if (this._handle) {
			STT_FreeStream(this._handle);
			this._handle = null;
		}
		this._owner = null;
	}
}

class STT {
	var _handle;

	private var _external_scorer;
	public property externalScorer { set setExternalScorer, get _external_scorer }
	public property modelSampleRate { get getModelSampleRate }

	STT(string model_path) {
		STT_CreateModel(model_path, this._handle);
	}

	setExternalScorer(string scorer_path) {
		_external_scorer = scorer_path;
		var err;
		if (scorer_path)
			err = STT_EnableExternalScorer(this._handle, scorer_path);
		else
			err = STT_DisableExternalScorer(this._handle);
		if (err)
			throw "Error $err in enabling/disabling external scorer";
	}

	addHotWord(word, number boost) {
		if (typeof word == "array") {
			for (var i = 0; i < length word; i ++)
				this.addHotWord(word[i], boost);
		}
			
		return STT_AddHotWord(this._handle, word, boost);
	}

	eraseHotWord(word) {
		if (typeof word == "array") {
			for (var i = 0; i < length word; i ++)
				this.eraseHotWord(word[i]);
		}
			
		return STT_EraseHotWord(this._handle, word);
	}

	clearHotWords() {
		return STT_ClearHotWords(this._handle);
	}

	setScorerAlphaBeta(aAlpha, aBeta) {
		return STT_SetScorerAlphaBeta(this._handle, aAlpha, aBeta);
	}

	getModelSampleRate() {
		return STT_GetModelSampleRate(this._handle);
	}

	speechToText(var buffer) {
		return STT_SpeechToText(this._handle, buffer);
	}

	speechToTextWithData(var buffer, aNumResults) {
		return STT_SpeechToTextWithMetadata(this._handle, buffer, aNumResults);
	}

	done() {
		STT_FreeModel(this._handle);
		this._handle = null;
	}

	finalize() {
		if (this._handle)
			STT_FreeModel(this._handle);
	}
}
