import standard.lib.xml
import standard.lib.str

class XMLNode {
	var _handle;

	public property Properties { get GetProps }
	public property Handle { get _handle }
	public property Content { get GetContent, set SetContent }

	public property Child { get GetChild }
	public property Parent { get GetParent }
	public property Last { get GetLast }
	public property Prev { get GetPrev }
	public property Next { get GetNext }
	public property Name { get GetName }
	public property Path { get GetPath }


	function GetProps() {
		var arr_node=xmlGetNodeArray(_handle);
		if (arr_node) {
			var arr=arr_node["properties"];
			if (arr)
				return arr;
		}
		return [ ];
	}

	function GetHandle() {
		return _handle;
	}

	function SetContent(str) {
		xmlNodeSetContent(_handle,str);
	}

	function GetContent() {
		return xmlNodeGetContent(_handle);
	}

	function GetPath() {
		return xmlGetNodePath(_handle);
	}

	function __Create(name) {
		_handle=xmlNewNode(0,name);
		return this;
	}

	static function CreateNew(name) {
		var node=new XMLNode();
		node._handle=xmlNewNode(0,name);
		return node;
	}

	function AddChild(xmlnode) {
		if (classof xmlnode != "XMLNode")
			return 0;
		return xmlAddChild(_handle,xmlnode._handle);
	}

	function AddNext(xmlnode) {
		if (classof xmlnode != "XMLNode")
			return 0;
		return xmlAddNextSibling(_handle,xmlnode._handle);
	}

	function AddPrev(xmlnode) {
		if (classof xmlnode != "XMLNode")
			return 0;
		return xmlAddPrevSibling(_handle,xmlnode._handle);
	}

	function SetProperty(name,val) {
		return xmlSetProp(_handle,name,val);
	}

	function GetProperty(name) {
		return xmlGetProp(_handle,name);
	}

	function GetNext() {
		var arr_node=xmlGetNodeArray(_handle);
		if (arr_node) {
			var nptr=arr_node["next"];
			if (!nptr)
				return 0;
			var node=new XMLNode();
			node._handle=nptr;
			return node;
		}
		return 0;
	}

	function GetPrev() {
		var arr_node=xmlGetNodeArray(_handle);
		if (arr_node) {
			var nptr=arr_node["prev"];
			if (!nptr)
				return 0;
			var node=new XMLNode();
			node._handle=nptr;
			return node;
		}
		return 0;
	}

	function GetLast() {
		var arr_node=xmlGetNodeArray(_handle);
		if (arr_node) {
			var nptr=arr_node["last"];
			if (!nptr)
				return 0;
			var node=new XMLNode();
			node._handle=nptr;
			return node;
		}
		return 0;
	}

	function GetParent() {
		var arr_node=xmlGetNodeArray(_handle);
		if (arr_node) {
			var nptr=arr_node["parent"];
			if (!nptr)
				return 0;
			var node=new XMLNode();
			node._handle=nptr;
			return node;
		}
		return 0;
	}

	function GetChild() {
		var arr_node=xmlGetNodeArray(_handle);
		if (arr_node) {
			var nptr=arr_node["children"];
			if (!nptr)
				return 0;
			var node=new XMLNode();
			node._handle=nptr;
			return node;
		}
		return 0;
	}

	function Copy(number copy_no_children=false) {
		if (_handle) {
			var nptr=xmlCopyNode(_handle, 1+copy_no_children);

			if (!nptr)
				return 0;

			var node=new XMLNode();
			node._handle=nptr;
			return node;
		}

		return null;
	}

	function GetName() {
		var arr_node=xmlGetNodeArray(_handle);
		if (arr_node) {
			return ""+arr_node["name"];
		}
		return "";
	}

	public function Free() {
		xmlFreeNode(this._handle);
	}
}

class XMLDocument {
	private var docptr;
	private var rootnode;
	private var _encoding="";
	private var _filename="default.xml";
	private var _version="";

	private var[] _errors;

	public property Encoding { set SetEncoding, get _encoding }
	public property Root { set SetRoot, get GetRoot}
	public property Filename { set SetFilename, get _filename}
	public property Version { set SetVersion, get _version}
	public property Handle { get docptr }

	public property Errors { get _errors }
	public property ErrorsText { get GetErrorsText }

	public function GetXPath(string path) {
		var nodearr=xmlGetPath(docptr, path);
		var[] ret_arr;

		if (nodearr) {
			var len=length nodearr;
			for (var i=0;i<len;i++) {
				var nodec=new XMLNode();
				nodec._handle=nodearr[i];
				ret_arr[i]=nodec;
			}
			//return nodec;
		}

		return ret_arr;
	}

	private function GetRoot() {
		if (rootnode)
			return rootnode;

		var node=new XMLNode();
		node._handle=xmlDocGetRootElement(docptr);
		if (!node._handle)
			return 0;
		rootnode=node;
		return node;
	}

	private function SetRoot(node) {
		if (classof node != "XMLNode")
			return 0;

		rootnode=node;
		xmlDocSetRootElement(docptr,node.Handle);
	}

	private function SetEncoding(enc) {
		_encoding=""+enc;
	}

	private function SetFilename(fstr) {
		_filename=""+fstr;
	}

	private function SetVersion(str) {
		_version=""+str;
	}

	public function XMLDocument() {
		docptr=0;
		_encoding="UTF-8";
		_version="1.0";
		_filename="document.xml";
	}

	public function Create() {
		_errors=new [];
		xmlSetStructuredErrorFunc(null, this.ErrorHandler);
		docptr=xmlNewDoc(_version);
		xmlSetStructuredErrorFunc(null, null);
		return (docptr!=0);
	}

	public function LoadString(var str) {
		_errors=new [];
		xmlSetStructuredErrorFunc(null, this.ErrorHandler);
		docptr=xmlReadMemory(str,_filename,"",0);
		xmlSetStructuredErrorFunc(null, null);
		return (docptr!=0);
	}

	public function Load() {
		_errors=new [];
		xmlSetStructuredErrorFunc(null, this.ErrorHandler);
		docptr=xmlReadFile(_filename,_encoding,0);
		xmlSetStructuredErrorFunc(null, null);
		return (docptr!=0);
	}

	public function LoadHTML(var str) {
		_errors=new [];
		xmlSetStructuredErrorFunc(null, this.ErrorHandler);
		docptr=htmlReadMemory(str,"","",0);
		xmlSetStructuredErrorFunc(null, null);
		return (docptr!=0);
	}


	public function Save() {
		return xmlSaveFile(_filename,docptr,_encoding);
	}

	public function SaveString(number format=2) {
		return xmlDocDumpFormatMemory(docptr,format);
	}

	public function NewNode(name) {
		var node=new XMLNode();
		return node.__Create(name);
	}

	public function Free() {
		_errors=new [];
		xmlFreeDoc(docptr);
		docptr=0;
	}

	function finalize() {
		Free();
	}

	private function ErrorHandler(number arg, array err) {
		_errors[length _errors]=err;
	}

	private function GetErrorsText() {
		var res="";
		var err=this._errors;
		if (err) {
			var len=length err;
			for (var i=0;i<len;i++) {
				var e=err[i];
				if (typeof e=="array") {
					res+=""+e["line"]+":"+e["message"];
				}
			}
		}
		return res;
	}

	static function EscapeURI(string uri, string exceptions="") {
		return xmlURIEscapeStr(uri, exceptions);
	}

	static function UnescapeURI(string uri) {
		return xmlURIUnescapeString(uri);
	}

	static function ParseQuery(string query) {
		var[] res;
		if (!query)
			return res;
		query=trim(query);
		if (query[0]=="?")
			query++;

		var arr=StrSplit(query, "&");


		var len=length arr;
		for (var i=0;i<len;i++) {
			var pair=arr[i];
			if (pair) {
				var arr2=StrSplit(pair,"=", true);
				if (length arr2==2) {
					var key=arr2[0];
					var val=StrReplace(arr2[1], "+","%20");
					var len_val=length val;

					if ((val) && (val[0]==val[len_val-1]) && (val[0]=='"'))
						val=SubStr(val, 1,len_val-2);

					val=XMLDocument::UnescapeURI(val);
					res[key]=val;
				}
			}
		}
		return res;
	}
}
