import standard.net.ldap

class LDAP {
	var ld;

	LDAP(string url, version = LDAP_VERSION3) {
		ldap_initialize(ld, url, LDAP_VERSION3);
	}

	bind(string dn, string password, var err = null) {
		if (!ld)
			throw "LDAP not initialized";
		err = ldap_simple_bind_s(ld, dn, password);
		return !err;
	}

	unbind() {
		if (ld)
			ldap_done(ld);
		ld = null;
	}	

	search(dn, filter = "", scope = LDAP_SCOPE_SUBTREE, limit = LDAP_NO_LIMIT, var err = 0) {
		if (!ld)
			throw "LDAP not initialized";

		err = ldap_search(ld, dn, LDAP_SCOPE_SUBTREE, filter, limit, var msgid);
		var data = [ ];
		if (msgid) {
			data = ldap_array(ld, msgid);
			ldap_msgfree(msgid);
		}
		return data;
	}

	starttls() {
		if (!ld)
			throw "LDAP not initialized";
		return ldap_start_tls(ld);
	}

	installtls() {
		if (!ld)
			throw "LDAP not initialized";
		return ldap_install_tls(ld);
	}

	del(dn, async = false, var tref = 0) {
		if (!ld)
			throw "LDAP not initialized";
		if (async)
			return ldap_delete_ext(ld, dn, tref);
		return ldap_delete_ext_s(ld, dn);
	}

	rename(dn, newrdn, newparent = "", deleteoldrdn = true, async = false, var tref = 0) {
		if (!ld)
			throw "LDAP not initialized";
		if (async)
			return ldap_rename(ld, dn, newrdn, newparent, deleteoldrdn, tref);
		return ldap_rename_s(ld, dn, newrdn, newparent, deleteoldrdn);
	}

	add(string dn, array mod, async = false, var tref = 0) {
		if (!ld)
			throw "LDAP not initialized";
		if (async)
			return ldap_add_ext(ld, dn, mod, tref);
		return ldap_add_ext_s(ld, dn, mod);
	}

	modify(string dn, array mod, async = false, var tref = 0) {
		if (!ld)
			throw "LDAP not initialized";
		if (async)
			return ldap_modify_ext(ld, dn, mod, tref);
		return ldap_modify_ext_s(ld, dn, mod);
	}

	static errstr(number code) {
		return ldap_err2string(code);
	}

	finalize() {
		unbind();
	}
}
