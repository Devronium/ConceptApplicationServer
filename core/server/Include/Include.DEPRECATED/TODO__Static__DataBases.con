import 'standard.db.sql'
import 'standard.lib.str'

define TRANSACTION_ROLLBACK		0
define TRANSACTION_COMMIT		1

class ADODataRecord {
	public var DATA;
	private var ORDER;
	private var LINK;

	public operator = (x) {
		this.DATA=""+x;
		ODBCColumnSet(ORDER,this.DATA,this.LINK);
		return x;
	}

	public function ToBuffer() {
		return this.DATA;
	}

	public function ToString() {
		return String(this.DATA);
	}

	public function ToNumber() {
		return value this.DATA;
	}

	function XMLSerialized() {
		var XMLData;
		if (typeof DATA=="class")
			XMLData = "<ADODataRecord>" + this->DATA->XMLSerialized() + "\n</ADODataRecord>";
		else
			XMLData = "<ADODataRecord>" + String(this->DATA) + "</ADODataRecord>";

		return XMLData;
	}

	function ADODataRecord(ORD,LNK) {
		this.ORDER=ORD;
		this.LINK=LNK;
	}
}


class ADOConnection {
	protected var connection;
	protected var result;

	public property Connection { get connection }
	
	function ADOConnection() {
		this->connection=0;
	}

	function Open(strConnection) {
		this->connection=ODBCDriverConnect(strConnection);
		return this->connection;
	}

	function OpenDSN(DSN, username, password) {
		this->connection=ODBCConnect(DSN,username,password);
		return this->connection;
	}

	function Close() {
		ODBCDisconnect(this->connection);
		return this->connection=0;
	}

	function StartTransaction() {
		if (this->connection)
			ODBCAutoCommit(0,this->connection);
	}

	function EndTransaction(MODE) {
		if (MODE==TRANSACTION_ROLLBACK)
			return ODBCRollback(this->connection);
		else
			return ODBCCommit(this->connection);
	}

	function LastError() {
		return ODBCError(this->connection);
	}
}

class VirtualADOObject {
	protected var _DATASET;
	protected var _DATAFIELD;

	public property DataSet { set SetDataSet, get _DATASET }
	public property DataField { set SetDataField, get _DATAFIELD }

	// is pure virtual !
	public function __DataSetUpdateCommand(Sender);
	public function __DataSetNewQueryNotify(Sender);

	public function __DataSetColumnUpdate(Sender,ColumnValue,rowindex);

	protected function AddLinkedObject();
	protected function SetDataSet(dataset) {
		this->_DATASET=dataset;
		dataset->AddLinkedObject(this);
	}
	override AddLinkedObject;

	protected function SetDataField(x) {
		this->_DATAFIELD=x;
	}
}

class ADODataSet {
	protected var _CONNECTION;
	protected var _COMMANDTEXT;
        protected var result;
        protected var data_array;

	protected var ADO_LINKED_OBJECTS;
	protected var rowindex;
	protected var prepared_query;
	protected var status;

	protected var old_rowindex;

	public property Connection { set SetConnection, get _CONNECTION }
	public property CommandText { set SetCommandText, get _COMMANDTEXT }
	public property FieldValues { get GetValues }
	public property PreparetQuery { get prepared_query, set SetPreparedQuery }
	public property RowIndex { get rowindex }
	public property IsUpdateQuery { get status }

	function First();


	public function SetPreparedQuery(parameter) {
		this->prepared_query=""+parameter;
	}

	public function AddParameter(var parameter) {
		if (this->result)
			ODBCAddParameter(""+parameter,this->result);
	}

	public function ClearParameters() {
		if (this->result)
			ODBCClearParameters(this->result);
	}

	function Text(); override Text;

	private function ForcedNotify() {
		var count=length this->ADO_LINKED_OBJECTS;
		for (var i=0;i<count;i++) {
			var object=&this->ADO_LINKED_OBJECTS[i];
			object->__DataSetNewQueryNotify(this);
		}
	}

	private function Syncronize() {
		var count=length this->ADO_LINKED_OBJECTS;
		for (var i=0;i<count;i++) {
			var object=&this->ADO_LINKED_OBJECTS[i];
			if 	((classof object=="ConceptEdit") ||
				(classof object=="ConceptMemo")) {
					var field=object->DataField;
					if (field!="")
						FieldValues[field]=object->Text;
			}
		}
	}

	function ExecuteQuery(); override ExecuteQuery;
	function FetchByIndex(); override FetchByIndex;

	public function Update() {
		if (this->result) {
			status=1;
			Syncronize();
			ODBCUpdate(this->result);

			old_rowindex=rowindex;

			this.ExecuteQuery();
			status=0;
		} else
			old_rowindex=-1;
	}

	public function Refresh() {
		old_rowindex=rowindex;
		this.ExecuteQuery();
	}

	public function Delete() {
		if (this->result) {
			ODBCDelete(this->result);
			old_rowindex=rowindex;
			this.ExecuteQuery();

		}
	}

	public function ADODataSet(_Connection) {
		this->Connection=_Connection;
		this->ADO_LINKED_OBJECTS=new [];//ArrayList();
		this->data_array=new [];//ArrayList();
		this->rowindex=-1;
		this->_COMMANDTEXT="";
		this->prepared_query="";
		this->old_rowindex=-1;
	}

	protected function SetConnection(x) {
		this->_CONNECTION=x;
	}

	private function SetCommandText(x) {
		this->_COMMANDTEXT=x;
	}

	public function UpdateColumnList(Sender) {
		try {
			var index=data_array->GetIndexByKey(Sender->DataField);
			if (ODBCFetchFirst(this->result)) {
				do {
					var str=ODBCColumnGet(index,this->result);
					Sender->__DataSetColumnUpdate(this,str,-1);
				} while (ODBCFetchNext(this->result));
				ODBCFetchFirst(this->result);
			}
		} catch (var Exception) {
		}
	}

	public function AfterQueryNotify() {
		var ADO_COUNT=length this->ADO_LINKED_OBJECTS;
		var OBJECTS=this->ADO_LINKED_OBJECTS;

		for (var i=0;i<ADO_COUNT;i++) {
			var ADO_ELEMENT=&OBJECTS[i];
			ADO_ELEMENT->__DataSetNewQueryNotify(this);
		}
	}

	function ExecuteNonQuery() {
		this->rowindex=-1;
		this->old_rowindex=-1;
		var conection_target=this->_CONNECTION->Connection;
		if (!conection_target)
			return -1;

		var result;

		if (prepared_query!="") {
			result=ODBCStatement(conection_target);
			if (!ODBCExecute(this->prepared_query,result)) {
				ODBCFreeResult(result);
				return 0;
			}
		} else
			result=ODBCExecuteQuery(this->_COMMANDTEXT,conection_target);

		if (result) {
			ODBCFreeResult(result);
			return 1;
		} else
			return 0;
	}

	function ExecuteQuery() {
		this->rowindex=-1;
		if (this->result) {
			ODBCFreeResult(this->result);
			this->result=0;
		}
		var conection_target=this->_CONNECTION->Connection;
		if (!conection_target)
			return -1;

		if (prepared_query!="") {
			this->result=ODBCStatement(conection_target);
			if (!ODBCExecute(this->prepared_query,this->result)) {
				ODBCFreeResult(result);
				return 0;
			}
		} else
			this->result=ODBCExecuteQuery(this->_COMMANDTEXT,conection_target);

		if (!this->result)
			return -1;

		delete this->data_array;
		this->data_array=new [];
		
		var count=ODBCCountColumns(this->result);
		var result=this->result;
		ODBCBindResult(result);
		for (var i=0;i<count;i++) {

			ODBCDescribeCol(i+1,
						var name,
						var data_type,
						var column_size,
						var decimal_digits,
						var nullable, 
						result
			);

			//this->data_array->Add(0,name);
			//this->data_array->Add(new ADODataRecord(i,result),name);
			this->data_array[name]=new ADODataRecord(i,result);
		}

		this->AfterQueryNotify();
		if (old_rowindex==-1)
			this->First();
		else {
			rowindex=-1;
			this->FetchByIndex(old_rowindex);
			old_rowindex=-1;
		}
		return result;
	}

	public function FetchByIndex(index) {
		var read=0;
		if (!this->result)
			return 0;

		if (this->rowindex==index-1)
			read=ODBCFetchNext(this->result);
		else
			read=ODBCFetchAbsolute(index+1,this->result);

		if (!read) {
			//this->CloseRead();
			return 0;
		}
		this->rowindex=index;

		var array=this->data_array;
		var count=length array;

		for (var i=0;i<count;i++) {
			var str=ODBCColumnGet(i,this->result);
			//array->ChangeValueByIndex(i,str);
			array[i]=str;
		}

		if (read) {
			var ADO_COUNT=length this->ADO_LINKED_OBJECTS;
			var OBJECTS=this->ADO_LINKED_OBJECTS;
			for (i=0;i<ADO_COUNT;i++) {
				var ADO_ELEMENT=&OBJECTS[i];
				ADO_ELEMENT->__DataSetUpdateCommand(this);
			}
		}
		
		return read;
	}

	public function Next() {
		return FetchByIndex(rowindex+1);
	}

	public function Prev() {
		return FetchByIndex(rowindex-1);
	}

	public function Current() {
		return FetchByIndex(rowindex);
	}

	override First;
	public function First() {
		return FetchByIndex(0);
	}

	public function AddLinkedObject(Object) {
		//this->ADO_LINKED_OBJECTS->Add(Object, this->ADO_LINKED_OBJECTS->Count);
		this->ADO_LINKED_OBJECTS[length this->ADO_LINKED_OBJECTS]=Object;
		Object->__DataSetNewQueryNotify(this);
		Object->__DataSetUpdateCommand(this);
	}

	public function RemoveLinkedObject(Name) {
		delete this->ADO_LINKED_OBJECTS[Name];
	}

	function GetValues() {
		var array=this->data_array;
		return array;
	}

	function CloseRead() {
		if (this->result) {
			ODBCFreeResult(this->result);
			this->result=0;
		}
		this->old_rowindex=-1;
	}

	function LastError() {
		return ODBCError();
	}
}