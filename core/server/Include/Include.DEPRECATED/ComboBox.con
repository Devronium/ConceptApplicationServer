include 'VisibleControl.con'

class ConceptComboBox extends VisibleControl {
	protected var _CAPTION;
	protected var _READONLY;
	public property Text { set SetCaption, get GetCaption }
	public property ReadOnly { set SetReadOnly, get _READONLY }

	protected function SetReadOnly(x) {
		if (typeof x==NUMERIC_TYPE)
			this->_READONLY=x!=0;
		else
		     	throw new ControlException(EXC_INVALID_ARGUMENT_TYPE, this);

                SendMessage(this->Name, MSG_CHANGED, P_COMBO_READONLY, this->_READONLY);
	}


	public function AddItem(item) {
                SendMessage(this->Name, MSG_ITEM_ADD, "0", item);
	}

	protected function SetCaption(x) {
		if (typeof x==STRING_TYPE)
			this->_CAPTION=x;
		else
		     	throw new ControlException(EXC_INVALID_ARGUMENT_TYPE, this);

                SendMessage(this->Name, MSG_CHANGED, P_TEXT, x);
	}

	protected function GetCaption() {
                SendMessage(this->Name, MSG_GET_PROPERTY, P_TEXT, 0);
		WaitMessage(var Sender, var MSG_ID=MSG_GET_PROPERTY, var Target, var VALUE);
		return VALUE;
	}

	public function ConceptComboBox(Owner) {
		this->VisibleControl(Owner, CLASS_COMBOBOX);
	}

	/*public function _SetTextWithoutNotify(x) {
		if (typeof x==STRING_TYPE)
			this->_CAPTION=x;
		else
		     	throw new ControlException(EXC_INVALID_ARGUMENT_TYPE, this);
	}

	public function ConceptComboBox_ProcessMessage(Sender, ID, Target, Value) {
		if ((ID==MSG_CHANGED) && (Sender==this->_NAME))
			this->_SetTextWithoutNotify(Value);
		this->VisibleControl_ProcessMessage(Sender, ID, Target, Value);
	}

	override ProcessMessage;
	public function ProcessMessage(Sender, ID, Target, Value) {
		this->ConceptComboBox_ProcessMessage(Sender,ID,Target,Value);
	}*/

	override __DataSetUpdateCommand;
	public function __DataSetUpdateCommand(Sender) {
		try {
			this->Text=Sender->FieldValues[this->_DATAFIELD].ToString();
		} catch (var exception) {
			this->Text="";
		}
	}
}