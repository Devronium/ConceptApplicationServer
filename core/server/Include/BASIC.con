import standard.lang.basic

class BASIC {
	protected var context;

	public var LastError;
	public var LastErrorCode;
	public var UserData;
	public var error_delegate;

	BASIC(error_handler = null) {
		context = BasicNewRuntime();
		if (error_handler)
			this.error(error_handler);
	}

	protected __check_error(extra_err = "") {
		LastErrorCode = 0;
		LastError = extra_err;
		if (extra_err)
			LastErrorCode = -1;
		if (context) {
			var err_code = BasicErrorCode(context, var errtext);
			if (err_code) {
				this.LastError = errtext;
				this.LastErrorCode = err_code;
				if (error_delegate)
					error_delegate(this, LastError, ["code" => err_code]);
			}
		}
	}

	reset() {
		this.done();
		context = BasicNewRuntime();
		return true;
	}

	error(delegate error_handler) {
		this.error_delegate = error_handler;
	}

	run(var code) {
		var rval = BasicEvaluateScript(context, code);
		this.__check_error();
		if (this.LastError)
			throw "" + this.LastError;
		return rval;
	}

	wrap(delegate, string js_name) {
		LastErrorCode = 0;
		LastError = "";
		var rval = BasicWrap(context, delegate, js_name);
		this.__check_error();
		return rval;
	}

	gc() {
		LastErrorCode = 0;
		LastError = "";
		BasicGC(context);
	}

	done() {
		LastErrorCode = 0;
		LastError = "";
		if (context) {
	  		BasicDestroyRuntime(context);
			context = null;
		}
	}

	finalize() {
		this.done();
	}

	static eval(string code) {
		var ctx = BasicNewRuntime();
		var res = BasicEvaluateScript(ctx, code);
		BasicDestroyRuntime(ctx);
		return res;
	}
}
