import standard.lib.str
import standard.C.io
include DirectoryList.con

class Main {
	var func_name = "";
	var[] modified_modules;

	Do(line, type) {
		if (Pos(line, ",") > 1) {
			if (type == "T_HANDLE2") {
				if ((length StrSplit(line, ",")) > 2)
					return line;
			} else
				return line;
		}
		return StrReplace(line, "$type(", "$type(" + func_name + ", ");
	}

	Modify(file="main.cpp") {
		if (!FileExists(file))
			return false;
		var data = StrSplit(StrReplace(ReadFile(file), "\r", ""), "\n", true);
		var output = "";
		var modified = false;
		for (var i = 0; i < length data; i++) {
			var line = data[i];
			var orig_line = line;
			var tline = trim(line);
			if (Pos(tline, "CONCEPT_FUNCTION_IMPL") == 1) {
				var arr = StrSplit(line, "(");
				func_name = trim(StrSplit(StrReplace(arr[1], ")", ","), ",")[0]);
			} else
			if (Pos(tline, "T_STRING(") == 1) {
				line = Do(line, "T_STRING");
			} else
			if (Pos(tline, "T_STRING_NULL(") == 1) {
				line = Do(line, "T_STRING_NULL");
			} else
			if (Pos(tline, "T_NUMBER(") == 1) {
				line = Do(line, "T_NUMBER");
			} else
			if (Pos(tline, "T_ARRAY(") == 1) {
				line = Do(line, "T_ARRAY");
			} else
			if (Pos(tline, "T_DELEGATE(") == 1) {
				line = Do(line, "T_DELEGATE");
			} else
			if (Pos(tline, "T_OBJECT(") == 1) {
				line = Do(line, "T_OBJECT");
			} else
			if (Pos(tline, "T_HANDLE(") == 1) {
				line = Do(line, "T_HANDLE");
			} else
			if (Pos(tline, "T_HANDLE2(") == 1) {
				line = Do(line, "T_HANDLE2");
			}
			output += line + "\n";
			if (orig_line != line)
				modified = true;
		}
		if (modified) {
			echo "FILE: $file\n";
			WriteFile(output, file);
			return true;
		}
		return false;
	}

	Skip(arr, pos) {
		for (var i = pos; i < length arr; i++) {
			var line = trim(arr[i]);
			if ((!line) || (line[length line - 1] != "\\"))
				return i;
		}
		echo "ERROR!!!!\n";
		return pos;
	}

	ModifyHeader(file="stdlibrary.h") {
		if (!FileExists(file))
			return false;
		var data = StrSplit(StrReplace(ReadFile(file), "\r", ""), "\n", true);
		var output = "";
		var modified = false;
		var has_param_err = false;
		for (var i = 0; i < length data; i++) {
			var line = data[i];
			var orig_line = line;
			var tline = trim(line);
			if (Pos(tline, "#define __PARAM_ERR_MSG(fname, param_index, type)") == 1) {
				has_param_err = true;
				line = "#define __PARAM_ERR_MSG(fname, param_index, type)                                             (#fname \": parameter \" #param_index \" should be a \" type)";
			} else
			if (Pos(tline, "#define T_STRING(parameter_index)") == 1) {
				line =  "#define T_STRING(func_name, parameter_index)                                                                                          \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(char *, bind, parameter_index);                                                                         \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(NUMBER, bind_len, parameter_index);                                                                     \\\n";
				line += "    GET_CHECK_BUFFER(parameter_index, __INTERNAL_PARAMETER(bind, parameter_index), __INTERNAL_PARAMETER(bind_len, parameter_index), __PARAM_ERR_MSG(func_name,parameter_index,\"string\"));";
				i = Skip(data, i);
			} else
			if (Pos(tline, "#define T_NUMBER(parameter_index)") == 1) {
				line =  "#define T_NUMBER(func_name, parameter_index)                                                                                          \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(NUMBER, bind, parameter_index);                                                                         \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(INTEGER, bind_len, parameter_index);                                                                    \\\n";
				line += "    GET_CHECK_NUMBER(parameter_index, __INTERNAL_PARAMETER(bind, parameter_index), __PARAM_ERR_MSG(func_name,parameter_index,\"number\"));";
				i = Skip(data, i);
			} else
			if (Pos(tline, "#define T_ARRAY(parameter_index)") == 1) {
				line = "#define T_ARRAY(func_name, parameter_index)                                                                                           \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(char *, bind, parameter_index);                                                                         \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(NUMBER, bind_len, parameter_index);                                                                     \\\n";
				line += "    GET_CHECK_ARRAY(parameter_index, __INTERNAL_PARAMETER(bind, parameter_index), __PARAM_ERR_MSG(func_name,parameter_index,\"array\"));";
				i = Skip(data, i);
			} else
			if (Pos(tline, "#define T_OBJECT(parameter_index)") == 1) {
				line = "#define T_OBJECT(func_name, parameter_index)                                                                                           \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(char *, bind, parameter_index);                                                                          \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(NUMBER, bind_len, parameter_index);                                                                      \\\n";
				line += "    GET_CHECK_OBJECT(parameter_index, __INTERNAL_PARAMETER(bind, parameter_index), __INTERNAL_PARAMETER(bind_len, parameter_index), __PARAM_ERR_MSG(func_name,parameter_index,\"object\"));";
				i = Skip(data, i);
			} else
			if (Pos(tline, "#define T_DELEGATE(parameter_index") == 1) {
				line = "#define T_DELEGATE(func_name, parameter_index)                                                                                         \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(char *, bind, parameter_index);                                                                          \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(NUMBER, bind_len, parameter_index);                                                                      \\\n";
				line += "    GET_CHECK_DELEGATE(parameter_index, __INTERNAL_PARAMETER(bind, parameter_index), __INTERNAL_PARAMETER(bind_len, parameter_index), __PARAM_ERR_MSG(func_name,parameter_index,\"delegate\"));";
				i = Skip(data, i);
			} else
			if (Pos(tline, "#define T_STRING_NULL(parameter_index)") == 1) {
				line = "#define T_STRING_NULL(func_name, parameter_index)                                                                                      \\\n";
				line += "    T_STRING(func_name,parameter_index)                                                                                                \\\n";
				line += "    if (!(PARAM_LEN(parameter_index)))                                                                                                 \\\n";
				line += "        __INTERNAL_PARAMETER(bind, parameter_index) = 0;";
				i = Skip(data, i);
			} else
			if (Pos(tline, "#define T_HANDLE(parameter_index)") == 1) {
				line = "#define T_HANDLE(func_name, parameter_index)                                                                                           \\\n";
				line += "    T_NUMBER(func_name, parameter_index)                                                                                               \\\n";
				line += "    if (!(PARAM_INT(parameter_index)))                                                                                                 \\\n";
				line += "        return (void *)__PARAM_ERR_MSG(func_name,parameter_index,\"valid handle (not null)\");";
				i = Skip(data, i);
			} else
			if (Pos(tline, "#define T_HANDLE2(parameter_index, HANDLE_TYPE)") == 1) {
				line = "#define T_HANDLE2(func_name, parameter_index, HANDLE_TYPE)                                                                                                  \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(NUMBER, bind_internal, parameter_index);                                                                                      \\\n";
				line += "    __INTERNAL_PARAMETER_DECL(HANDLE_TYPE, bind, parameter_index);                                                                                          \\\n";
				line += "    GET_CHECK_NUMBER(parameter_index, __INTERNAL_PARAMETER(bind_internal, parameter_index), __PARAM_ERR_MSG(func_name,parameter_index,\"handle\");\\\n";
				line += "    if (!(__INTERNAL_PARAMETER(bind_internal, parameter_index))) {                                                                                          \\\n";
				line += "        return (void *)__PARAM_ERR_MSG(func_name,parameter_index,\"valid handle (not null)\");                                                    \\\n";
				line += "    } else {                                                                                                                                                \\\n";
				line += "        __INTERNAL_PARAMETER(bind, parameter_index) = (HANDLE_TYPE)(long)__INTERNAL_PARAMETER(bind_internal, parameter_index);                              \\\n";
				line += "    }";
				i = Skip(data, i);
			} else
			if (Pos(tline, "#define DEFINE_ICONSTANT(constant_name, constant_value)") == 1) {
				line = "#define DEFINE_ICONSTANT(constant_name, constant_value)                                       Invoke(INVOKE_DEFINE_CONSTANT, (void *)HANDLER, (char *)constant_name, (const char *)#constant_value);";
			} else
			if (Pos(tline, "#define DEFINE_FCONSTANT(constant_name, constant_value)") == 1) {
				line = "#define DEFINE_FCONSTANT(constant_name, constant_value)                                       Invoke(INVOKE_DEFINE_CONSTANT, (void *)HANDLER, (char *)constant_name, (const char *)#constant_value);";
			} else
			if (Pos(tline, "#define DEFINE_ECONSTANT(constant_name)") == 1) {
				line = "#define STR_HELPER(x) #x\n";
				line += "#define NTOSTR(x) STR_HELPER(x)\n";
				line += "#define DEFINE_ECONSTANT(constant_name)                                                       Invoke(INVOKE_DEFINE_CONSTANT, (void *)HANDLER, (const char*)#constant_name, (const char *)NTOSTR(constant_name));";
			} else
			if (Pos(tline, "GET_CHECK_NUMBER(parameter_index, __INTERNAL_PARAMETER(bind_internal, parameter_index), __PARAM_ERR_MSG(func_name,parameter_index,\"handle\");") > 0) {
				line = "    GET_CHECK_NUMBER(parameter_index, __INTERNAL_PARAMETER(bind_internal, parameter_index), __PARAM_ERR_MSG(func_name,parameter_index,\"handle\"));           \\";
			}

			output += line + "\n";
			if (orig_line != line)
				modified = true;
		}
		if (modified) {
			if (!has_param_err) {
				echo "NO ERROR PARAMETER: $file\n";
			} else {
				echo "HEADER: $file\n";
				WriteFile(output, file);
				return true;
			}
		}
		return false;
	}

	Main() {
		var path = "./";//"C:/Ageosoft/Concept2/modules/";
		var arr = DirectoryList::ListByType(path, S_IFDIR);
		for (var i = 0; i < length arr; i++) {
			var dir = arr[i];
			if (dir) {
				if ((Modify(path + dir + "/main.cpp")) || (Modify(path + dir + "/src/main.cpp")))
					modified_modules[path + dir] = path + dir;
				if ((ModifyHeader(path + dir + "/stdlibrary.h")) || (ModifyHeader(path + dir + "/src/stdlibrary.h")))
					modified_modules[path + dir] = path + dir;
			}
		}
		echo modified_modules;
	}
}
